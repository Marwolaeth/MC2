{
  "hash": "c9d76d2da4cbc5938bd4772e1a35a3e3",
  "result": {
    "markdown": "# Notation & computing {#notation-and-computing}\n\n\n$\\newcommand{\\line}{\\text{line}}\n\\newcommand{\\hump}{\\text{hump}}\n\\newcommand{\\sigmoid}{\\text{sigmoid}}\n\\newcommand{\\recip}{\\text{recip}}\n\\newcommand{\\diff}[1]{{\\cal D}_#1}\n\\newcommand{\\pnorm}{\\text{pnorm}}\n\\newcommand{\\dnorm}{\\text{dnorm}}\n\\let\\origvec\\vec\n\\let\\origmathit\\mathit\n\\let\\orighat\\hat\n\\let\\origbar\\bar\n\\newcommand{\\vec}[1]{\\overset{{\\rule[-1pt]{0mm}{1mm}}\\rightharpoonup}{\\mathbf{#1}}}\n\\newcommand{\\bar}[1]{\\overset{{\\rule[-1pt]{12pt}{.5mm}}}{\\mathbf{#1}}}\n\\newcommand{\\mathit}[1]{\\underset{\\leftharpoondown}{\\overset{{\\rightharpoonup}}{\\large\\mathbf #1}}}\n\\newcommand{\\hat}[1]{\\widehat{\\ \\mathbf#1\\ }}\n\\newcommand{\\len}[1]{{\\|{\\mathbf #1}\\|}}\n\\newcommand{\\tvec}[1]{\\overset{\\uparrow}{\\mathbf #1}}\n\\newcommand{\\tmat}[1]{\\overset{\\leftrightarrows}{\\mathbf #1}}\n\\newcommand{\\perpendicularto}[2]{#1\\!\\perp\\!#2}\n\\newcommand{\\modeledby}[2]{#1\\!\\sim\\!#2}\n\\newcommand{\\CC}[1]{\\color{#648fff}{#1}}\n\\newcommand{\\CE}[1]{\\color{#785ef0}{#1}}\n\\newcommand{\\CA}[1]{\\color{#dc267f}{#1}}\n\\newcommand{\\CB}[1]{\\color{#fe6100}{#1}}\n\\newcommand{\\CD}[1]{\\color{#ffb000}{#1}}$\n\n\n\n\n\n\n\n> *The ideas which are here expressed so laboriously are extremely simple .... The difficulty lies, not in the new ideas, but in escaping from the old ones, which [branch]^[Original word: \"ramify\"], for those brought up as most of us have been, into every corner of our minds.* --- J. M Keynes, 1936, [*The General Theory of Employment, Interest, and Money*](files.ethz.ch/isn/125515/1366_KeynesTheoryofEmployment.pdf), 1936\n\nIn addition to the specialized words we will use to express concepts and uses of calculus, we will also make extensive use of mathematical and computer-language notation. This chapter introduces you to the notation we'll be using. \n\nOne goal of good notation is to make clear which of these object types it is referring to. Another goal is to build on what you already know about how mathematics is written. For historical reasons these two goals are sometimes in conflict. \n\nYet another goal for notation has to with the central role of computing in the contemporary technical environment. Ideally, the mathematical notation we use should extend directly to computer-language notation. But in practice there is an incompatibility stemming from two sources:\n\n1. Traditional mathematical notation makes extensive use of spatial arrangement, as for instance in $\\frac{3}{4}$ or $x^{-3}$ or $\\sqrt[4]{\\strut y^2 - 6}$. For those familiar with it, this notation can be both concise and beautiful. But it was developed in an era of parchment and pen, without any inkling of keyboards and the strictly linear sequence of characters so widely used in written communication. Most mainstream computer languages are based on keyboard input.\n\n2. Traditional mathematical notation was developed for communicating between *people* and, like everyday language, has gaps and ambiguities that get sorted out (not always correctly) by human common sense. Computer languages, on the other hand, need to be precise, unambiguous, and interpreted by machines.\n\nWe'll attempt to use mathematical notation in a way that limits the conflict between tradition and computer notation. This conflict is particularly acute when it comes to the idea of an \"equation,\" so widely used in high-school mathematics but not a component of mainstream computer languages.\n\n## Functions, inputs, and quantities\n\nOur style of notation will be to give functions and their inputs *explicit names*. The basic principle is that a function name is a sequence of letters followed by an empty pair of parentheses, for instance $\\sin()$ an $\\ln()$.\n\nTraditional mathematical notation writes many functions both without a name and without the parentheses. Examples that you have likely seen are $x^2$, $\\sqrt{\\strut x}$, and $e^x$. If we were to absolutely impose the name/parentheses principle we would refer to these functions as, say, square() and sqrt() and exp(). Notice that the $x$ is not part of the name.\n\nSometimes will will use names like square() just to emphasize the point that we are talking about a function. But for the most part we will stick to the traditional form because it is ubiquitous and recognizable by most readers. \n\nThe name/parentheses notation, like exp() or sin() allows us to avoid having to write $x$ as the indicator of where the input to the function goes. That's helpful because, after all, the actual input might be something completely different from $x$.\n\nStill, there are times in which we do need to state the name of the input to functions. One of these is when ***defining a function***. To define a function, we will use an expression like\n$$g(y) \\equiv y \\cos(y)\\ .$$\nOn the left of the $\\equiv$ goes the name of the function, with the name of the input(s) in parentheses.  On the right of $\\equiv$ goes a formula for computing the output from the input. This formula is written in terms of the input name given on the left side of the definition.\n\nIn situations where there is just one input to a function, as in $g()$ above, we could use any name for the input. For instance, all of these are exactly equivalent to the definition for $g()$ given above:\n\n$$g(x) \\equiv x \\cos(x)\\\\\ng(z) \\equiv z \\cos(z))\\\\\ng(zebra) \\equiv zebra\\ \\cos(zebra)$$\n\nWe'll tend to avoid hard-to-read input names like $zebra$. Instead, we'll mostly use :\n\n- $\\large x$ or $\\large y$ or $\\large z$. \n- $\\large t$. This name is typically used when the input is meant to be ***time***. So if we were creating a function to represent the relationship between time (of day) and outdoor brightness, we might use this notation: $\\text{brightness}(t)$\n\nOther input names we will use often in this book include $u$, $v$, $w$, following the 17th-century convention introduced by Newton that input names come from the end of the alphabet. But we won't shy away from more descriptive names, like $T$ for \"temperature\" or $V$ for volume, or even $\\text{altitude}$ (which describes itself). \n\nWhen a function has more than one input, the input names serve to indicate where each input goes in the formula defining the calculation.  For instance:\n$$h(x, y) \\equiv x^2 e^y\\ .$$\n$h()$ is a completely different function than, say,\n$f(x, y) \\equiv y^2 e^x$. \n\nYou may have noticed that we've used the names $f()$, $g()$, and $h()$ a lot. Consider these names to be the equivalent of pronouns in English like \"this\", \"that\", \"it\", and so on. Function names like $f()$ or $F()$ will be used when we need to refer to a function for a moment: a sentence, a paragraph, a section. \n\nWe will also have many occasions where we need to give a name to a quantity. Of course, a quantity is different from a function; functions are ***relationships*** between quantities.\n\nFor example, we will use names for quantities that are ***parameters*** in a function, like:\n$$g(x) \\equiv a x^2 + b x + c\\ .$$ Here, $x$ is the name given to the input to $g()$, while $a$, $b$, and $c$ are names for other quantities involved in the formula.\n\nAgain following Newton's convention, names for quantities will come from the beginning of the alphabet. For instance, here is a definition of a function called a \"cubic polynomial\": \n$$h(x)\\equiv a + b x + c x^2 + d x^3\\ .$$\nBut there will be occasions where we need to compare two or more functions and run out of appropriate names from the start of the alphabet. A way to keep things organized is to use subscripts on the letters, for instancecomparing\n$$g(x) \\equiv a_0 + a_1 x^2 + a_2 x^2 + a_3 x^3 + a_4 x^4$$\nto \n$$f(x) \\equiv b_0 + b_1 x^2 + b_2 x^2\\ .$$\n\nOther ways professionals expand the set of letters from the start of the alphabet:\n\n- Use capital letters: $A$, $B$, $C$, and so on\n- Use Greek letters: $\\alpha$, $\\beta$, $\\gamma$, $\\delta$, ...\n\n## Function output\n\nWe will often ***apply a function to *** specific input quantities in order to produce an output from the function. An equivalent phrase is ***evaluate a function on*** an input. For instance, to apply the function $g()$ to the input quantity 3, any of the following mathematical expressions might be used:\n$$g(3)\\ \\ \\ \\text{or}\\ \\ \\ \\ g(x=3) \\ \\ \\ \\text{or}\\ \\ \\ \\ g(x)\\left.\\Large\\strut\\right|_{x=3}\\ .$$\nRemember that $g(3)$ or its equivalents are not themselves functions. They are the quantity that results from applying a the function to an input quantity.\n\n## Inputs, arguments, and variables\n\nIn everyday speech, an \"argument\" is a discussion between people with differing views. But in mathematics and computing, ***argument*** means something else entirely: it is a synonym for \"input to a function.\"\n\nIn this text, we'll mostly use \"input\" to refer to what goes into a mathematical function, although using \"argument\" would be fine. As regards computer functions ... In Section \\@ref(makefun) you'll see how to instruct the computer to create a mathematical function like $g()$ or $f()$ from the previous section. The names and format of such  instructions---e.g. make a mathematical function from a formula, draw a graph of a function, plot data---are given in the same function notation we use in math. For example, `makeFun()` constructs a function from a formula, `slice_plot()` graphs a function, `gf_point()` makes one style of data graphic. These R entities saying \"do this\" are also called \"functions.\" \n\nWhen referring to such R \"do this\" functions, we'll refer to the stuff that goes in between the parentheses as \"arguments.\" The word \"input\" would also be fine. The point of using \"input\" for math functions and \"argument\" for R \"do this\" functions is merely to help you identify when we are talking about mathematics and when we are talking about computing.\n\nA word we will **not** make much use of is \"variable.\" You are probably used to statements like, \"$x$ and $y$ are the variables,\" and it will take you a while to stop using them reflexively. The reason we will use \"input\" or \"argument\" instead of \"variable\" is that variable means too many different things in different contexts. For instance, in the algebra-course instruction, \"Solve $3x - 2 = x^2$,\" the $x$ is really a quantity, unknown at first but soon to be resolved by your algebraic skills. The $x$ in the solving problem would often be called a \"variable,\" but it's not at all an \"input\" or an \"argument.\"\n\nThere are two contexts in which we will use \"variable,\" neither of which has to do with inputs to functions. In talking about data, we will use \"variable\" in the statistical sense, meaning \"a type of quantity\" like height or pH. And in the final part of the text, involving system whose configuration changes in time, we'll use \"variable\" in the sense of \"a quantity that varies over time.\"\n\n## Computing: commands and evaluation\n\n\nMathematical notation is effective for **describing** functions and operations, but ***computing notation*** provides a way to go beyond the description to actually **carry out** the operations.  Computer notation will be an equal partner to mathematical notation in *MOSAIC Calculus*. \n\nWith computers, writing an expression in computer notation goes hand-in-hand with ***evaluating*** the notation. We'll start with the simplest mode of evaluation, where you are writing the expression in the ***console*** for the language. Figure \\@ref(fig:R-console) shows and example the console tab provided by the RStudio application. \n\n::: {.cell .fig-cap-location-margin layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n![An RStudio console tab for writing expressions and evaluating them. The `>` is the ***prompt*** after which you write your expression, here shown in $\\color{blue}{\\text{blue}}$. Pressing the \"return\" key causes the language interpreter to evaluate the command.](www/console.png){#fig-r-console fig-align='center' width=90%}\n:::\n:::\n\nIn @fig-r-console we have come in to the story in the middle of the action. To start, there was just a prompt character.\n\n$\\color{blue}{\\mathtt >}$\n\nThe person at the keyboard then typed a simple expression: `2 + 3`\n\n$\\color{blue}{\\mathtt >\\  2 + 3}$\n\nHaving completed the expression, the keyboarder presses \"return.\" The RStudio application sends the expression to the software that \"interprets\" it according to the rules of the R language. Since `2 + 3` is a complete, valid R expression, the R-language software carries out the action specified---adding 2 and 3---and returns the result to RStudio, which displays it just below the expression itself. \n$\\color{blue}{\\mathtt >\\  2 + 3}\\\\\\mathtt{[1]\\ 5}$\n\nNote that the value of the expression is simply the number `5`. The R language is set up to **format** numbers with an index, which is helpful when the value of the expressions is a large set of numbers. In the case here, with just a single number in the result of evaluating the expression, the index is simply stating the obvious. \n\nHaving printed the result of evaluating the `2 + 3` expression, RStudio shows another prompt, signally that it's ready for you to enter your next expression. In @fig-r-console) we're seeing the console after the person at the keyboard has responded to the prompt by writing another expression, pressed return, had RStudio print the value of that expression, and displayed a new prompt. \n\nThe two expressions shown in the console in @fig-r-console both evaluate to single numbers. We say, \"the command returns a value.\"  The ***command*** is a valid R expression followed by the instruction (\"Return\") to evaluate the command. The ***value*** of the expression is the result of evaluating the command.\n\nAnother common form of R expression is called ***assignment***. An assignment means \"giving a name to a value.\" It's done with a more complicated expression, like this:\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n\n```{.r .cell-code}\nb <- 22/7\n```\n:::\n\nThe result of evaluating this command is to store in the computer memory, under the name `b`, the value of `22/7`. Because the value is being stored, R is designed *not* to display the value as happened with the first two commands in the console. If you want to see the value printed out, give the name as a command:\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n\n```{.r .cell-code}\nb\n## [1] 3.142857\n```\n:::\n\n::: {.takenote}\nThis book displays the command being evaluated in a gray box, without a prompt. The value returned by the command is displayed underneath the command, prefaced by $\\color{red}{\\mathtt{\\#\\#}}$. In the book formatting, the four commands we have just described would be displayed in this way:\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" fig.showtext='true'}\n\n```{.r .cell-code}\n2 + 3\n## [1] 5\nsqrt(16)\n## [1] 4\nb <- 22/7\nb\n## [1] 3.142857\n```\n:::\n\nWhen reading this book, take care to distinguish between the display of a command and the display of the value returned by that command. The first is something you type, the second is printed by the computer.\n:::\n\n## Functions in R/mosaic {#makefun}\n\nOne of the fundamental mathematical operations in this book is ***defining functions***. You've already seen the way we use mathematical notation to define a function, for instance, \n$$h(t) \\equiv 1.5\\, t^2 - 2\\ .$$\nThe R/mosaic equivalent to the definition of $h()$ is:\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n\n```{.r .cell-code}\nh <- makeFun(1.5*t^2 - 2 ~ t)\n```\n:::\n\nOnce you have defined a function, you can evaluate it on an input. The R notation for evaluating functions is exactly the same as with mathematical notation, for instance,\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n\n```{.r .cell-code}\nh(4)\n## [1] 22\n```\n:::\n\nor \n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n\n```{.r .cell-code}\nh(t=4)\n## [1] 22\n```\n:::\n\nThere are obvious differences, however, between the mathematical and computing notation used to define a function. All the same information is being provided, but the format is different. That information is:\n\n1. the name of the function: $h()$ or `h`. When writing the name of a computer-defined function, we'll put the reminder parentheses after the name, as in `h()`. \n2. the name of the input to the function: $x$ or `x`\n3. the calculation that the function performs, written in terms of the input name. $1.5 t^2 -2$ or `1.5 * t^2 - 2`.\n\nLaying out the two notation forms side by side let's us label the elements they share:\n\n::: {.cell .column-page-right layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n![](www/formula-rosetta.png){fig-align='center' width=90%}\n:::\n:::\n\nFor the human reading the mathematical notation, you know that the statement defines a function because you have been told so. Likewise, the computer needs to be told what to do with the provided information. That's the point of `makeFun()`. There are other R/mosaic commands that could take the same information and do something else with it, for example create a graph of the function or (for those who have had some calculus) create the derivative or the anti-derivative of the function.\n\n::: {.takenote data-latex=\"\"}\nIn R, things like `makeFun()` are called \"functions\" because, like mathematical functions, they turn inputs into outputs. In the case of `makeFun()`, the input is a form called a ***tilde expression***, owing to the character tilde (<span style=\"font-size:250%'\">~</span>) in the middle. On the right-hand side of the tilde goes the name of the input. On the left-hand side is the R expression for the formula to be used, written as always in terms of the input name. The whole tilde expression is taken as the one argument to `makeFun()`. Although it may seem odd to have punctuation in the middle of an argument, remember that something similar happens when we write $h(t=3)$.\n:::\n\n## Names and assignment\n\nThe command\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n\n```{.r .cell-code}\nh <- makeFun(1.5*t^2 - 2 ~ t)\n```\n:::\n\ngives the name `h` to the function created by `makeFun()`. Good choice of names makes your commands much easier for the human reader. \n\nThe R language puts some restrictions on the names that are allowed. Keep these in mind as you create R names in your future work:\n\n1. A name is the **only**^[Note for R experts: Strictly speaking, the thing to the left of `<-` must be an \"assignable,\" which includes names with indices (e.g. `Engines$hp` or `Engines$hp[3:5]`\nand other forms). We will not use indexing in *MOSAIC Calculus*; we won't need it.] thing allowed on the left side of the assignment symbol `<-`. \n2. A name must *begin* with a letter of the alphabet, e.g. `able`, `Baker`, and so on.\n3. Numerals can be used after the initial letter, as in `final4` or `g20`. You can also use the period `.` and underscore `_` as in `third_place`. No other characters can be used in names: no minus sign, no `@` sign, no `/` or `+`, no quotation marks, and so on. \n\nFor instance, while `third_place` is a perfectly legitimate name in R, the following are not: `3rd_place`, `third-place`. But it's OK to have names like `place_3rd` or `place3`, etc., which start with a letter.\n\nR also distinguishes between letter case. For example, `Henry` is a different name than `henry`, even though they look the same to a human reader.\n\n\n\n\n## Formulas in R\n\nThe constraint of the keyboard means that computer formulas are written in a slightly different way than the traditional mathematical notation. This is most evident when writing multiplication and exponentiation. Multiplication must *always* be indicated with the `*` symbol, for instance $3 \\pi$ is written `3*pi`. For exponentiation, instead of using superscripts like $2^3$ you use the \"caret\" character, as in `2^3`. The best way to learn to implement mathematical formulas in a computer language is to read examples and practice writing them. \n\nHere are some examples:\n\nTraditional notation | R notation \n---------------------|-------------\n$3 + 2$              | `3 + 2`\n$3 \\div 2$           | `3 / 2`\n$6 \\times 4$         | `6 * 4`\n$\\sqrt{\\strut4}$     | `sqrt(4)`\n$\\ln 5$              | `log(5)`\n$2 \\pi$              | `2 * pi`\n$\\frac{1}{2} 17$     | `(1 / 2) * 17`\n$17 - 5 \\div 2$      | `17 - 5 / 2`\n$\\frac{17 - 5}{\\strut 2}$   | `(17 - 5) / 2`\n$3^2$                | `3^2`\n$e^{-2}$             | `exp(-2)`\n\n\nEach of these examples has been written using numbers as inputs to the mathematical operations. The syntax will be exactly the same when using an input name such as `x` or `y` or `altitude`, for instance `(x - y) / 2`. In order for that command using `x` and `y` to work, some meaning must have been previously attached to the symbols. We'll come back to this important topic on another day.\n\n\n\n\n\n\n## Exercises\n\n<details>\n<summary>**Exercise 2.1**: <span><img src=\"www/icons8-signpost.png\" title=\"Location:Exercises/convention-drill.Rmd\" width=\"12px\"/><span id=\"TKWEW\" style=\"color: red; font-size: 9pt;\">TKWEW unassigned</red></span></summary>\n\n\n\n\n\n\n\n\n\nUse the *MOSAIC Calculus* naming conventions to answer these questions.\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question A**  What is $h()$? \n\ni. <span class='Zchoice'>The name of a function<span class='mcanswer'>Correct. Right. Typically we use $f()$, $g()$, $h()$ or something similarly generic to stand for a function that we're going to be working with for a little while. Think of these as pronouns. Just as we can say, meaningfully, \"She gave it to him,\" we can say $h(x) \\equiv f(x) + g(2*x)$</span></span>     \nii. <span class='Zchoice'>The name of an input.<span class='mcanswer'>︎✘ Sorry, these will usually be letters like $x$, $y$, $t$.</span></span>     \niii. <span class='Zchoice'>A specific numerical value<span class='mcanswer'>︎✘ Sorry, but we'll use constructions with a subscript like $x_0$ or $y_\\star$ and the like for these.</span></span>\n:::\n:::\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question B**  How come we write $f()$ for the name of a function rather than just $f$ or $f(x)$? \n\ni. <span class='Zchoice'>No good reason<span class='mcanswer'>︎✘ We certainly intend with the empty parentheses to remind the reader that a name refers to a function. If you spot a place where we violate this intention, point it out to us.</span></span>     \nii. <span class='Zchoice'>It's a reminder that we're talking about a function with the name \"$f$\".<span class='mcanswer'>Nice! </span></span>     \niii. <span class='Zchoice'>The parentheses are part of the name.<span class='mcanswer'>︎✘ Not at all. Names in R never contain parentheses. So `f`, `fbar`, `fred` are all valid names in an R command, but `f()` is not. We use the parentheses when writing to a human audience as a reminder that the name is referring to a function. The computer doesn't need any such reminders</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question C**  What sort of thing is denoted by $x_0$ or $y_\\star$ or $y_{max}$? \n\ni. <span class='Zchoice'>A particular numerical value<span class='mcanswer'>Excellent! Right. For instance, it might be the particular value for the input to a function which produces an output of zero. Or it might be a particular location in the domain of a function.</span></span>     \nii. <span class='Zchoice'>The name of an input<span class='mcanswer'>︎✘ Sorry. We won't typically use subscripts when referring to an input name.</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question D**  Which of these symbols might stand for the entire **domain** of a function? \n\ni. <span class='Zchoice'>$y$<span class='mcanswer'>Right! Right. Another term to use for a symbol standing for a domain is \"name of an input\".</span></span>     \nii. <span class='Zchoice'>$f()$<span class='mcanswer'>︎✘ No, this is how we write the name of the function called \"$f$\"</span></span>     \niii. <span class='Zchoice'>$y_0$<span class='mcanswer'>︎✘ No. $y_0$ might be used to stand for a single point in the domain.</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question E**  Suppose you come across $v(w) \\equiv w + 3$ in this book. What do $v$ and $w$ stand for? \n\ni. <span class='Zchoice'>$v()$ is the name of a function and $w$ is the name of the input to that function.<span class='mcanswer'>Nice! Right. Whenever we write something like \"name(another_name) $\\equiv$\", we're saying **explicitly** that \"name\" refers to a function and \"another_name\" refers to an input.</span></span>     \nii. <span class='Zchoice'>It's meaningless.<span class='mcanswer'>︎✘ We'll try not to write meaningless mathematical expressions. If we do by mistake, let us know.</span></span>     \niii. <span class='Zchoice'>It's the same thing as $v = w + 3$.<span class='mcanswer'>︎✘ $v = w+3$ is an **equation**. But $v(w) \\equiv w+3$ is the format for **defining a function** named $v()$.</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question F**  Are $g(x) \\equiv x^2$ and $h(w) \\equiv w^2$ the same function? \n\ni. <span class='Zchoice'>Yes, although that function is being given two different names.<span class='mcanswer'>Excellent! The only thing that's significant about the name of an input is that it be used consistently in the function algorithm.</span></span>     \nii. <span class='Zchoice'>Of course not!<span class='mcanswer'>︎✘ Sorry. I suppose you might ask, \"What do you mean by the **same** function?\" Remember that a function is a relationship between inputs and the output. $g(x) \\equiv x^2$ and $h(w) \\equiv w^2$ describe exactly the same relationship: the output will be the square of the input.</span></span>\n:::\n:::\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n</details>\n\n<details>\n<summary>**Exercise 2.2**: <span><img src=\"www/icons8-signpost.png\" title=\"Location:Exercises/function-notation.Rmd\" width=\"12px\"/><span id=\"LDNE\" style=\"color: red; font-size: 9pt;\">LDNE unassigned</red></span></summary>\n\n\n\n\n\n\n\n\n\nAccording to the notation style we use in CalcZ, which of these things is a function? Which a number?\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question A**  What kind of a thing is $\\sqrt{z}$? \n\ni. <span class='Zchoice'>A function<span class='mcanswer'>Right! </span></span>     \nii. <span class='Zchoice'>A number<span class='mcanswer'>︎✘ $z$ is one of the standard names we will use for an input to a function. If we had given the function a name, for instance $g(z) \\equiv \\sqrt{z}$, we would be able to tell from the $(z)$ that $g()$ is a function. But whenever we use a standard input name, the expression is a function.</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question B**  What kind of a thing is $\\sqrt{y^\\star}$? \n\ni. <span class='Zchoice'>A number<span class='mcanswer'>Right! </span></span>     \nii. <span class='Zchoice'>A function<span class='mcanswer'>︎✘ According to our convention, the name $y^\\star$ refers to a particular value as opposed to the name of a function input.</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question C**  What kind of a thing is $e^{k t}$? \n\ni. <span class='Zchoice'>A function<span class='mcanswer'>Excellent! </span></span>     \nii. <span class='Zchoice'>A number<span class='mcanswer'>︎✘ The letter $t$ is one of our standard letters for input names. $k$ is a letter, but since it is not from the end of the alphabet, you have a hint that it is intended to be a parameter, that is a symbol representing a specific numerical quantity.</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question D**  What kind of a thing is $k$ in the definition $g(k) \\equiv e^k$? \n\ni. <span class='Zchoice'>A number<span class='mcanswer'>︎✘ </span></span>     \nii. <span class='Zchoice'>The name of an input to a function.<span class='mcanswer'>Right! </span></span>     \niii. <span class='Zchoice'>A function<span class='mcanswer'>︎✘ Notwithstanding our convention that $k$ is not on its own a name used for inputs, when we use the full function-definition style, anything in the parentheses following the function name is explicitly stated as an input name.</span></span>\n:::\n:::\n</details>\n\n<details>\n<summary>**Exercise 2.3**: <span><img src=\"www/icons8-signpost.png\" title=\"Location:Exercises/puppy-build-radio.Rmd\" width=\"12px\"/><span id=\"kZG5Fj\" style=\"color: red; font-size: 9pt;\">kZG5Fj unassigned</red></span></summary>\n\n\n\n\n\n\n\nThe following traditional-style notation is intended to define a function that is 2 times the pattern-book sinusoid. But something is wrong.\n\n$$g(t) \\equiv 2 \\sin(x)$$\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question A**  What's wrong with the definition? \n\ni. <span class='Zchoice'>$g()$ isn't an appropriate name<span class='mcanswer'>︎✘ You can name functions what you like.</span></span>     \nii. <span class='Zchoice'>The formula should be written $2 \\times \\sin(x)$<span class='mcanswer'>︎✘ You are welcome to write things that way if you want to emphasize the multiplication, but you don't have to. On the other hand, in R it would be absolutely required to write the multiplication operator: `2 * sin(x)`.</span></span>     \niii. <span class='Zchoice'>$t$ is not a good choice for the input name.<span class='mcanswer'>︎✘ It's a fine choice, especially when the input is time.</span></span>     \niv. <span class='Zchoice'>The input name in the formula doesn't match the input name on the left side of $\\equiv$.<span class='mcanswer'>Correct. That's it. Once you choose an input name (here, $t$), make sure to write the formula in terms of that name.</span></span>\n:::\n:::</details>\n\n<details>\n<summary>**Exercise 2.4**: <span><img src=\"www/icons8-signpost.png\" title=\"Location:Exercises/horse-sing-drawer.Rmd\" width=\"12px\"/><span id=\"aeOnO5\" style=\"color: red; font-size: 9pt;\">aeOnO5 unassigned</red></span></summary>\n\n\n\n\n\n\n\nConsider this expression in math notation:\n\n<div style=\"font-size: 20px; text-align:center;\">\n$$\\frac{e^{k t}}{k}$$\n</div>\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question A**  Which of the following R expressions implements the math-notation expression? \n\ni. <span class='Zchoice'>`k exp(kt)`<span class='mcanswer'>︎✘ You must always express multiplication explicitly, using `*` between the quantities to be multiplied.</span></span>     \nii. <span class='Zchoice'>`e^k*t / k`<span class='mcanswer'>︎✘ Use `exp(x)` for $e^x$.</span></span>     \niii. <span class='Zchoice'>`exp(k t) / k`<span class='mcanswer'>︎✘ `k t` should be written `k*t`</span></span>     \niv. <span class='Zchoice'>`exp(k*t) / k`<span class='mcanswer'>Nice! </span></span>     \nv. <span class='Zchoice'>`1/k e^kt`<span class='mcanswer'>︎✘ 1) Use `*` for multiplication. 2) Use `exp(x)` for $e^x$.</span></span>\n:::\n:::\n\n</details>\n\n<details>\n<summary>**Exercise 2.5**: <span><img src=\"www/icons8-signpost.png\" title=\"Location:Exercises/pine-light-mug.Rmd\" width=\"12px\"/><span id=\"ooJK5d\" style=\"color: red; font-size: 9pt;\">ooJK5d unassigned</red></span></summary>\n\n\n\n\n\n\n\nSuppose you want to define a straight-line function named $f()$ such that $f(x)\\equiv m x + b$. Each of the following R statements is **incorrect** for this purpose. Say why.\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question A**  `f <- m*x + b` \n\ni. <span class='Zchoice'>Need to use `makeFun()` to define a function.<span class='mcanswer'>Nice! </span></span>     \nii. <span class='Zchoice'>`m` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niii. <span class='Zchoice'>`b` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niv. <span class='Zchoice'>Should be `y <- m*x + b`.<span class='mcanswer'>︎✘ </span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question B**  `f <- makeFun(m*x + b)` \n\ni. <span class='Zchoice'>The first argument to `makeFun()` should be a *tilde expression*.<span class='mcanswer'>Right! </span></span>     \nii. <span class='Zchoice'>`m` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niii. <span class='Zchoice'>`b` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niv. <span class='Zchoice'>`makeFun()` requires **two** inputs.<span class='mcanswer'>︎✘ No, but it does require a tilde expression input.</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question C**  `f <- makeFun(x ~ m*x + b)` \n\ni. <span class='Zchoice'>The tilde expression should have the input name on the right-hand side of the `~`.<span class='mcanswer'>Nice! </span></span>     \nii. <span class='Zchoice'>`m` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niii. <span class='Zchoice'>`b` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niv. <span class='Zchoice'>The first argument is not a tilde expression.<span class='mcanswer'>︎✘ Actually, it is a tilde expression, just not the right sort of tilde expression.</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question D**  `f <- makeFun(mx + b ~ x)` \n\ni. <span class='Zchoice'>The tilde expression is missing the multiplication operator `*` between `m` and `x`<span class='mcanswer'>Right! </span></span>     \nii. <span class='Zchoice'>`m` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niii. <span class='Zchoice'>`b` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niv. <span class='Zchoice'>The name `f` is mis-spelled.<span class='mcanswer'>︎✘ </span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question E**  `f <- makeFun(b*x + m ~ x)` \n\ni. <span class='Zchoice'>The roles of `m` and `b` have been reversed.<span class='mcanswer'>Excellent! </span></span>     \nii. <span class='Zchoice'>`m` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niii. <span class='Zchoice'>`b` is not defined.<span class='mcanswer'>︎✘ </span></span>     \niv. <span class='Zchoice'>`x` is not defined.<span class='mcanswer'>︎✘ </span></span>\n:::\n:::</details>\n\n<!-- basic R instructions -->\n<details>\n<summary>**Exercise 2.6**: <span><img src=\"www/icons8-signpost.png\" title=\"Location:Exercises/fish-sees-tree.Rmd\" width=\"12px\"/><span id=\"BXCA4\" style=\"color: red; font-size: 9pt;\">BXCA4 unassigned</red></span></summary>\n\n\n\n\n\n\n\nOpen a [SANDBOX](https://maa-statprep.shinyapps.io/CalcZ-Sandbox/). (Just click on that link, although you may eventually be given other ways to open a sandbox.)\n\n::: {.scaffolding  data-latex=\"\"}\nWhen you see a breakout box like this, it means that we're providing some computer code that you can paste into a sandbox and run. For this exercise, that code is\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n\n```{.r .cell-code}\nx <- 2\nsin(x)*sqrt(x)\n```\n:::\n\nPaste those two lines into the sandbox and press \"Run code.\" Verify that you get this as a result:\n\n`[1] 1.285941`\n:::\n\nEach line that you pasted in the sandbox is a ***command***. The first command gives a value to $x$. The second command uses that value for $x$ to calculate a function output. The function is $g(x)\\equiv \\sin(x) \\times \\sqrt{\\strut x}$. \n\n::: {.why  data-latex=\"\"}\nWhy not simplify the above code to the single line `sin(2)*sqrt(2)`? This would produce the same output but would introduce an ambiguity to the human reader. We want to make it clear to the reader (and the computer) that whatever $x$ might be, it should be used as the input to **both** the $\\sin()$ and the $\\sqrt{\\strut\\ \\ \\ }$ functions.\n:::\n\nIn the following questions, numbers have been rounded to two or three significant digits. Select the answer *closest* to the computer output.\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question A**  Change $x$ to 1. What's the output of $\\sin(x) \\ \\sqrt{\\strut x}$ \n\n    <span class='Zchoice'>-1.51<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>0.244<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>0.84<span class='mcanswer'>$\\heartsuit\\ $</span></span>       <span class='Zchoice'>0.99<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>2.14<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>`NaN`<span class='mcanswer'>︎✘ </span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question B**  Change $x$ to 3. What's the output of $\\sin(x) \\  \\sqrt{\\strut x}$ \n\n    <span class='Zchoice'>-1.51<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>0.244<span class='mcanswer'>$\\heartsuit\\ $</span></span>       <span class='Zchoice'>0.84<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>0.99<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>2.14<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>`NaN`<span class='mcanswer'>︎✘ </span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question C**  Change $x$ to $-5$. What's the output of $\\sin(x) \\  \\sqrt{\\strut x}$ \n\ni. <span class='Zchoice'>-1.51<span class='mcanswer'>︎✘ </span></span>     \nii. <span class='Zchoice'>0.244<span class='mcanswer'>︎✘ </span></span>     \niii. <span class='Zchoice'>0.84<span class='mcanswer'>︎✘ </span></span>     \niv. <span class='Zchoice'>0.99<span class='mcanswer'>︎✘ </span></span>     \nv. <span class='Zchoice'>2.14<span class='mcanswer'>︎✘ </span></span>     \nvi. <span class='Zchoice'>`NaN`<span class='mcanswer'>Correct. This stands for Not-a-Number, which is what you get when you calculate the square root of a negative input.</span></span>\n:::\n:::\n\nIn the sandbox, change the **function** to be $\\sqrt{\\strut\\pnorm(x)}$.\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question D**  For $x=2$, what's the output of $\\sqrt{\\strut\\pnorm(x)}$? \n\n    <span class='Zchoice'>-1.51<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>0.244<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>0.84<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>0.99<span class='mcanswer'>$\\heartsuit\\ $</span></span>       <span class='Zchoice'>2.14<span class='mcanswer'>︎✘ </span></span>       <span class='Zchoice'>`NaN`<span class='mcanswer'>︎✘ </span></span>\n:::\n:::</details>\n\n<details>\n<summary>**Exercise 2.7**: <span><img src=\"www/icons8-signpost.png\" title=\"Location:Exercises/goat-look-boat.Rmd\" width=\"12px\"/><span id=\"0V510o\" style=\"color: red; font-size: 9pt;\">0V510o R formula notation</red></span></summary>\n\n\n\n\n\n\n\n\n\nUsing the R console, translate each of the following mathematical expressions into R in order to calculate the **numerical value** of the expression.\n\ni. $(16 - 3)/2$              <!-- translate to (16-3)/2        -->\nii. $\\sqrt{\\frac{19}{3}}$    <!-- translate to sqrt(19/3)      -->\niii. $\\cos(\\frac{2 \\pi}{3})$ <!-- translate to cos(2 * pi / 3) -->\niv. $\\pi^3 + 2$              <!-- translate to pi^3 + 2        -->\nv. $\\pi^{3+2}$               <!-- translate to pi^(3+2)        --></details>\n\n<details>\n<summary>**Exercise 2.8**: <span><img src=\"www/icons8-signpost.png\" title=\"Location:Exercises/pollen-fly-lamp.Rmd\" width=\"12px\"/><span id=\"Ce79t3\" style=\"color: red; font-size: 9pt;\">Ce79t3 makeFun()</red></span></summary>\n\n\n\n\n\n\n\n\n\nEach of these attempts to define a mathematical function using R leads to an error message. Modify the statement so that it works properly.\n\n1. `f(x) <- makeFun(2*x + 3 ~ x)`\n1. `h <- makeFun(x ~ 2*x + 3)`\n1. `f <- makeFun(2x + 3)`\n1. `g(x) <- makeFun(4 sin(x))`\n1. `h2 <- 2*x + 3 ~ x`\n1. `g2 <- makeFun(2*x + 3 ~ y)`\n1. `p(x,y) <- makeFun(2 x + 3 y~ x & y)`\n</details>\n\n<!-- when things go wrong -->\n<details>\n<summary>**Exercise 2.9**: <span><img src=\"www/icons8-signpost.png\" title=\"Location:Exercises/seahorse-take-pen.Rmd\" width=\"12px\"/><span id=\"BaEJkS\" style=\"color: red; font-size: 9pt;\">BaEJkS unassigned</red></span></summary>\n\n\n\n\n\n\n\n\n::: {.underconstruction}\nMake this an exercise on \"when things go wrong.\"\n:::\n\nWhen your R command is not a complete sentence, the [SANDBOX](https://maa-statprep.shinyapps.io/CalcZ-Sandbox/) will display an error like this:\n\n<span style=\"font-color: red;\"><code>Error in parse(text = x, keep.source = TRUE) : <text>:5:0: unexpected end of input </code></span>\n\nThe \"unexpected end of input\" is the computer's way of saying, \"You haven't finished your sentence so I don't know what to do.\"\n\nEach of these R expressions is incomplete. Your job, which you should do in a sandbox, is to turn each into a complete expression. Sometimes you'll have to be creative, since when a sentence is incomplete you, like the computer, don't really know what it means to say! But each of these erroneous expressions can be fixed by **adding** or **changing** text.\n\nOpen a sandbox and copy each of the items below, one at a time, into a sandbox. Press \"Run code\" for that item and verify that you get an error message. \n\nFor the first item, the sandbox will look like this:\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n![Running an invalid command will produce an error message.](/Users/kaplan/KaplanFiles/MOSAIC-Calculus-V2/Preliminaries/Exercises/www/sandbox-error.png){fig-align='center' width=90%}\n:::\n:::\n\nThen, fix the command so you get a numerical result rather than the error message.\n\nWorking through all of these will help you develop an eye and finger-memory for R commands.\n\ni.  `sin 3`\niv. `((16 - 4) + (14 + 2) / sqrt(7)`\nv. `pnorm(3; mean=2, sd=4)`\nvi. `log[7]`\nvii. `14(3 + 7)`\nviii. `e^2`\nix. `3 + 4 x + 2 x^2`</details>\n\n## Drill questions\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question i**  Which of these is the symbol for \"is defined as\"?  \n\ni. <span class='Zchoice'>$=$<span class='mcanswer'>︎✘ An equals sign says that the two sides happen to be equal, not that the left side is **defined** as the right side.</span></span>     \nii. <span class='Zchoice'>$\\equiv$<span class='mcanswer'>Good. Three parallel bars signify a definition.</span></span>     \niii. <span class='Zchoice'>$\\sim$<span class='mcanswer'>︎✘  </span></span>     \niv. <span class='Zchoice'>$\\approx$<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question ii**  What is the name of the function defined by $$f(y) \\equiv \\sin(y) + e^y \\ ?$$  \n\ni. <span class='Zchoice'>$f$<span class='mcanswer'>Nice! Note that we will usually write function names with trailing parentheses, like $f()$, in order to remind you that $f$ refers to a function rather than an input or parameter or whatever.</span></span>     \nii. <span class='Zchoice'>$\\sin$<span class='mcanswer'>︎✘  </span></span>     \niii. <span class='Zchoice'>$f(y)$<span class='mcanswer'>︎✘ This isn't a function name. This is how we write the **output** from applying function $f()$ to the input denoted by the name $y$.</span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question iii**  How do we refer to the output generated by applying $g(x) \\equiv x+3$ to the input 3?   \n\ni. <span class='Zchoice'>$g(x)$<span class='mcanswer'>︎✘  </span></span>     \nii. <span class='Zchoice'>$g(3)$<span class='mcanswer'>Excellent!  </span></span>     \niii. <span class='Zchoice'>$y = 6$<span class='mcanswer'>︎✘ It's a habit from high-school math to use the name $y$ for outputs. Breaking that habit will help you learn and use calculus.</span></span>\n:::\n:::\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question iv**  Is `xx` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>$\\heartsuit\\ $ </span></span>       <span class='Zchoice'>False<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question v**  Is `x_x` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>$\\heartsuit\\ $ </span></span>       <span class='Zchoice'>False<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question vi**  Is `-x` a legitimate name in R?  \n\ni. <span class='Zchoice'>True<span class='mcanswer'>︎✘  </span></span>     \nii. <span class='Zchoice'>False<span class='mcanswer'>Correct. The minus sign are other such symbols are not allowed characters in an R name.</span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question vii**  Is `3x` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>︎✘  </span></span>       <span class='Zchoice'>False<span class='mcanswer'>$\\heartsuit\\ $Names should start with a letter</span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question viii**  Is `x3` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>$\\heartsuit\\ $Numbers are OK in names, so long as the first character is a letter</span></span>       <span class='Zchoice'>False<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question ix**  Is `sqrt` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>$\\heartsuit\\ $In fact, it is the name of an oft-used function in R.</span></span>       <span class='Zchoice'>False<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question x**  Is `x + y` a legitimate name in R?  \n\ni. <span class='Zchoice'>True<span class='mcanswer'>︎✘  </span></span>     \nii. <span class='Zchoice'>False<span class='mcanswer'>Good. `x + y` is an R expression that uses names, but the expression is not itself a name.</span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xi**  Is `3 * x` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>︎✘  </span></span>       <span class='Zchoice'>False<span class='mcanswer'>$\\heartsuit\\ $`*` and <space> are not acceptable characters in a name.</span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xii**  Is `xprime` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>$\\heartsuit\\ $ </span></span>       <span class='Zchoice'>False<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xiii**  Is `x prime` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>︎✘  </span></span>       <span class='Zchoice'>False<span class='mcanswer'>$\\heartsuit\\ $Names cannot have blank spaces internally.</span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xiv**  Is `dx` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>$\\heartsuit\\ $ </span></span>       <span class='Zchoice'>False<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xv**  Is `xx` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>$\\heartsuit\\ $ </span></span>       <span class='Zchoice'>False<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xvi**  Is `dx_f` a legitimate name in R?  \n\n    <span class='Zchoice'>True<span class='mcanswer'>$\\heartsuit\\ $ </span></span>       <span class='Zchoice'>False<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xvii**  What's wrong with this assignment statement?<br> `x < 4`  \n\n    <span class='Zchoice'>Nothing<span class='mcanswer'>︎✘  </span></span>       <span class='Zchoice'>It's missing part of the `<-` token.<span class='mcanswer'>$\\heartsuit\\ $ </span></span>       <span class='Zchoice'> `x` is an improper name.<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xviii**  What's wrong with this assignment statement?<br> `3*x <- 4`  \n\ni. <span class='Zchoice'>Nothing<span class='mcanswer'>︎✘ The item to the left of `<-` needs to be a valid name. `3*x` is not.</span></span>     \nii. <span class='Zchoice'>It should use addition instead of multiplication.<span class='mcanswer'>︎✘  </span></span>     \niii. <span class='Zchoice'>The item to the left of `<-` needs to be a name<span class='mcanswer'>Excellent! `3 * x` is an instruction to multiply 3 times x. It is not a name.</span></span>     \niv. <span class='Zchoice'>There's no `x` on the right-hand side of the assignment arrow.<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xix**  What's wrong with this assignment statement?<br> `x -> 3+4`  \n\ni. <span class='Zchoice'>Nothing<span class='mcanswer'>︎✘  </span></span>     \nii. <span class='Zchoice'>You can't use addition in an assignment statement.<span class='mcanswer'>︎✘ You can, but it has to be on the right side of the assignment, where you construct the value to be assigned to the name on the left side.</span></span>     \niii. <span class='Zchoice'>The assignment has to point toward the **name**, not the *value*<span class='mcanswer'>Good.  </span></span>\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xx**  We can write something like <br>$f(x) \\equiv x^2$ </br> in mathematical notation. Is it legit in R to write `f(x) <- x^2` ?  \n\ni. <span class='Zchoice'>Yes, it's fine.<span class='mcanswer'>︎✘  </span></span>     \nii. <span class='Zchoice'>`f(x)` is not a valid name in R.<span class='mcanswer'>Correct.  </span></span>     \niii. <span class='Zchoice'>Almost. You need to use \\(\\equiv\\) instead of `<-` .<span class='mcanswer'>︎✘ There's no symbol \\(\\equiv\\) on the keyboard or recognized in the R language.</span></span>\n:::\n:::\n\n\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xxi**  Using our notation conventions from the textbook, which one of the following kinds of things is $y_0 ?$  \n\ni. <span class='Zchoice'>A constant<span class='mcanswer'>Correct.  </span></span>     \nii. <span class='Zchoice'>A function name<span class='mcanswer'>︎✘  </span></span>     \niii. <span class='Zchoice'>An input name<span class='mcanswer'>︎✘ A subscript (like $_0$ here) or non-numeric superscript (like $^\\star$) on what would otherwise be an input name will be instead a **constant**.</span></span>\n:::\n:::\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xxii**  Using our notation conventions from the textbook, which one of the following kinds of things is $t^\\star?$  \n\ni. <span class='Zchoice'>A constant<span class='mcanswer'>Nice!  </span></span>     \nii. <span class='Zchoice'>A function name<span class='mcanswer'>︎✘  </span></span>     \niii. <span class='Zchoice'>An input name<span class='mcanswer'>︎✘ A subscript (like $_0$ here) or non-numeric superscript (like $^\\star$) on what would otherwise be an input name will be instead a **constant**.</span></span>\n:::\n:::\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xxiii**  Using our notation conventions from the textbook, which one of the following kinds of things is $B ?$  \n\ni. <span class='Zchoice'>A constant<span class='mcanswer'>Right!  </span></span>     \nii. <span class='Zchoice'>A function name<span class='mcanswer'>︎✘  </span></span>     \niii. <span class='Zchoice'>An input name<span class='mcanswer'>︎✘ The letters from the start of the alphabet, a-d, or A-D will refer to a **constant**. </span></span>\n:::\n:::\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xxiv**  Using our notation conventions from the textbook, which one of the following kinds of things is $F() ?$  \n\ni. <span class='Zchoice'>A constant<span class='mcanswer'>︎✘  </span></span>     \nii. <span class='Zchoice'>A function name<span class='mcanswer'>Good. Our standard pronouns for functions are $f(), g(), h()$ and $F(), G(), H()$</span></span>     \niii. <span class='Zchoice'>An input name<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xxv**  Using our notation conventions from the textbook, which one of the following kinds of things is $u ?$  \n\ni. <span class='Zchoice'>A constant<span class='mcanswer'>︎✘  </span></span>     \nii. <span class='Zchoice'>A function name<span class='mcanswer'>︎✘  </span></span>     \niii. <span class='Zchoice'>An input name<span class='mcanswer'>Excellent! Letters from the end of the alphabet, $u, v, w, x, y, z$, generally refer to an input to a function. But, remember, something like $x_0$ will always be a constant.</span></span>\n:::\n:::\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xxvi**  Can function names be multiple letters, e.g. `g3()` or `altitude()`?  \n\ni. <span class='Zchoice'>Yes<span class='mcanswer'>Correct. And they often do. Almost all R functions have multi-letter names, like `exp()`, `sin()`, `dnorm()`, and such. When you are building a model, it's helpful to use *mnemonic* function names rather than the usual pronouns like $f(), g()$, an $h()$. We use the short pronouns throughout the book whenever we are discussing general mathematical properties rather than specific models.</span></span>     \nii. <span class='Zchoice'>No<span class='mcanswer'>︎✘  </span></span>\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xxvii**  In the book, will input names have subscripts, like $x_0$ or  $u_2 ?$  \n\ni. <span class='Zchoice'>Yes<span class='mcanswer'>︎✘  </span></span>     \nii. <span class='Zchoice'>No<span class='mcanswer'>Excellent! In the textbook, we try to reserve names like $x_0$ or $u_2$ for **constants**. But mathematics usage generally doesn't always adopt this helpful convention.</span></span>\n:::\n:::\n\n\n::: {.cell layout-align=\"center\" fig.showtext='true'}\n::: {.cell-output-display}\n**Question xxviii**  In the book, what is meant by the word \"**variable**\"?  \n\ni. <span class='Zchoice'>It's the same as input.<span class='mcanswer'>︎✘ Use **input** rather than variable! Even if you're used to calling quantities like $x$ and $y$ variables, it's a confusing practice since it can mean so many different things. In calculus, in this course, we'll try to be strict about using the words **input** and **output**</span></span>     \nii. <span class='Zchoice'>It's the same as output.<span class='mcanswer'>︎✘  </span></span>     \niii. <span class='Zchoice'>A column in a data table.<span class='mcanswer'>Right! This is the use in statistics and data science. In calculus, we'll try to avoid confusing by using **input** and **output** instead.</span></span>\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{\"knit_meta_id\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"booktabs\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"longtable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"array\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"multirow\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"wrapfig\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"float\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"colortbl\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"pdflscape\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"tabu\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"threeparttable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"threeparttablex\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"ulem\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"normalem\"]},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"makecell\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"xcolor\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]}]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}