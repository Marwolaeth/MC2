[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MOSAIC Calculus",
    "section": "",
    "text": "GIT_TRACE=1 git push\nor\ngit push --force origin main\n\n\n\nCalculus is the set of concepts and techniques that form the mathematical basis for dealing with motion, growth, decay, and oscillation. The phenomena can be as simple as a ball arcing ballistically through the air or as complex as the airflow over a wing that generates lift. Calculus is used in biology and business, chemistry, physics and engineering. It is the foundation for weather prediction and understanding climate change. It is the basis for the algorithms for heart rate and blood oxygen measurement by wristwatches. It is a key part of the language of science. The electron orbitals of chemistry, the stresses of bones and beams, and the business cycle of recession and rebound are all understood primarily through calculus.\nCalculus has been central to science from the very beginnings. It is no coincidence that the scientific method was introduced and the language of calculus was invented by the same small group of people during the historical period known as the Enlightenment. Learning calculus has always been a badge of honor and an entry ticket to professions. Millions of students’ career ambitions have been enhanced by passing a calculus course or thwarted by lack of access to one.\nIn the 1880s, a hit musical featured “the very model of a modern major general.” One of his claims for modernity: “I’m very good at integral and differential calculus.” (Watch here.)\nWhat was modern in 1880 is not modern anymore. Yet, amazingly, calculus today is every bit as central to science and technology as it ever was and is much more important to logistics, economics and myriad other fields than ever before. The reason is that science, engineering, and society have now fully adopted the computer for almost all aspects of work, study, and life. The collection and use of data is growing dramatically. Machine learning has become the way human decision makers interact with such data.\nThink about what it means to become “computerized.” To take an everyday example, consider video. Over the span of a human life, we moved from a system which involved people going to theaters to watch the shadows recorded on cellulose film to the distribution over the airwaves by low-resolution television, to the introduction of high-def broadcast video, to on demand streaming from huge libraries of movies. Just about anyone can record, edit, and distribute their own video. The range of topics (including calculus) on which you can access a video tutorial or demonstration is incredibly vast. All of this recent progress is owed to computers.\nThe “stuff” on which computers operate, transform, and transmit is always mathematical representations stored as bits. The creation of mathematical representations of objects and events in the real world is essential to every task of any sort that any computer performs. Calculus is a key component of inventing and using such representations.\nYou may be scratching your head. If calculus is so important, why is it that many of your friends who took calculus came away wondering what it is for? What’s so important about “slopes” and “areas” and how come your high-school teacher might have had trouble telling you what calculus is for?\nThe disconnect between the enthusiasm expressed in the preceding paragraphs and the lived experience of students is very real. There are two major reasons for that disconnect, both of which we tackle head-on in this book.\nFirst, teachers of mathematics have a deep respect for tradition. Such respect has its merits, but the result is that almost all calculus is taught using methods that were appropriate for the era of paper and pencil–not for the computer era. As you will see, in this book we express the concepts of calculus in a way that carries directly over to the uses of calculus on computers and in genuine work.\nSecond, the uses of calculus are enabled not by the topics of Calc I and Calc II alone, but the courses for which Calc I/II are a preliminary: linear algebra and dynamics. Only a small fraction of students who start in Calc I ever reach the parts of calculus that are the most useful. Fortunately, there is a large amount of bloat in the standard textbook topics of Calc I/II which can be removed to make room for the more important topics. We try to do that in this book.\n\n\nThe text provides two complementary ways to access computing. The most intuitive is designed purely to exercise and visualize mathematical concepts through mouse-driven, graphical apps. To illustrate, here is an app that we’ll use in Block 6. You can click on the snapshot to open the app in your browser.\n\nMore fundamentally, you will be carrying out computing by composing computer commands and text and having a computer carry out the commands. One good way to do this is in a sandbox–a kind of app which provides a safe place to enter the commands. You’ll access the sandbox in your browser (click on the image below to try it now).\n\nOnce you’ve entered the computer commands, you press the “Run” button to have the commands carried out. (You can also press CTRL+Enter on your keyboard.)\nAn important technique for teaching and learning computing is to present scaffolding for computer commands. At first, the scaffolding may be complete, correct commands that can be cut-and-pasted into a sandbox where the calculation will be carried out. Other times it will be left to the student to modify or fill in missing parts of the scaffolding. For example, when we introduce drawing graphs of functions and the choice of a domain, you might see a scaffold that has blanks to be filled in:\n\n\nslice_plot( exp(-3*t) ~ t, domain( --fill in domain-- ))\n\n\nYou can hardly be expected at this point to make sense of any part of the above command, but soon you will.\n\nAfter you get used to computing in a sandbox, you may prefer to install the R and RStudio software on your own laptop. This usually provides a faster response to you and lowers the load on the sandbox cloud servers being used by other students.\nExperienced R users may even prefer to skip the sandbox entirely and use the standard resources of RStudio to edit and evaluate their computer commands. You’d use exactly the same R commands regardless of whether you use a cloud server or your own laptop.\n\n\n\n\nLearning is facilitated by rapid, formative feedback. Many of the exercises in this book are arranged to give this.\nLINK TO AN EXERCISE HERE\n\n\n\nIt’s a good practice to practice! The Drill app provides multiple-choice questions designed to be answered at a glance or a very small amount of work on scratch paper. Once you choose a topic, the questions are presented in random order. You get immediate feedback on your answer. If your answer was wrong, the question is queued up again so that you’ll have another chance. At the point where you are answering almost all questions correctly, you’re ready to move on.\n\\(\\ \\) \n\n\n\nYou can get started with the course using just a web browser. In addition to this textbook, bookmark the SANDBOX and DRILL QUESTIONS so you can get to them easily.\nIf you find that the web sites are too slow, you can install both the sandbox and drill apps on your own computer. (You’ll need a computer running Windows or OS-X or Linux. Smartphones or tablets won’t let you do this.)\nIf you already use RStudio, you can skip to step (3). You can use the MOSAIC Calculus software directly from RStudio as an alternative to the sandbox. See step (5).\nHere are the steps. Steps (1), (2), and (3) together will take almost half an hour. Once they are completed, you will not need to do them again on that computer.\nIf you already have R and RStudio installed, skip to Step (3).\n\nInstall the R software. You can find reasonable video instructions on the Internet, for instance at YouTube\n\nR installer for Windows.\nR installer for OS-X\n\nInstall RStudio RStudio installer\n\nNot everyone has full permission to install external apps on their laptop. This is particularly true when the computer has been issued by your educational institution. If you are in this situation or, for other reasons, can’t complete steps (1) and (2) completely, seek help from a local expert. Both (1) and (2) have been installed by students on tens of millions of computers.\n\nInstall the MOSAIC Calculus packages within R. Launch the RStudio app, just as you would launch any other app.\n\nWhen the RStudio app starts, the upper left pane will be labeled “Console” and there will be a prompt: >\nCopy and paste these commands, one at a time, after the console prompt, pressing return after each command:\n\n\n\ninstall.apps(c(\"remotes\", \"distillr\"))\nremotes::install_github(\"dtkaplan/Zcalc\")\n\nThe first command will take about 15 seconds to complete and will display some messages in the Console, which you can ignore. NOTE: If you are given a message asking if you want to install in a “personal” or “private” library, say yes. But if you administer a system used by multiple people who need the software, select the option to install for all users.\nThe second command will take about 5 minutes. Hundreds of incomprehensible messages will appear in the Console, all of which you can ignore. (If you are are working from a previous installation of R, you may be asked to update existing packages. Since you can do this at any time in the future, decline the update now.\n\nOn a daily basis, whenever you need to use the MOSAIC Calculus software.\n\nOpen the RStudio App in the usual way for your operating system.\nIn the RStudio console, give these two commands after the console prompt:\n\n\n\nlibrary(Zcalc)\nSandbox()\n\nThe computing sandbox will open in a browser tab. Closing that tab will return control to the console.\nWhen you want to practice with the drill questions for this book, give the command Drill() instead of Sandbox().\nMost people find it convenient, when using the software several times a week, simply to keep the RStudio session open and similarly with the browser tab with the Sandbox.\n\nNot required. Many students are taught how to use RStudio directly. If you are in this situation, you will be able to take advantage of the many features provided by this sophisticated software. There are two things to keep in mind:\n\nAt the start of an RStudio session, give the command library(Zcalc) in the console.\nIf you are writing RMarkdown documents, then the following should make sense to you: Include library(Zcalc) in the start-up chunk so that it will run whenever you compile your document.\n\n\n\n\n\n\n\nWe’re constructing a list to some of the videos we have found that can be useful in solidifying your understanding of calculus concepts.\nSuggestion are most welcome. Email a link to dtkaplan@gmail.com\n\n\n\n\nDerivatives as measuring stretching and shrinking: 3Blue1Brown\nDerivatives of power-law functions: 3Blue1Brown\nDerivative of sinusoids: 3Blue1Brown\nDerivatives of sums, products and compositions 3Blue1Brown\n\n\n\n\n\nFlatland from Karl Sagan\nFourier and Laplace transforms intuition\n\n\n\n\n\nDynamics of exponential and limited growth. [3Blue1Brown]\nModeling epidemics with differential equations 3Blue1Brown\nForcing an oscillator Mathematics of vibration\n\n\n\n\n\nThis project was initiated by the Mathematical Sciences department at the US Air Force Academy. They recognized that a traditional calculus introduction is ill-suited to the needs of STEM in the 21st century.\nCritical support was given by the ARDI Foundation which awarded the Holland H. Coors Chair in Education Technology to one of the project members, Daniel Kaplan. This made possible a year-long residency at USAFA during which time he was able to work unhindered on this project.\nMacalester College, where Kaplan is DeWitt Wallace Professor of Mathematics, Statistics, and Computer science, was the site where the overall framework and many of the materials for a STEM-oriented calculus were developed. Particularly important in the germination were David Bressoud and Jan Serie, respectively chairs of the Macalester math and biology departments, as well as Prof. Thomas Halverson and Prof. Karen Saxe, who volunteered to team teach with Kaplan the first prototype course. Early grant support from the Howard Hughes Medical Foundation and the Keck Foundation provided the resources to carry the prototype course to a point of development where it became the entryway to calculus for Macalester students.\nProfs. Randall Pruim (Calvin University) and Nicholas Horton (Amherst College) were essential collaborators in developing software to support calculus in R. They and Kaplan formed the core team of Project MOSAIC, which was supported by the US National Science Foundation (NSF DUE-0920350).\nJoel Kilty and Alex McAllister at Centre College admired the Macalester course and devoted much work and ingenuity to write a textbook, Mathematical Modeling and Applied Calculus (Oxford Univ. Press), implementing their own version. Their textbook enabled us to reduce the use of sketchy notes in the first offering of this course at USAFA.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\nPut PDF into Tufte mode.\n\nlibrary(ggplot2)\nmtcars2 <- mtcars\nmtcars2$am <- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() + geom_smooth() +\n  theme(legend.position = 'bottom')\n\n\n\n\n\nFigure 1: MPG vs horsepower, colored by transmission.\n\n\n\n\nTheorem 1 \nThe first theorem is this.\n\nYou’ve got to have a data-latex=\"\" for the latex environment to be invoked.\n\nCalling the booboo environment from a div"
  },
  {
    "objectID": "preliminaries-part.html",
    "href": "preliminaries-part.html",
    "title": "Preliminaries",
    "section": "",
    "text": "In order to describe and use the relationships we find in the natural or designed world, we build mathematical representations of them. We call these mathematical models. On its own, the word “model” signifies a representation of something in a format serves a specific purpose. A blueprint describing the design of a building is an everyday example of a model. The blueprint represents the building but in a way that is utterly different from the building itself. Blueprints are much easier to construct or modify than buildings, they can be carried and shared easily. Two of the purposes of a blueprint is to aid in the design of buildings and to communicate that design to the people securing the necessary materials and putting them together into the building itself.\n\n\nModels provide the link between the real world and the abstractions of mathematics.\nAtmospheric scientists build models of climate whose purpose is to explore scenarios for the future emission of greenhouse gasses. The model serves as a stand-in for the Earth, enabling predictions in a few hours of decades of future change in the climate. This is essential for the development of policies to stabilize the climate.\nDesigning a building or modeling the climate requires expertise and skill in a number of areas. Nonetheless, constructing a model is relatively easy compared to the alternative. Models make it relatively easy to extract the information that’s needed for the purpose at hand. For instance, a blueprint gives a comprehensive overview of a building in a way that’s hard to duplicate just by walking around an actual building.\n\n\nA concise definition of a “model” is a representation for a purpose. Determining the purpose for your model is a crucial first step in building a useful mathematical representation. Useful models of the same real-world setting can be very different, depending on the purpose. For instance, one routine use for a model is to make a prediction. But other models are intended for exploring the connections among the components of the system being modeled.\nModels are easy to manipulate compared to reality, easy to implement (think “draw a blueprint” versus “construct a building”), and easy to extract information from. We can build multiple models and compare and contrast them to gain insight to the real-world situation behind the models.\nA mathematical model is a model made out of mathematical and computational stuff. Example: a bank’s account books are a model made mostly out of numbers. But in technical areas—science and engineering are obvious examples, but there are many other fields, too—numbers don’t get you very far. By learning calculus, you gain access to important mathematical and computational concepts and tools for building models and extracting information from them.\nA major use for mathematics is building models constructed out of mathematical concepts and objects. The chapters in this Preliminaries section of this book introduce some of the fundamental mathematical entities that are are the heart of modeling."
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html",
    "href": "Preliminaries/01-modeling-change.html",
    "title": "1  Quantity, function, space",
    "section": "",
    "text": "This book presents calculus in terms of three concepts central to the study of change: quantities, functions, and spaces. Those words have everyday meanings which are, happily, close to the specific mathematical concepts that we will be using over and over again. Close … but not identical. So, pay careful attention to the brief descriptions that follow."
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html#quantity-vs-number",
    "href": "Preliminaries/01-modeling-change.html#quantity-vs-number",
    "title": "1  Quantity, function, space",
    "section": "1.1 Quantity vs number",
    "text": "1.1 Quantity vs number\nSection 1.2\nA mathematical quantity is an amount. How we measure amounts depends on the kind of stuff we are measuring. The real-world stuff might be mass or time or length. It equally well can be velocity or volume or momentum or corn yield per acre. We live in a world of such stuff, some of which is tangible (e.g., corn, mass, force) and some of which is harder to get your hands on and your minds around (acceleration, crop yield, fuel economy). An important use of calculus is helping us conceptualize the abstract kinds of stuff as mathematical compositions of simpler stuff. For example, crop yield incorporates mass with length and time. Later, you’ll see us using the more scientific-sounding term dimension instead of “stuff.”\n\n\nChapter 4 is entirely dedicated to the topic of dimensions. This is a preview.\nMost people are inclined to think “quantity” is the same as “number”; they conflate the two. This is understandable but misguided. By itself a number is meaningless. What meaning does the number 5 have without more context? Quantity, on the other hand, combines a number with the appropriate context to describe some amount of stuff.\nThe first thing you need to know about any quantity is the kind of stuff it describes. A “mile” is a kind of stuff: length. A meter is the same kind of stuff: length. A liter is a different kind of stuff: volume. A gallon and an acre-foot are the same kind of stuff: volume. But an inch (length) is not the same kind of stuff as an hour (time).\n“Stuff,” as we mean it here, is what we measure. As you know, we measure with units. Which units are appropriate depends on the kind of stuff. Meters, miles, microns are all appropriate units of length, even though the actual lengths of these units differ markedly. (A mile is roughly 1.6 million millimeters.)\nOnly after you know the units does the number have meaning as a quantity: a number is only part of specifying a quantity.\n\n\nExample: You can’t add feet and acres. They describe different kinds of things: length versus area. Yet you can multiply feet and acres. The unit “acre-foot” is widely used in water resource management.\nHere’s the salient difference between number and quantity when it comes to calculus: All sorts of arithmetic and other mathematical operations can be performed to combine numbers: addition, multiplication, square roots, etc. When performing mathematics on quantities, only multiplication and division are universally allowed. For addition and subtraction, square roots, and such, the operation makes sense only if the dimensions are suitable.\nThe mathematics of units and dimension are to the technical world what common sense is in our everyday world. For instance (and this may not make sense at this point), if people tell me they are taking the square root of 10 liters, I know immediately that either they are just mistaken or that they haven’t told me essential elements of the situation. It’s just as if someone said, “I swam across the tennis court.” You know that person either used the wrong verb—walk or run would work—or that it wasn’t a tennis court, or that something important was unstated, perhaps, “During the flood, I swam across the tennis court.”"
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html#sec-functions",
    "href": "Preliminaries/01-modeling-change.html#sec-functions",
    "title": "1  Quantity, function, space",
    "section": "1.2 Functions",
    "text": "1.2 Functions\nFunctions, in their mathematical and computing sense, are central to calculus. The introduction to the Preliminaries Block starts, “Calculus is about change, and change is about relationships.” The idea of a mathematical function gives a definite perspective on this. The relationship represented by a function is between the function’s input and the function’s output. The input might be day-of-year[^“Day-of-year” is a quantity with units “days.” It starts at 0 on midnight of New Year’s Eve and ends at 365 at the end of day on Dec. 31.], and the output cumulative rainfall up to that day. Every day it rains, the cumulative rainfall increases.\n\n\nOther examples of relationships:\n\nthe input is the altitude on your hike up Pikes Peak and the output the air temperature. Typically, as you gain altitude the temperature goes down.\nthe input is the number of hours after noon, the output the brightness of sunlight. As the sun goes down, the light grows dimmer, but only to a point.\n\n\nPay careful attention to our use of “input” and “output.” We avoid using the word “variable” because it is too vague a term. (For instance, it doesn’t distinguish between what goes in and what comes out of a function.) There are two contexts in which we will use “variable,” neither of which has to do with inputs to functions. In talking about data, we will use “variable” in the statistical sense, meaning “a type of quantity” like height or pH. And in the final part of the text, involving system whose configuration changes in time, we’ll use “variable” in the sense of “a quantity that varies over time.” Try to put the word “variable” out of mind for the present, until we get to discussing the nature of data.\n\nA function is a mathematical concept for taking one or more inputs and returning an output. In calculus, we’ll deal mainly with functions that take one or more quantities as inputs and return another quantity as output. But sometimes we’ll work with functions that take functions as input and return a quantity as output. And there will even be functions that take a function as an input and return a function as output.\n\n\nLater in this Preliminaries Block, we’ll introduce the “pattern-book functions.” These always take a pure number as input and return a pure number as output. In the Modeling Block, we’ll turn to functions that take quantities—which generally have units—as input and return another quantity as output. The output quantity also generally has units.\nIn a definition like \\(f(x) \\equiv \\sqrt{\\strut x}\\), think of \\(x\\) as the name of an input. So far as the definition is concerned, \\(x\\) is just a name. We could have used any other name; it’s only convention that leads us to choose \\(x\\). The definition could equally well have been \\(f(y) \\equiv \\sqrt{y}\\) or \\(f(\\text{zebra}) \\equiv \\sqrt{\\strut\\text{zebra}}\\).\nNotation like \\(f(x)\\) is also used for something completely different from a definition. In particular, \\(f(x)\\) can mean apply the function \\(f()\\) to a quantity named \\(x\\). You can always tell which is intended—function definition or applying a function—by whether the \\(\\equiv\\) sign is involved in the expression.\nOne familiar sign of applying a function is when the contents of the parentheses are not a symbolic name but a numeral. For example, when we write \\(\\sin(7.3)\\) we give the numerical value \\(7.3\\) to the sine function. The sine function then does its calculation and returns the value 0.8504366. In other words, \\(\\sin(7.3)\\) is utterly equivalent to 0.8504366.\nIn contrast, using a name on it’s own inside the parentheses indicates that the specific value for the input is being determined elsewhere. For example, when defining a function we often will be combining two or more functions, like this: \\[g(x) \\equiv \\exp(x) \\sin(x)\\] or \\[h(y,z) \\equiv \\ln(z) \\left(\\strut\\sin(z) - \\cos(y)\\right)\\ .\\] The \\(y\\) and \\(z\\) on the left side of the definition are the names of the inputs to \\(h()\\).1 The right side describes how to construct the output, which is being done by applying \\(\\ln()\\), \\(\\sin()\\) and \\(\\cos()\\) to the inputs. Using the names on the right side tells us which function is being applied to which input. We won’t know what the specific values those inputs will have until the function \\(h()\\) is being applied to inputs, as with \\[h(y=1.7, z=3.2)\\ .\\]\nOnce we have specific inputs, we (or the computer) can plug them into the right side of the definitionto determine the function output: \\[\\ln(3.2)\\left(\\sin(3.2) - \\strut \\cos(1.7)\\right) = 1.163(-0.0584 + 0.1288) =-0.2178\\ .\\]\nSay that a function is a mapping between one space AND ANOTHER.\n\nThe various mathematical functions that we will be studying in this book are in the service of practical problems. But there are so many such problems, often involving specialized knowledge of a domain or science, engineering, economics, and so on, that a abstract mathematical presentation can seem detached from reality.\nThe video linked here, How to shoot, breaks down a simple-sounding situation into its component parts. The function itself is literally a black box. The inputs are provided by a human gunner training a telescope on a target and setting control dials. The ultimate output is the deflection of the guns in a remote turret. The main function is composed of several others, such as a function that outputs target range given the target size based on knowledge of the size of the target and how large it appears in the telescopic sight.\n\n\nDividing the gunnery task into a set of inputs and a computed output allows for a division of labor. The gunner can provide the skills properly trained humans are good at, such as tracking a target visually. The computer provides the capabilities—mathematical calculation—to which electronics are well suited. Combining the inputs with the calculation provides an effective solution to a practical problem."
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html#spaces",
    "href": "Preliminaries/01-modeling-change.html#spaces",
    "title": "1  Quantity, function, space",
    "section": "1.3 Spaces",
    "text": "1.3 Spaces\nWe said earlier that the functions used in calculus take quantities as input and produce a quantity as output. We’ve also said that a quantity is something like 2 light-years or 150 watts. Now we want to connect a new concept to input and output: the concept of spaces.\nA space2 is a collection of continuous possibilities. A child learning about numbers starts with the “counting numbers”: \\(1, 2, 3, \\ldots\\). In primary school, the set of numbers is extended to include zero and the negative numbers: \\(-1,-2,-3, \\ldots\\), giving a set called the “integers.” Counting numbers and integers are discrete sets. Between two consecutive members of the counting numbers or the integers, there is not another number of the set.\nThe next step in a child’s mathematical education is the “rational numbers,” that is, numbers that are written as a ratio: \\(\\frac{1}{2}, \\frac{1}{3}, \\frac{2}{3}, \\ldots, \\frac{22}{7}\\), and so on. Rational numbers fit in the spaces between the integers. That is, between any two integers, even consecutive ones, there is a rational number. For instance, the rational number \\(\\frac{1}{2}\\) falls between 0 and 1.\nBetween any two rational numbers, there is another rational number, indeed an infinite number of rational numbers. For instance, between \\(\\frac{1}{2}\\) and \\(\\frac{2}{3}\\) is \\(\\frac{6}{11}\\) (and many others, such as \\(\\frac{7}{11}\\) or \\(\\frac{13}{21}\\)). It’s useful to think of rational numbers as fitting in the spaces between integers.\nIf you didn’t stumble on the word “spaces” in the previous sentence, you are well on your way to understanding what is meant by “continuous.” For instance, between any two rational numbers there is another rational number. Think of the rational numbers as stepping stones that provide a path from any number to any other number.\n\n\n\n\n\n\n\n(a) Discrete\n\n\n\n\n\n\n\n(b) Continuous\n\n\n\n\nFigure 1.1: Discrete and continuous paths\n\n\nIt’s a deep question whether the rational numbers are a walkway instead of isolated stepping stones? A walkway is a structure on which you can move any amount, no matter how small, without risk of going off the structure. In contrast, a too-small move along a path of stepping stones will put you in the water.\nA continuous set is like a walkway; however little you move from an element of the set you will still be on the set. The continuous set of numbers is often called the number line, although a more formal name is the real numbers. (“Real” is a somewhat unfortunate choice of words, but we’re stuck with it.)\nThe underlying metaphor here is space. Between any two points in space there is another point in space. We will have occasion to work with several different spaces, for instance:\n\nthe number line: all the real numbers\nthe positive numbers: the real numbers greater than zero\nthe non-negative numbers: this is the tiniest little extension of the positive numbers adding zero to the set.\na closed interval, such as the numbers between 5 and 10, which we will write like this: \\(5 \\leq x \\leq 10\\), where \\(x\\) is a name we’re giving to the set.\nthe Cartesian plane: all pairs of real numbers such as \\((5.62, -0.13)\\). Other metaphors for this: the points on a piece of paper or a computer screen.\nthree-dimensional coordinate spaces, generally written as a set of three real numbers such as \\((-2.14, 6.87, 4.03)\\) but really just the everyday three-dimension world that we live in.\nhigher-dimensional spaces, but we won’t go there until the last parts of the book.\n\n::: {.column-margin} Your spatial intuition of lines, planes, etc. will suffice for our needs. Mathematicians as a class value precise definitions; we won’t need those. Widely accepted mathematical definitions of continuous sets date from the 1800s, 150 years after calculus was introduced. For instance, it’s been known for more than 2000 years that there are numbers—the irrational numbers—that cannot be exactly expressed as a ratio of integers. We know now that there is an irrational number between any two rational numbers; the rational numbers are indeed analogous to stepping stones. But the distinction between rational and irrational numbers will not be one we need in this book. Instead, we need merely the notion of continuous space.\nThe specialty of calculus is describing relationships between continuous sets. Functions such as \\(\\sin()\\) or \\(\\text{line}()\\), which are typical of the functions we study in calculus, take numbers as input.\nEvery function has a set of legitimate inputs. For the functions studied in calculus, this set is continuous: a space. The name given to a function’s space of legitimate inputs is the function domain. Functions such as \\(\\sin()\\) and many others have the real numbers as the function domain. The square-root function has the non-negative numbers for its domain. The logarithmic function, \\(\\ln()\\), has a domain of the positive numbers.\nJust as a “domain” is the set of legitimate inputs to a function, the function’s range is the set of values that the function can produce as output. For instance, the range of \\(\\sin()\\) is the numbers between \\(-1\\) and \\(1\\) which we’ll usually write in this format: \\(-1 \\leq x \\leq 1\\). Another example: the range of \\(\\ln()\\) is the entire space of real numbers."
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html#all-together-now",
    "href": "Preliminaries/01-modeling-change.html#all-together-now",
    "title": "1  Quantity, function, space",
    "section": "1.4 All together now",
    "text": "1.4 All together now\nThe three mathematical concepts we’ve been discussing—quantity, function, space—are used together.\nA quantity can be a specific value, like 42.681\\(^\\circ\\)F. But you can also think of a quantity more broadly, for instance, “temperature.” Naturally, there are many possible values for temperature. The set of all possible values is a space. And, using the metaphor of space, the specific value 42.681\\(^\\circ\\)F is a single point in that space.\nFunctions relate input quantities to a corresponding output quantity. A way to think of this—which will be important in chap-graphs-and-graphics—is that a function is a correspondence between each point in the input space (domain) and a corresponding point in the output space (range)."
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html#exercises",
    "href": "Preliminaries/01-modeling-change.html#exercises",
    "title": "1  Quantity, function, space",
    "section": "1.5 Exercises",
    "text": "1.5 Exercises\n\n\n\nExercise XX.XX: YU5NCD unassigned\n\nFor each of the following, say whether the quantity is a pure number or has units. If it has units, say what kind of physical quantity is being represented.\n\n17.3\n\\(\\pi\\)\n9 feet\n8 \\(\\mu\\)m\n12.2 gm\n37\\(^\\circ\\) C\n43 sec\n\n\n\n\n\nExercise XX.XX: zbkNpV unassigned\n\nHere are some function definitions in the format we will use in this book. For each, say what is the name of the function being defined, what are the names of the inputs to the function, and what are the names, if any, of the parameters used in the definition.\n\n\\(h(x) \\equiv 3 x + 2\\)\n\\(\\text{line}(x) \\equiv m x + b\\)\n\\(\\text{wave}(t) \\equiv A \\sin(2 \\pi t/ P)\\)\n\\(\\text{plane}(x, y) \\equiv a + bx + cy\\)\n\\(f_1(z) = z^n\\)\n\n\n\n\nExercise 1.1: VDKUI unassigned\n\nFor each of the following function definitions, what is the input name?\n\n\nQuestion A Input name in \\(g(t) \\equiv 2 t^2 + 8\\)?\n    t\\(\\heartsuit\\ \\)       u︎✘        v︎✘        w︎✘        x︎✘        y︎✘        z︎✘ \n\n\n\n\nQuestion B Input name in \\(\\line(z) \\equiv a z + b\\)?\n    t︎✘        u︎✘        v︎✘        w︎✘        x︎✘        y︎✘        z\\(\\heartsuit\\ \\)\n\n\n\n\nQuestion C Input name in \\(h(t) \\equiv 2 t^2 + 8 w\\)?\n    t\\(\\heartsuit\\ \\)       u︎✘        v︎✘        w︎✘        x︎✘        y︎✘        z︎✘ \n\n\n\n\nQuestion D Input name in \\(f(u) \\equiv a u + b + u^2\\)?\n    t︎✘        u\\(\\heartsuit\\ \\)       v︎✘        w︎✘        x︎✘        y︎✘        z︎✘ \n\n\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question E Input name in \\(g(w) \\equiv x + 4\\)?\n\nt︎✘ \n\nu︎✘ \n\nv︎✘ \n\nwNice! \n\nx︎✘ Tricked you! It’s the name in the parentheses on the left side of \\(\\equiv\\) that matters. Evidently, the output of \\(g(w)\\) doesn’t depend on \\(w\\). That’s not much of a relationship, but it is a common one.\n\ny︎✘ \n\nz︎✘  ::: :::\n\n\n\n\n\nExercise XX.XX: 37DC14 unassigned\n\n\nDemonstrate that between any two integers \\(a\\) and \\(b\\) there is a rational number. (Hint: Do some arithmetic with \\(a\\) and \\(b\\) to construct such a rational number.)\nDemonstrate that between any two rational numbers \\(a/b\\) and \\(c/d\\) there is another rational number. (Hint: Construct such a rational number by arithmetic.)"
  },
  {
    "objectID": "Preliminaries/02-notation.html",
    "href": "Preliminaries/02-notation.html",
    "title": "2  Notation & computing",
    "section": "",
    "text": "The ideas which are here expressed so laboriously are extremely simple …. The difficulty lies, not in the new ideas, but in escaping from the old ones, which [branch]1, for those brought up as most of us have been, into every corner of our minds. — J. M Keynes, 1936, The General Theory of Employment, Interest, and Money, 1936\nIn addition to the specialized words we will use to express concepts and uses of calculus, we will also make extensive use of mathematical and computer-language notation. This chapter introduces you to the notation we’ll be using.\nOne goal of good notation is to make clear which of these object types it is referring to. Another goal is to build on what you already know about how mathematics is written. For historical reasons these two goals are sometimes in conflict.\nYet another goal for notation has to with the central role of computing in the contemporary technical environment. Ideally, the mathematical notation we use should extend directly to computer-language notation. But in practice there is an incompatibility stemming from two sources:\nWe’ll attempt to use mathematical notation in a way that limits the conflict between tradition and computer notation. This conflict is particularly acute when it comes to the idea of an “equation,” so widely used in high-school mathematics but not a component of mainstream computer languages."
  },
  {
    "objectID": "Preliminaries/02-notation.html#functions-inputs-and-quantities",
    "href": "Preliminaries/02-notation.html#functions-inputs-and-quantities",
    "title": "2  Notation & computing",
    "section": "2.1 Functions, inputs, and quantities",
    "text": "2.1 Functions, inputs, and quantities\nOur style of notation will be to give functions and their inputs explicit names. The basic principle is that a function name is a sequence of letters followed by an empty pair of parentheses, for instance \\(\\sin()\\) an \\(\\ln()\\).\nTraditional mathematical notation writes many functions both without a name and without the parentheses. Examples that you have likely seen are \\(x^2\\), \\(\\sqrt{\\strut x}\\), and \\(e^x\\). If we were to absolutely impose the name/parentheses principle we would refer to these functions as, say, square() and sqrt() and exp(). Notice that the \\(x\\) is not part of the name.\nSometimes will will use names like square() just to emphasize the point that we are talking about a function. But for the most part we will stick to the traditional form because it is ubiquitous and recognizable by most readers.\nThe name/parentheses notation, like exp() or sin() allows us to avoid having to write \\(x\\) as the indicator of where the input to the function goes. That’s helpful because, after all, the actual input might be something completely different from \\(x\\).\nStill, there are times in which we do need to state the name of the input to functions. One of these is when defining a function. To define a function, we will use an expression like \\[g(y) \\equiv y \\cos(y)\\ .\\] On the left of the \\(\\equiv\\) goes the name of the function, with the name of the input(s) in parentheses. On the right of \\(\\equiv\\) goes a formula for computing the output from the input. This formula is written in terms of the input name given on the left side of the definition.\nIn situations where there is just one input to a function, as in \\(g()\\) above, we could use any name for the input. For instance, all of these are exactly equivalent to the definition for \\(g()\\) given above:\n\\[g(x) \\equiv x \\cos(x)\\\\\ng(z) \\equiv z \\cos(z))\\\\\ng(zebra) \\equiv zebra\\ \\cos(zebra)\\]\nWe’ll tend to avoid hard-to-read input names like \\(zebra\\). Instead, we’ll mostly use :\n\n\\(\\large x\\) or \\(\\large y\\) or \\(\\large z\\).\n\\(\\large t\\). This name is typically used when the input is meant to be time. So if we were creating a function to represent the relationship between time (of day) and outdoor brightness, we might use this notation: \\(\\text{brightness}(t)\\)\n\nOther input names we will use often in this book include \\(u\\), \\(v\\), \\(w\\), following the 17th-century convention introduced by Newton that input names come from the end of the alphabet. But we won’t shy away from more descriptive names, like \\(T\\) for “temperature” or \\(V\\) for volume, or even \\(\\text{altitude}\\) (which describes itself).\nWhen a function has more than one input, the input names serve to indicate where each input goes in the formula defining the calculation. For instance: \\[h(x, y) \\equiv x^2 e^y\\ .\\] \\(h()\\) is a completely different function than, say, \\(f(x, y) \\equiv y^2 e^x\\).\nYou may have noticed that we’ve used the names \\(f()\\), \\(g()\\), and \\(h()\\) a lot. Consider these names to be the equivalent of pronouns in English like “this”, “that”, “it”, and so on. Function names like \\(f()\\) or \\(F()\\) will be used when we need to refer to a function for a moment: a sentence, a paragraph, a section.\nWe will also have many occasions where we need to give a name to a quantity. Of course, a quantity is different from a function; functions are relationships between quantities.\nFor example, we will use names for quantities that are parameters in a function, like: \\[g(x) \\equiv a x^2 + b x + c\\ .\\] Here, \\(x\\) is the name given to the input to \\(g()\\), while \\(a\\), \\(b\\), and \\(c\\) are names for other quantities involved in the formula.\nAgain following Newton’s convention, names for quantities will come from the beginning of the alphabet. For instance, here is a definition of a function called a “cubic polynomial”: \\[h(x)\\equiv a + b x + c x^2 + d x^3\\ .\\] But there will be occasions where we need to compare two or more functions and run out of appropriate names from the start of the alphabet. A way to keep things organized is to use subscripts on the letters, for instancecomparing \\[g(x) \\equiv a_0 + a_1 x^2 + a_2 x^2 + a_3 x^3 + a_4 x^4\\] to \\[f(x) \\equiv b_0 + b_1 x^2 + b_2 x^2\\ .\\]\nOther ways professionals expand the set of letters from the start of the alphabet:\n\nUse capital letters: \\(A\\), \\(B\\), \\(C\\), and so on\nUse Greek letters: \\(\\alpha\\), \\(\\beta\\), \\(\\gamma\\), \\(\\delta\\), …"
  },
  {
    "objectID": "Preliminaries/02-notation.html#function-output",
    "href": "Preliminaries/02-notation.html#function-output",
    "title": "2  Notation & computing",
    "section": "2.2 Function output",
    "text": "2.2 Function output\nWe will often apply a function to  specific input quantities in order to produce an output from the function. An equivalent phrase is evaluate a function on an input. For instance, to apply the function \\(g()\\) to the input quantity 3, any of the following mathematical expressions might be used: \\[g(3)\\ \\ \\ \\text{or}\\ \\ \\ \\ g(x=3) \\ \\ \\ \\text{or}\\ \\ \\ \\ g(x)\\left.\\Large\\strut\\right|_{x=3}\\ .\\] Remember that \\(g(3)\\) or its equivalents are not themselves functions. They are the quantity that results from applying a the function to an input quantity."
  },
  {
    "objectID": "Preliminaries/02-notation.html#inputs-arguments-and-variables",
    "href": "Preliminaries/02-notation.html#inputs-arguments-and-variables",
    "title": "2  Notation & computing",
    "section": "2.3 Inputs, arguments, and variables",
    "text": "2.3 Inputs, arguments, and variables\nIn everyday speech, an “argument” is a discussion between people with differing views. But in mathematics and computing, argument means something else entirely: it is a synonym for “input to a function.”\nIn this text, we’ll mostly use “input” to refer to what goes into a mathematical function, although using “argument” would be fine. As regards computer functions … In Section @ref(makefun) you’ll see how to instruct the computer to create a mathematical function like \\(g()\\) or \\(f()\\) from the previous section. The names and format of such instructions—e.g. make a mathematical function from a formula, draw a graph of a function, plot data—are given in the same function notation we use in math. For example, makeFun() constructs a function from a formula, slice_plot() graphs a function, gf_point() makes one style of data graphic. These R entities saying “do this” are also called “functions.”\nWhen referring to such R “do this” functions, we’ll refer to the stuff that goes in between the parentheses as “arguments.” The word “input” would also be fine. The point of using “input” for math functions and “argument” for R “do this” functions is merely to help you identify when we are talking about mathematics and when we are talking about computing.\nA word we will not make much use of is “variable.” You are probably used to statements like, “\\(x\\) and \\(y\\) are the variables,” and it will take you a while to stop using them reflexively. The reason we will use “input” or “argument” instead of “variable” is that variable means too many different things in different contexts. For instance, in the algebra-course instruction, “Solve \\(3x - 2 = x^2\\),” the \\(x\\) is really a quantity, unknown at first but soon to be resolved by your algebraic skills. The \\(x\\) in the solving problem would often be called a “variable,” but it’s not at all an “input” or an “argument.”"
  },
  {
    "objectID": "Preliminaries/02-notation.html#computing-commands-and-evaluation",
    "href": "Preliminaries/02-notation.html#computing-commands-and-evaluation",
    "title": "2  Notation & computing",
    "section": "2.4 Computing: commands and evaluation",
    "text": "2.4 Computing: commands and evaluation\nMathematical notation is effective for describing functions and operations, but computing notation provides a way to go beyond the description to actually carry out the operations. Computer notation will be an equal partner to mathematical notation in MOSAIC Calculus.\nBROUGHT IN FROM PREVIOUS CHAPTER: ::: {.takenote data-latex=““} In high-school, you may have seen an expression like \\(m x + b\\). If so, you learned to call it”a line” or perhaps even “a function.” The proper term for it is a formula. Formulas are one way of describing how to do a calculation.\nYou may also have seen an expression like \\(y = m x + b\\). This is, of course, an equation, but equations are massively overused in mathematics education. An equation like this is typically used to signify that “\\(y\\) is a function of \\(x\\),” but we are going to be diligent in making explicit when we are defining a function. We will write \\[f(x) \\equiv m x + b\\] to mean “we define a function named \\(f()\\) that takes an input named \\(x\\).” The formula on the right side of \\(\\equiv\\) tells how \\(f()\\) calculates the value of the output for any given input.\nWhat’s wrong with writing an equation like \\(y = m x + b\\) to define a function? The nature of equations is that they can be re-arranged. For example \\[y = m x + b \\ \\ \\text{might be re-arranged as}\\ \\ \\ m = \\frac{y-b}{x}\\ .\\] Two different equations expressing the same relationship. But as definitions of functions the two equivalent equations mean might mean two different things: \\(y()\\) takes \\(x\\) as an input or, quite differently, \\(m()\\) takes both \\(x\\) and \\(y\\) as inputs. Much better, for all concerned, to define a function \\[\\line(x) = m x + b\\] which has a name (\\(\\text{line}()\\)) for the function and a name \\(x\\) for the input. It also suggests that \\(m\\) and \\(b\\) are not inputs. You may already know that quantities like \\(m\\) and \\(b\\), if not explicitly given as inputs, are called parameters.\nAnother problem with \\(y = mx + b\\) is that in almost all computer languages it means something completely different than than the definition of a function. Since you will be working with computers extensively in your career, we want to have a mathematical notation that is compatible with computer notation.\nYou will need to get used to this idea of defining a function and naming the inputs explicitly, but it will make your study of calculus much more useful. :::\nThe engineers and mathematicians who invented computer languages realized that they had to be explicit in identifying the input, the output, and the function itself; computers demand unambiguous instructions.2 Sorting this out was a difficult process even for those mathematically talented and skilled pioneers of notation. So, you can be forgiven for the occasional confusion you have when dealing with notation that pre-dates computing.\nIn this book we’ll be explicit and consistent in the ways we denote functions so that you can always figure out what are the inputs and how they are being translated into the output. A good start in learning to read the function notation is to see the equivalent of \\(y=m x + b\\) in that notation: \\[g(x) \\equiv m x + b\\] END OF STUFF BROUGHT IN.\nWith computers, writing an expression in computer notation goes hand-in-hand with evaluating the notation. We’ll start with the simplest mode of evaluation, where you are writing the expression in the console for the language. Figure @ref(fig:R-console) shows and example the console tab provided by the RStudio application.\n\n\n\n\n\nFigure 2.1: An RStudio console tab for writing expressions and evaluating them. The > is the prompt after which you write your expression, here shown in \\(\\color{blue}{\\text{blue}}\\). Pressing the “return” key causes the language interpreter to evaluate the command.\n\n\n\n\nIn Figure 2.1 we have come in to the story in the middle of the action. To start, there was just a prompt character.\n\\(\\color{blue}{\\mathtt >}\\)\nThe person at the keyboard then typed a simple expression: 2 + 3\n\\(\\color{blue}{\\mathtt >\\  2 + 3}\\)\nHaving completed the expression, the keyboarder presses “return.” The RStudio application sends the expression to the software that “interprets” it according to the rules of the R language. Since 2 + 3 is a complete, valid R expression, the R-language software carries out the action specified—adding 2 and 3—and returns the result to RStudio, which displays it just below the expression itself.\n\\(\\color{blue}{\\mathtt >\\  2 + 3}\\\\\\mathtt{[1]\\ 5}\\)\nNote that the value of the expression is simply the number 5. The R language is set up to format numbers with an index, which is helpful when the value of the expressions is a large set of numbers. In the case here, with just a single number in the result of evaluating the expression, the index is simply stating the obvious.\nHaving printed the result of evaluating the 2 + 3 expression, RStudio shows another prompt, signally that it’s ready for you to enter your next expression. In Figure 2.1) we’re seeing the console after the person at the keyboard has responded to the prompt by writing another expression, pressed return, had RStudio print the value of that expression, and displayed a new prompt.\nThe two expressions shown in the console in Figure 2.1 both evaluate to single numbers. We say, “the command returns a value.” The command is a valid R expression followed by the instruction (“Return”) to evaluate the command. The value of the expression is the result of evaluating the command.\nAnother common form of R expression is called assignment. An assignment means “giving a name to a value.” It’s done with a more complicated expression, like this:\n\nb <- 22/7\n\nThe result of evaluating this command is to store in the computer memory, under the name b, the value of 22/7. Because the value is being stored, R is designed not to display the value as happened with the first two commands in the console. If you want to see the value printed out, give the name as a command:\n\nb\n## [1] 3.142857\n\n\nThis book displays the command being evaluated in a gray box, without a prompt. The value returned by the command is displayed underneath the command, prefaced by \\(\\color{red}{\\mathtt{\\#\\#}}\\). In the book formatting, the four commands we have just described would be displayed in this way:\n\n2 + 3\n## [1] 5\nsqrt(16)\n## [1] 4\nb <- 22/7\nb\n## [1] 3.142857\n\n\n\n\nWhen reading this book, take care to distinguish between the display of a command and the display of the value returned by that command. The first is something you type, the second is printed by the computer."
  },
  {
    "objectID": "Preliminaries/02-notation.html#makefun",
    "href": "Preliminaries/02-notation.html#makefun",
    "title": "2  Notation & computing",
    "section": "2.5 Functions in R/mosaic",
    "text": "2.5 Functions in R/mosaic\nOne of the fundamental mathematical operations in this book is defining functions. You’ve already seen the way we use mathematical notation to define a function, for instance, \\[h(t) \\equiv 1.5\\, t^2 - 2\\ .\\] The R/mosaic equivalent to the definition of \\(h()\\) is:\n\nh <- makeFun(1.5*t^2 - 2 ~ t)\n\nOnce you have defined a function, you can evaluate it on an input. The R notation for evaluating functions is exactly the same as with mathematical notation, for instance,\n\nh(4)\n## [1] 22\n\nor\n\nh(t=4)\n## [1] 22\n\nThere are obvious differences, however, between the mathematical and computing notation used to define a function. All the same information is being provided, but the format is different. That information is:\n\nthe name of the function: \\(h()\\) or h. When writing the name of a computer-defined function, we’ll put the reminder parentheses after the name, as in h().\nthe name of the input to the function: \\(x\\) or x\nthe calculation that the function performs, written in terms of the input name. \\(1.5 t^2 -2\\) or 1.5 * t^2 - 2.\n\nLaying out the two notation forms side by side let’s us label the elements they share:\n\n\n\n\n\n\n\n\n\nFor the human reading the mathematical notation, you know that the statement defines a function because you have been told so. Likewise, the computer needs to be told what to do with the provided information. That’s the point of makeFun(). There are other R/mosaic commands that could take the same information and do something else with it, for example create a graph of the function or (for those who have had some calculus) create the derivative or the anti-derivative of the function.\n\nIn R, things like makeFun() are called “functions” because, like mathematical functions, they turn inputs into outputs. In the case of makeFun(), the input is a form called a tilde expression, owing to the character tilde (~) in the middle. On the right-hand side of the tilde goes the name of the input. On the left-hand side is the R expression for the formula to be used, written as always in terms of the input name. The whole tilde expression is taken as the one argument to makeFun(). Although it may seem odd to have punctuation in the middle of an argument, remember that something similar happens when we write \\(h(t=3)\\)."
  },
  {
    "objectID": "Preliminaries/02-notation.html#names-and-assignment",
    "href": "Preliminaries/02-notation.html#names-and-assignment",
    "title": "2  Notation & computing",
    "section": "2.6 Names and assignment",
    "text": "2.6 Names and assignment\nThe command\n\nh <- makeFun(1.5*t^2 - 2 ~ t)\n\ngives the name h to the function created by makeFun(). Good choice of names makes your commands much easier for the human reader.\nThe R language puts some restrictions on the names that are allowed. Keep these in mind as you create R names in your future work:\n\nA name is the only3 thing allowed on the left side of the assignment symbol <-.\nA name must begin with a letter of the alphabet, e.g. able, Baker, and so on.\nNumerals can be used after the initial letter, as in final4 or g20. You can also use the period . and underscore _ as in third_place. No other characters can be used in names: no minus sign, no @ sign, no / or +, no quotation marks, and so on.\n\nFor instance, while third_place is a perfectly legitimate name in R, the following are not: 3rd_place, third-place. But it’s OK to have names like place_3rd or place3, etc., which start with a letter.\nR also distinguishes between letter case. For example, Henry is a different name than henry, even though they look the same to a human reader."
  },
  {
    "objectID": "Preliminaries/02-notation.html#formulas-in-r",
    "href": "Preliminaries/02-notation.html#formulas-in-r",
    "title": "2  Notation & computing",
    "section": "2.7 Formulas in R",
    "text": "2.7 Formulas in R\nThe constraint of the keyboard means that computer formulas are written in a slightly different way than the traditional mathematical notation. This is most evident when writing multiplication and exponentiation. Multiplication must always be indicated with the * symbol, for instance \\(3 \\pi\\) is written 3*pi. For exponentiation, instead of using superscripts like \\(2^3\\) you use the “caret” character, as in 2^3. The best way to learn to implement mathematical formulas in a computer language is to read examples and practice writing them.\nHere are some examples:\n\n\n\nTraditional notation\nR notation\n\n\n\n\n\\(3 + 2\\)\n3 + 2\n\n\n\\(3 \\div 2\\)\n3 / 2\n\n\n\\(6 \\times 4\\)\n6 * 4\n\n\n\\(\\sqrt{\\strut4}\\)\nsqrt(4)\n\n\n\\(\\ln 5\\)\nlog(5)\n\n\n\\(2 \\pi\\)\n2 * pi\n\n\n\\(\\frac{1}{2} 17\\)\n(1 / 2) * 17\n\n\n\\(17 - 5 \\div 2\\)\n17 - 5 / 2\n\n\n\\(\\frac{17 - 5}{\\strut 2}\\)\n(17 - 5) / 2\n\n\n\\(3^2\\)\n3^2\n\n\n\\(e^{-2}\\)\nexp(-2)\n\n\n\nEach of these examples has been written using numbers as inputs to the mathematical operations. The syntax will be exactly the same when using an input name such as x or y or altitude, for instance (x - y) / 2. In order for that command using x and y to work, some meaning must have been previously attached to the symbols. We’ll come back to this important topic on another day."
  },
  {
    "objectID": "Preliminaries/02-notation.html#exercises",
    "href": "Preliminaries/02-notation.html#exercises",
    "title": "2  Notation & computing",
    "section": "2.8 Exercises",
    "text": "2.8 Exercises\n\n\nExercise 2.1: TKWEW unassigned\n\nUse the MOSAIC Calculus naming conventions to answer these questions.\n\n\nQuestion A What is \\(h()\\)?\n\nThe name of a functionExcellent! Right. Typically we use \\(f()\\), \\(g()\\), \\(h()\\) or something similarly generic to stand for a function that we’re going to be working with for a little while. Think of these as pronouns. Just as we can say, meaningfully, “She gave it to him,” we can say \\(h(x) \\equiv f(x) + g(2*x)\\)\n\nThe name of an input.︎✘ Sorry, these will usually be letters like \\(x\\), \\(y\\), \\(t\\).\n\nA specific numerical value︎✘ Sorry, but we’ll use constructions with a subscript like \\(x_0\\) or \\(y_\\star\\) and the like for these.\n\n\n\n\n\nQuestion B How come we write \\(f()\\) for the name of a function rather than just \\(f\\) or \\(f(x)\\)?\n\nNo good reason︎✘ We certainly intend with the empty parentheses to remind the reader that a name refers to a function. If you spot a place where we violate this intention, point it out to us.\n\nIt’s a reminder that we’re talking about a function with the name “\\(f\\)”.Correct. \n\nThe parentheses are part of the name.︎✘ Not at all. Names in R never contain parentheses. So f, fbar, fred are all valid names in an R command, but f() is not. We use the parentheses when writing to a human audience as a reminder that the name is referring to a function. The computer doesn’t need any such reminders\n\n\n\n\n\nQuestion C What sort of thing is denoted by \\(x_0\\) or \\(y_\\star\\) or \\(y_{max}\\)?\n\nA particular numerical valueExcellent! Right. For instance, it might be the particular value for the input to a function which produces an output of zero. Or it might be a particular location in the domain of a function.\n\nThe name of an input︎✘ Sorry. We won’t typically use subscripts when referring to an input name.\n\n\n\n\n\nQuestion D Which of these symbols might stand for the entire domain of a function?\n\n\\(y\\)Good. Right. Another term to use for a symbol standing for a domain is “name of an input”.\n\n\\(f()\\)︎✘ No, this is how we write the name of the function called “\\(f\\)”\n\n\\(y_0\\)︎✘ No. \\(y_0\\) might be used to stand for a single point in the domain.\n\n\n\n\n\nQuestion E Suppose you come across \\(v(w) \\equiv w + 3\\) in this book. What do \\(v\\) and \\(w\\) stand for?\n\n\\(v()\\) is the name of a function and \\(w\\) is the name of the input to that function.Good. Right. Whenever we write something like “name(another_name) \\(\\equiv\\)”, we’re saying explicitly that “name” refers to a function and “another_name” refers to an input.\n\nIt’s meaningless.︎✘ We’ll try not to write meaningless mathematical expressions. If we do by mistake, let us know.\n\nIt’s the same thing as \\(v = w + 3\\).︎✘ \\(v = w+3\\) is an equation. But \\(v(w) \\equiv w+3\\) is the format for defining a function named \\(v()\\).\n\n\n\n\n\nQuestion F Are \\(g(x) \\equiv x^2\\) and \\(h(w) \\equiv w^2\\) the same function?\n\nYes, although that function is being given two different names.Nice! The only thing that’s significant about the name of an input is that it be used consistently in the function algorithm.\n\nOf course not!︎✘ Sorry. I suppose you might ask, “What do you mean by the same function?” Remember that a function is a relationship between inputs and the output. \\(g(x) \\equiv x^2\\) and \\(h(w) \\equiv w^2\\) describe exactly the same relationship: the output will be the square of the input.\n\n\n\n\n\n\nExercise 2.2: LDNE unassigned\n\nAccording to the notation style we use in CalcZ, which of these things is a function? Which a number?\n\n\nQuestion A What kind of a thing is \\(\\sqrt{z}\\)?\n\nA functionRight! \n\nA number︎✘ \\(z\\) is one of the standard names we will use for an input to a function. If we had given the function a name, for instance \\(g(z) \\equiv \\sqrt{z}\\), we would be able to tell from the \\((z)\\) that \\(g()\\) is a function. But whenever we use a standard input name, the expression is a function.\n\n\n\n\n\nQuestion B What kind of a thing is \\(\\sqrt{y^\\star}\\)?\n\nA numberRight! \n\nA function︎✘ According to our convention, the name \\(y^\\star\\) refers to a particular value as opposed to the name of a function input.\n\n\n\n\n\nQuestion C What kind of a thing is \\(e^{k t}\\)?\n\nA functionRight! \n\nA number︎✘ The letter \\(t\\) is one of our standard letters for input names. \\(k\\) is a letter, but since it is not from the end of the alphabet, you have a hint that it is intended to be a parameter, that is a symbol representing a specific numerical quantity.\n\n\n\n\n\nQuestion D What kind of a thing is \\(k\\) in the definition \\(g(k) \\equiv e^k\\)?\n\nA number︎✘ \n\nThe name of an input to a function.Correct. \n\nA function︎✘ Notwithstanding our convention that \\(k\\) is not on its own a name used for inputs, when we use the full function-definition style, anything in the parentheses following the function name is explicitly stated as an input name.\n\n\n\n\n\n\nExercise 2.3: kZG5Fj unassigned\n\nThe following traditional-style notation is intended to define a function that is 2 times the pattern-book sinusoid. But something is wrong.\n\\[g(t) \\equiv 2 \\sin(x)\\]\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question A What’s wrong with the definition?\n\n\\(g()\\) isn’t an appropriate name︎✘ You can name functions what you like.\n\nThe formula should be written \\(2 \\times \\sin(x)\\)︎✘ You are welcome to write things that way if you want to emphasize the multiplication, but you don’t have to. On the other hand, in R it would be absolutely required to write the multiplication operator: 2 * sin(x).\n\n\\(t\\) is not a good choice for the input name.︎✘ It’s a fine choice, especially when the input is time.\n\nThe input name in the formula doesn’t match the input name on the left side of \\(\\equiv\\).Correct. That’s it. Once you choose an input name (here, \\(t\\)), make sure to write the formula in terms of that name. ::: :::\n\n\n\n\nExercise 2.4: aeOnO5 unassigned\n\nConsider this expression in math notation:\n\n\\[\\frac{e^{k t}}{k}\\]\n\n\n\nQuestion A Which of the following R expressions implements the math-notation expression?\n\nk exp(kt)︎✘ You must always express multiplication explicitly, using * between the quantities to be multiplied.\n\ne^k*t / k︎✘ Use exp(x) for \\(e^x\\).\n\nexp(k t) / k︎✘ k t should be written k*t\n\nexp(k*t) / kNice! \n\n1/k e^kt︎✘ 1) Use * for multiplication. 2) Use exp(x) for \\(e^x\\).\n\n\n\n\n\n\nExercise 2.5: ooJK5d unassigned\n\nSuppose you want to define a straight-line function named \\(f()\\) such that \\(f(x)\\equiv m x + b\\). Each of the following R statements is incorrect for this purpose. Say why.\n\n\nQuestion A f <- m*x + b\n\nNeed to use makeFun() to define a function.Nice! \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nShould be y <- m*x + b.︎✘ \n\n\n\n\n\nQuestion B f <- makeFun(m*x + b)\n\nThe first argument to makeFun() should be a tilde expression.Nice! \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nmakeFun() requires two inputs.︎✘ No, but it does require a tilde expression input.\n\n\n\n\n\nQuestion C f <- makeFun(x ~ m*x + b)\n\nThe tilde expression should have the input name on the right-hand side of the ~.Correct. \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nThe first argument is not a tilde expression.︎✘ Actually, it is a tilde expression, just not the right sort of tilde expression.\n\n\n\n\n\nQuestion D f <- makeFun(mx + b ~ x)\n\nThe tilde expression is missing the multiplication operator * between m and xExcellent! \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nThe name f is mis-spelled.︎✘ \n\n\n\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question E f <- makeFun(b*x + m ~ x)\n\nThe roles of m and b have been reversed.Right! \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nx is not defined.︎✘  ::: :::\n\n\n\n\n\nExercise 2.6: BXCA4 unassigned\n\nOpen a SANDBOX. (Just click on that link, although you may eventually be given other ways to open a sandbox.)\n\nWhen you see a breakout box like this, it means that we’re providing some computer code that you can paste into a sandbox and run. For this exercise, that code is\n\nx <- 2\nsin(x)*sqrt(x)\n\nPaste those two lines into the sandbox and press “Run code.” Verify that you get this as a result:\n[1] 1.285941\n\nEach line that you pasted in the sandbox is a command. The first command gives a value to \\(x\\). The second command uses that value for \\(x\\) to calculate a function output. The function is \\(g(x)\\equiv \\sin(x) \\times \\sqrt{\\strut x}\\).\n\nWhy not simplify the above code to the single line sin(2)*sqrt(2)? This would produce the same output but would introduce an ambiguity to the human reader. We want to make it clear to the reader (and the computer) that whatever \\(x\\) might be, it should be used as the input to both the \\(\\sin()\\) and the \\(\\sqrt{\\strut\\ \\ \\ }\\) functions.\n\nIn the following questions, numbers have been rounded to two or three significant digits. Select the answer closest to the computer output.\n\n\nQuestion A Change \\(x\\) to 1. What’s the output of \\(\\sin(x) \\ \\sqrt{\\strut x}\\)\n    -1.51︎✘        0.244︎✘        0.84\\(\\heartsuit\\ \\)       0.99︎✘        2.14︎✘        NaN︎✘ \n\n\n\n\nQuestion B Change \\(x\\) to 3. What’s the output of \\(\\sin(x) \\  \\sqrt{\\strut x}\\)\n    -1.51︎✘        0.244\\(\\heartsuit\\ \\)       0.84︎✘        0.99︎✘        2.14︎✘        NaN︎✘ \n\n\n\n\nQuestion C Change \\(x\\) to \\(-5\\). What’s the output of \\(\\sin(x) \\  \\sqrt{\\strut x}\\)\n\n-1.51︎✘ \n\n0.244︎✘ \n\n0.84︎✘ \n\n0.99︎✘ \n\n2.14︎✘ \n\nNaNNice! This stands for Not-a-Number, which is what you get when you calculate the square root of a negative input.\n\n\n\nIn the sandbox, change the function to be \\(\\sqrt{\\strut\\pnorm(x)}\\).\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question D For \\(x=2\\), what’s the output of \\(\\sqrt{\\strut\\pnorm(x)}\\)?\n    -1.51︎✘        0.244︎✘        0.84︎✘        0.99\\(\\heartsuit\\ \\)       2.14︎✘        NaN︎✘  ::: :::\n\n\n\nExercise 2.7: 0V510o R formula notation\n\nUsing the R console, translate each of the following mathematical expressions into R in order to calculate the numerical value of the expression.\n\n\\((16 - 3)/2\\) \n\\(\\sqrt{\\frac{19}{3}}\\) \n\\(\\cos(\\frac{2 \\pi}{3})\\) \n\\(\\pi^3 + 2\\) \n\\(\\pi^{3+2}\\) \n\n\n\n\nExercise 2.8: Ce79t3 makeFun()\n\nEach of these attempts to define a mathematical function using R leads to an error message. Modify the statement so that it works properly.\n\nf(x) <- makeFun(2*x + 3 ~ x)\nh <- makeFun(x ~ 2*x + 3)\nf <- makeFun(2x + 3)\ng(x) <- makeFun(4 sin(x))\nh2 <- 2*x + 3 ~ x\ng2 <- makeFun(2*x + 3 ~ y)\np(x,y) <- makeFun(2 x + 3 y~ x & y)\n\n\n\n\n\nExercise 2.9: BaEJkS unassigned\n\n\nMake this an exercise on “when things go wrong.”\n\nWhen your R command is not a complete sentence, the SANDBOX will display an error like this:\nError in parse(text = x, keep.source = TRUE) : :5:0: unexpected end of input \nThe “unexpected end of input” is the computer’s way of saying, “You haven’t finished your sentence so I don’t know what to do.”\nEach of these R expressions is incomplete. Your job, which you should do in a sandbox, is to turn each into a complete expression. Sometimes you’ll have to be creative, since when a sentence is incomplete you, like the computer, don’t really know what it means to say! But each of these erroneous expressions can be fixed by adding or changing text.\nOpen a sandbox and copy each of the items below, one at a time, into a sandbox. Press “Run code” for that item and verify that you get an error message.\nFor the first item, the sandbox will look like this:\n\n\n\n\n\nRunning an invalid command will produce an error message.\n\n\n\n\nThen, fix the command so you get a numerical result rather than the error message.\nWorking through all of these will help you develop an eye and finger-memory for R commands.\n\nsin 3\n((16 - 4) + (14 + 2) / sqrt(7)\npnorm(3; mean=2, sd=4)\nlog[7]\n14(3 + 7)\ne^2\n3 + 4 x + 2 x^2"
  },
  {
    "objectID": "Preliminaries/02-notation.html#drill-questions",
    "href": "Preliminaries/02-notation.html#drill-questions",
    "title": "2  Notation & computing",
    "section": "2.9 Drill questions",
    "text": "2.9 Drill questions\n\n\nQuestion i Which of these is the symbol for “is defined as”?\n\n\\(=\\)︎✘ An equals sign says that the two sides happen to be equal, not that the left side is defined as the right side.\n\n\\(\\equiv\\)Excellent! Three parallel bars signify a definition.\n\n\\(\\sim\\)︎✘ \n\n\\(\\approx\\)︎✘ \n\n\n\n\n\nQuestion ii What is the name of the function defined by \\[f(y) \\equiv \\sin(y) + e^y \\ ?\\]\n\n\\(f\\)Nice! Note that we will usually write function names with trailing parentheses, like \\(f()\\), in order to remind you that \\(f\\) refers to a function rather than an input or parameter or whatever.\n\n\\(\\sin\\)︎✘ \n\n\\(f(y)\\)︎✘ This isn’t a function name. This is how we write the output from applying function \\(f()\\) to the input denoted by the name \\(y\\).\n\n\n\n\n\nQuestion iii How do we refer to the output generated by applying \\(g(x) \\equiv x+3\\) to the input 3?\n\n\\(g(x)\\)︎✘ \n\n\\(g(3)\\)Right!  \n\n\\(y = 6\\)︎✘ It’s a habit from high-school math to use the name \\(y\\) for outputs. Breaking that habit will help you learn and use calculus.\n\n\n\n\n\nQuestion iv Is xx a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion v Is x_x a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion vi Is -x a legitimate name in R?\n\nTrue︎✘ \n\nFalseCorrect. The minus sign are other such symbols are not allowed characters in an R name.\n\n\n\n\n\nQuestion vii Is 3x a legitimate name in R?\n    True︎✘        False\\(\\heartsuit\\ \\)Names should start with a letter\n\n\n\n\nQuestion viii Is x3 a legitimate name in R?\n    True\\(\\heartsuit\\ \\)Numbers are OK in names, so long as the first character is a letter       False︎✘ \n\n\n\n\nQuestion ix Is sqrt a legitimate name in R?\n    True\\(\\heartsuit\\ \\)In fact, it is the name of an oft-used function in R.       False︎✘ \n\n\n\n\nQuestion x Is x + y a legitimate name in R?\n\nTrue︎✘ \n\nFalseGood. x + y is an R expression that uses names, but the expression is not itself a name.\n\n\n\n\n\nQuestion xi Is 3 * x a legitimate name in R?\n    True︎✘        False\\(\\heartsuit\\ \\)* and  are not acceptable characters in a name.\n\n\n\n\nQuestion xii Is xprime a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion xiii Is x prime a legitimate name in R?\n    True︎✘        False\\(\\heartsuit\\ \\)Names cannot have blank spaces internally.\n\n\n\n\nQuestion xiv Is dx a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion xv Is xx a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion xvi Is dx_f a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion xvii What’s wrong with this assignment statement? x < 4\n    Nothing︎✘        It’s missing part of the <- token.\\(\\heartsuit\\ \\)         x is an improper name.︎✘ \n\n\n\n\nQuestion xviii What’s wrong with this assignment statement? 3*x <- 4\n\nNothing︎✘ The item to the left of <- needs to be a valid name. 3*x is not.\n\nIt should use addition instead of multiplication.︎✘ \n\nThe item to the left of <- needs to be a nameExcellent! 3 * x is an instruction to multiply 3 times x. It is not a name.\n\nThere’s no x on the right-hand side of the assignment arrow.︎✘ \n\n\n\n\n\nQuestion xix What’s wrong with this assignment statement? x -> 3+4\n\nNothing︎✘ \n\nYou can’t use addition in an assignment statement.︎✘ You can, but it has to be on the right side of the assignment, where you construct the value to be assigned to the name on the left side.\n\nThe assignment has to point toward the name, not the valueCorrect.  \n\n\n\n\n\nQuestion xx We can write something like \\(f(x) \\equiv x^2\\)  in mathematical notation. Is it legit in R to write f(x) <- x^2 ?\n\nYes, it’s fine.︎✘ \n\nf(x) is not a valid name in R.Correct.  \n\nAlmost. You need to use () instead of <- .︎✘ There’s no symbol () on the keyboard or recognized in the R language.\n\n\n\n\n\nQuestion xxi Using our notation conventions from the textbook, which one of the following kinds of things is \\(y_0 ?\\)\n\nA constantNice!  \n\nA function name︎✘ \n\nAn input name︎✘ A subscript (like \\(_0\\) here) or non-numeric superscript (like \\(^\\star\\)) on what would otherwise be an input name will be instead a constant.\n\n\n\n\n\nQuestion xxii Using our notation conventions from the textbook, which one of the following kinds of things is \\(t^\\star?\\)\n\nA constantExcellent!  \n\nA function name︎✘ \n\nAn input name︎✘ A subscript (like \\(_0\\) here) or non-numeric superscript (like \\(^\\star\\)) on what would otherwise be an input name will be instead a constant.\n\n\n\n\n\nQuestion xxiii Using our notation conventions from the textbook, which one of the following kinds of things is \\(B ?\\)\n\nA constantExcellent!  \n\nA function name︎✘ \n\nAn input name︎✘ The letters from the start of the alphabet, a-d, or A-D will refer to a constant. \n\n\n\n\n\nQuestion xxiv Using our notation conventions from the textbook, which one of the following kinds of things is \\(F() ?\\)\n\nA constant︎✘ \n\nA function nameRight! Our standard pronouns for functions are \\(f(), g(), h()\\) and \\(F(), G(), H()\\)\n\nAn input name︎✘ \n\n\n\n\n\nQuestion xxv Using our notation conventions from the textbook, which one of the following kinds of things is \\(u ?\\)\n\nA constant︎✘ \n\nA function name︎✘ \n\nAn input nameNice! Letters from the end of the alphabet, \\(u, v, w, x, y, z\\), generally refer to an input to a function. But, remember, something like \\(x_0\\) will always be a constant.\n\n\n\n\n\nQuestion xxvi Can function names be multiple letters, e.g. g3() or altitude()?\n\nYesGood. And they often do. Almost all R functions have multi-letter names, like exp(), sin(), dnorm(), and such. When you are building a model, it’s helpful to use mnemonic function names rather than the usual pronouns like \\(f(), g()\\), an \\(h()\\). We use the short pronouns throughout the book whenever we are discussing general mathematical properties rather than specific models.\n\nNo︎✘ \n\n\n\n\n\nQuestion xxvii In the book, will input names have subscripts, like \\(x_0\\) or \\(u_2 ?\\)\n\nYes︎✘ \n\nNoCorrect. In the textbook, we try to reserve names like \\(x_0\\) or \\(u_2\\) for constants. But mathematics usage generally doesn’t always adopt this helpful convention.\n\n\n\n\n\nQuestion xxviii In the book, what is meant by the word “variable”?\n\nIt’s the same as input.︎✘ Use input rather than variable! Even if you’re used to calling quantities like \\(x\\) and \\(y\\) variables, it’s a confusing practice since it can mean so many different things. In calculus, in this course, we’ll try to be strict about using the words input and output\n\nIt’s the same as output.︎✘ \n\nA column in a data table.Excellent! This is the use in statistics and data science. In calculus, we’ll try to avoid confusing by using input and output instead."
  },
  {
    "objectID": "Preliminaries/03-graphs-and-graphics.html",
    "href": "Preliminaries/03-graphs-and-graphics.html",
    "title": "3  Graphs and graphics",
    "section": "",
    "text": "Before we go much further in exploring the creation and uses of functions, let’s remember the general idea of mathematical modeling: the construction of mathematical representations of systems. The word “system” is familiar in everyday speech and is used to describe all manner of things: means of communication, ecology, politics, the workings of the market, etc. A “system” involves a group of related components that operates as a whole. For instance, the digestive system consists of body organs and reflexes that, collectively, transform food into the elementary substances needed for metabolism. In the economic theory of the market, components are prices, demand, and supply. These three components are not independent. Demand is related to price as is supply, both are what economists sometimes call “curves” but which we would call functions.\nKey steps in making a mathematical representation—a model—of a system involve identifying the system components and describing quantitatively the relationships among them. In brief, mathematical modeling is about describing the relationships between things.\nThe smooth curve in Figure 3.2 describes the relationship between current and voltage quantitatively. For example, if you know that the current is 0, you can use the curve to figure out what the voltage will be around -90 mV or -50 mV or -10 mV. But when current is 0, the voltage will not be, say, -75 or -150.\nGraphs such as Figure 3.1 and Figure 3.2 are good ways of showing relationships. We can even do calculations simply using such graphs. Place your finger on a point of the S-shaped graph and you can read from the axes an allowed pair of voltage and current values. Place your finger on a point on the vertical axis. Moving it to the curve will reveal what current is associated with that voltage.\nFunctions are, like graphs, a ways of representing relationships. For all their advantages as a means of communication, graphs have their limits. With a graph it’s feasible only to show the relationship between two quantities or among three quantities. Functions, can involve more quantities. For instance, the triangle-area function \\[A(a,b,c) \\equiv \\frac{1}{4}\\sqrt{\\strut 4a^2b^2-(a^2+b^2-c^2)^2}\\] gives the relationship between four quantities: the area and the lengths of the triangle’s three sides.\nOn the other hand, functions cannot represent all types of relationships. For instance, the curve in Figure 3.2 shows a relationship between current and voltage in nerve cells. But there is no mathematical function voltage(current) that does justice to the relationship. The reason is that mathematical functions can have one and only one output for any given input. There are three reasonable values for membrane voltage that are experimentally consistent with a zero current, not just one.\nCare needs to be taken in using functions to represent relationships. For the nerve-cell current-voltage relationship, for instance, we can construct a function current(voltage) to represent the relationship. That’s because for any given value of voltage there is just one corresponding current. But there is no voltage(current) function, even though knowing the current tells you a lot about the voltage."
  },
  {
    "objectID": "Preliminaries/03-graphs-and-graphics.html#function-graphs",
    "href": "Preliminaries/03-graphs-and-graphics.html#function-graphs",
    "title": "3  Graphs and graphics",
    "section": "3.1 Function graphs",
    "text": "3.1 Function graphs\nGiven a function, it’s easy to draw the corresponding relationship as a graphic. This section describes how to do that for functions that have one or two inputs. The opposite—given a relationship, represent it using functions—is not always so easy and will require modeling techniques that we’ll develop in Block 1.\nContemporary practice is to draw graphs of functions using a computer. R/mosaic provides several functions that do this, you need only learn how to use them.\nThere are two essential arguments shared by all of the R/mosaic functions drawing a graph:\n\nThe function that is to be graphed. This is to be written as a tilde expression in exactly the same manner as described in ?notation-and-computing.\nThe domain interval. The domain of many functions reaches to infinity, but our computer screens are not so big! Making a graph requires choosing a finite interval for each of the input variables.\n\nThe tilde expression for a function with one input will have only one name on the right-hand side of the ~. The domain interval specification must use the same name:\n\n\n\nTilde expression\nDomain interval specification\n\n\n\n\nx^2 ~ x\ninterval(x = -3:3)\n\n\ny * exp(y) ~ y\ninterval(y = 0:10)\n\n\nlog(y) / exp(y) ~ y\ninterval(y = -5:5)\n\n\nsin(z) / z ~ z\ninterval(y = -3*pi:3*pi)\n\n\n\n\n3.1.1 Slice plot\nTo draw a graph of a function with one input, use slice_plot(). The tilde expression is the first argument; the domain interval specification is the second argument. For instance,\n\nslice_plot(y * exp(y) ~ y, domain(y=0:10))\n\n\n\n\nFigure 3.3: Graph of the function \\(f(y) \\equiv y e^y\\).\n\n\n\n\nThe graphics frame in Figure 3.3 is a 2-dimensional area for drawing. The domain of the function being graphed in that frame, \\(f() \\equiv y e^y\\), is the number line, that is, the space of all real numbers. The plot, however, shows only a finite interval \\(0 \\leq y \\leq 10\\) of that domain.\nRecall the situation seen in Figure 3.2 which shows a two-dimensional space of all possible (voltage, current) pairs for nerve cells. The experimental data identified many possible pairs—marked by the dots in Figure Figure 3.2 —that are consistent with the relationships of the nerve-cell system.\nThe same is true of Figure 3.3, the graph of a function with a single input. The two-dimensional space shown in the Figure 3.3 contains (input, output) pairs, only a small fraction of which are consistent with the relationship described by the function. The points in that small fraction could be marked by individual dots, but instead of dots we draw the continuous curve connecting the dots. Every point on the curve is consistent with the relationship between input and output represented by the function.\n\n\n3.1.2 Contour plot\nFunctions with two inputs can be displayed with contour_plot(). Naturally, the tilde expression defining the function will have two names on the right-hand side of ~. Similarly, the domain specification will have two arguments, one for each of the names in the tilde expression.\n\ncontour_plot(exp(-z)*sin(y) ~ y & z, domain(y=-6:6, z=0:2))\n\n\n\n\nFigure 3.4: Contour plot of a function with two inputs \\(g(y,z) \\equiv e^{-z}\\sin(y)\\)\n\n\n\n\nContour plots will be a preferred format for displaying functions with two inputs. The main reason to prefer contour plots is the ease with which locations of points in the input space can be identified and the ability to read output values without much difficulty.\n\n\n3.1.3 Surface plot\nThere’s another way to think about graphing functions with two inputs. There are in such a situation three quantities involved in the relationship. Two of these are the inputs, the third is the output. A three-dimensional space consists of all the possible triples of point; the relationship between the inputs and the output is marked by ruling out almost all of the potential triples and marking those points in the space that are consistent with the function.\nthe space of all possibilities (y, z, output) is three-dimensional, but very few of those possibilities are consistent with the function to be graphed. You can imagine our putting dots at all of those consistent-with-the-function points, or our drawing lots and lots of continuous curves through those dots, but really the cloud of dots forms a surface; a continuous cloud of points floating over the (y, z) input space.\nFigure 3.5 displays this surface. Since the image is drawn on a two-dimensional screen, we have to use painters’ techniques of perspective and shading. In the interactive version of the plot, you can move the viewpoint for the image which gives many people a more solid understanding of the surface being shown.\n\n  surface_plot(exp(-z)*sin(y) ~ y & z, interval(y=-6:6, z=0:2))\n\n\n\n\n\n\nFigure 3.5: Displaying \\(g(y,z) \\equiv e^{-z}\\sin(y)\\) as a surface plot annotated with contour lines.\n\n\n\nNote that the surface plot is made with the R/mosaic surface_plot(), which takes arguments in exactly the same way as contour_plot()."
  },
  {
    "objectID": "Preliminaries/03-graphs-and-graphics.html#interpreting-contour-plots",
    "href": "Preliminaries/03-graphs-and-graphics.html#interpreting-contour-plots",
    "title": "3  Graphs and graphics",
    "section": "3.2 Interpreting contour plots",
    "text": "3.2 Interpreting contour plots\nIt may take some practice to learn to read contour plots fluently but it is a skill that’s worthwhile to have. Note that the graphics frame is the Cartesian space of the two inputs. The output is presented as contour lines. Each contour line has a label giving the numerical value of the function output. Each of the input value pairs on a given contour line corresponds to an output at the level labeling that contour line. To find the output for an input pair that is not on a contour line, you interpolate between the contours on either side of that point.\n\nWhat’s the value of the function being plotted here at input \\((\\text{input}_1=0, \\text{input}_2=0)\\)?\n\n\n\n\n\n\n\n\n\nThe input pair (0, 0)—which is marked by a small red dot—falls between the contours labeled “20” and “22.” This means that the output corresponding to input (0, 0) is somewhere between 20 and 22. The point is much closer to the contour labeled “20”, so it’s reasonable to see the output value as 20.5. This is, of course, an approximation, but that’s the nature of reading numbers off of graphs.\n\nOften, the specific numerical value at a point is not of primary interest. Instead, we may be interested in how steep the function is at a point, which is indicated by the spacing between contours. When contours are closely spaced, the hillside is steep. Where contours are far apart, the hillside is not steep, perhaps even flat.\nAnother common task for interpreting contour plots is to locate the input pair that’s at a local high point or low point: the top of a hill or the bottom of a hollow. Such points are called local argmax or local argmin respectively. The output of the function at a local argmax is called the local maximum; similarly for a local argmin, where the output is called a local minimum. (The word “argmax” is a contraction of “argument of the maximum.” We will tend to use the word “input” instead of “argument”, but it means exactly the same thing to say “the inputs to a function” as to says “the arguments of a function.”)\n\nFor this contour graph\n\n\n\n\n\n\n\n\n\n\nFind an input coordinate where the function is steepest.\nFind input coordinates for the high and low points in the function .\n\nA function is steepest where contour lines are spaced closely together, that is, where the function output changes a lot with a small change in input. This is true near inputs \\((x=0, y=1)\\). But notice that steepness involves a direction. Near \\((x=0,y=1)\\), changing the \\(x\\) value does not lead to a big change in output, but a small change in the value of \\(y\\) leads to a big change in output. In other words, the function is steep in the y-direction but not in the x-direction.\nThe highest output value explicitly marked in the graph is 8. We can imagine from the shapes of the contours surrounding the 8 contour that the function reaches a peak somewhere in the middle of the region enclosed by the 8 contour, near the input coordinate \\((x=0, y=-1.5)\\).\nSimilarly, the lowest output value marked is -10. In the middle of the area enclosed by the -10 contour is a local low point. That there are two such regions, one centered near input coordinate \\((x=-0.5, y=3.3)\\), the other at \\((x=1.5, y=3.1)\\).\n\n\nWhy do you call the graphs of functions of one variables slice plots rather than simply graphs?\nSaying “graph” for a display of \\(f(x)\\) versus \\(x\\) is correct and reasonable. But in MOSAIC Calculus we have another point to make.\nAlmost always, when mathematically modeling a real-world situation or phenomenon, we do not try to capture every nuance of every relationship that might exist in the real world. We leave some things out. Such simplifications make modeling problems easier to deal with and encourage us to identify the most important features of the most important relationships.\nAs you become practiced reading contour plots, you might prefer to read this one as a hilltop (shaded yellow) side-by-side with a hollow or bowl (shaded purple), with green, almost level flanks at the left and right edges of the frame.\n\n\n\n\n\nFigure 3.6: A hypothetical relationship among three quantities.\n\n\n\n\nIn this spirit, it’s useful always to assume that our models are leaving something out and that a more complete model involves a function with more inputs than the present candidate. The present candidate model should be considered as a slice of a more complete model. Our slice leaves out one or more of the variables in a more complete model.\nTo illustrate this, suppose that the actual system involves relationships among three quantitiess, which we represent in the form of a function of two inputs, as shown in Figure 3.6. (The third quantity in the relationship is the output of the function.)\nThe most common forms of slice involve constructing a simpler function that has one input but not the other. For example, our simpler function might ignore input 22. There are different ways of collapsing the function of two inputs into a function of one input. An especially useful way in calculus is to take the two-input function and set one of the inputs to a constant value.\nFor instance, suppose we set input 22 to the constant value 1.5. This means that we can consider any value of input 1, but input 2 has been replaced by 1.5. In Figure Figure 3.7, we’ve marked in red the points in the contour plot that give the output of the simplified function.\n\n\n\n\n\nFigure 3.7: Left: A slice (red) through the domain of a contour plot. Right: The value of the function along the red slice presented as a mathematical graph, generated by slice_plot().\n\n\n\n\nEach point along the red line corresponds to a specific value of input #1. From the contours, we can read the output corresponding to each of those values of input #1. This relationship, output versus input #1 can be drawn as a mathematical graph (to the right of the contour plot). Study that graph until you can see how the rising and falling parts of the graph correspond to the contours being crossed by the red line.\nSlices can be taken in any direction or even along a curved path! The blue line in Figure 3.8 shows the slice constructed by letting input 2 vary and holding input 1 at the constant value 0.\n\n\n\n\n\nFigure 3.8: A path (blue) along which to cut a slice. The graph is made with contour_plot(). Right: Slice plot along the blue path. The graph is made with slice_plot()."
  },
  {
    "objectID": "Preliminaries/03-graphs-and-graphics.html#exercises",
    "href": "Preliminaries/03-graphs-and-graphics.html#exercises",
    "title": "3  Graphs and graphics",
    "section": "3.3 Exercises",
    "text": "3.3 Exercises\n\n\nExercise XX.XX: sR6PVw reading slice plots\n\n\n\n\n\n\n\n\n\n\n\nFill in the table with the values of the function shown in the graph.\n\n\n\n\n\\(x\\)\n\\(f(x)\\)\n\n\n\n\n-3\n\n\n\n-2\n\n\n\n-1\n\n\n\n0\n\n\n\n1\n\n\n\n2\n\n\n\n3\n\n\n\n\n\nFill in the table with the \\(x\\) values corresponding to the function values.\n\n\n\n\n\\(x\\)\n\\(f(x)\\)\n\n\n\n\n0\n\n\n\n5\n\n\n\n12.5\n\n\n\n20\n\n\n\n\n    </details>\n\n\nExercise XX.XX: bYHEy6 read surface plots\n\n\n\n\nThe interactive figure displays a function, but we haven’t shown you any formula for the function, just the graph. ::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display}\n\n\n::: :::\nAs you place the cursor on a point on the surface, a box will display the \\((x,y,z)\\) coordinates are displayed.\n\nFind three points on the surface where \\(f(x, y)=15\\). (It doesn’t have to be exactly 15, just close.)\nFind a point where \\(f(x=2, y) = 12\\).\nExplain why you can find multiple input points that generate an output of 15, but only one point where \\(f(x=2, y)=12)\\).\n\n\nEXERCISE: USE a plot like surface_plot(exp(-z)*sin(y) ~ y & z, interval(y=-6:6, z=0:2), type=\"contour\") so that students can read off the (x,y,z) value. Ask for the value of the function at several input points. Ask them to trace the output value as the cursor moves along a contour line.\nEXERCISE: Here are some additional tasks which you should learn to perform at a glance when reading a contour plot:\n\nStart at a given input pair and determine two directions:\n\nthe direction to move which is most steeply uphill,\nthe direction to move which will keep the function output the same.\n\nTranslate a small region of a contour plot into the word for a corresponding geographical feature with that topology: hills, valleys, crests, coves, hollows, and so on.\n\nEXERCISE: Match up the slice plots with the paths indicated on the contour plot.\nEXERCISE: Ask them to find the actual lowest point in the graph ::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display}  ::: :::\n\n\nExercise XX.XX: bCD1KG read contour plots\n\nThe text introduced the area of a triangle as a function of the lengths of the three sides.\n\\[A(a,b,c) \\equiv \\frac{1}{4}\\sqrt{\\strut 4a^2b^2-(a^2+b^2-c^2)^2}\\ .\\] ::: {.cell layout-align=“center” fig.showtext=‘false’}\narea <- makeFun(sqrt(4*a^2*b^2 - (a^2+b^2-c^2)^2)/4 ~ a & b & c)\n:::\nThere are three inputs to area(), but a contour or surface plot can represent at most two of them. One possibility is to set one of the inputs to a specific value and represent each of the two remaining inputs as one coordinate axis. For instance, the following plot shows area(a, b, c=4): the area of triangles one side of which has length 4.\n\ncontour_plot(area(a,b,4)  ~ a & b, \n             domain(a=0:6, b=0:6), npts=200)\n\n\n\n\n\n\n\n\n(Aside: The npts=200 argument instructs the computer to draw a high-resolution graph.)\n\nAccording to the above graph, what is the area of an equilateral triangle each of whose sides has length 4?\nGive the abc side lengths for 4 different triangles, each of which has area 5.\nHow many different triangles are there with \\(c=4\\) and area 3? \nThe interval of the \\((a, b)\\) space shown in the plot is the square region \\(0 \\leq a \\leq 6\\) and \\(0 \\leq b \\leq 6\\). Yet there are empty places not marked with any output value. Why? (Hint: What’s the smallest possible area for a triangle?)\n\nThe input space for the area function is three dimensional. In the previous plot we took a planar slice of that space with \\(c=4\\). The graph below shows a different type of slice, the one that includes only right triangles, that is triangles where \\(c=a^2 + b^2\\).\n\n\n\n\n\n\n\n\n\n\nWrite down the R/mosaic command that will draw this graphic showing the area of right triangles."
  },
  {
    "objectID": "modeling-part.html",
    "href": "modeling-part.html",
    "title": "Modeling",
    "section": "",
    "text": "This is where I’ll explain what the block is about and the overall goals."
  },
  {
    "objectID": "Modeling/09-dimensions.html",
    "href": "Modeling/09-dimensions.html",
    "title": "4  Dimensions and units",
    "section": "",
    "text": "Next time you’re at a family gathering with your 10-year old cousin, give her the following math quiz.\nI don’t know your cousin, but I suspect she will have an easy time answering (1) and (2) correctly. As for (3), she might give the correct answer, “5 miles,” or just say “5.” If so, you’ll follow up with “5 what?” at which point she’ll definitely say “miles.”\n10-year olds are pretty creative, so I’m not sure how she’ll answer (5). But if you ask your Ph.D. aunt, she’ll answer along the lines of “silly question,” or “there’s no such thing.” That’s true.\nConsider these everyday quantities:\nConsider how you would measure such things:\nEvidently, it makes sense to multiply and divide different types of quantities: feet, gallons, kilometers, kilograms, pounds, hours, …. But you won’t ever see a quantity constructed by adding or subtracting miles and hours or gallons and and square feet. You can square feet and cube centimeters, but can you take the square root of a gallon? Does it make sense to raise 2 to the power of 3 yards?\nThis section is about the mathematical structure of combining quantities; which kinds of mathematical operations are legitimate and which are not."
  },
  {
    "objectID": "Modeling/09-dimensions.html#mathematics-of-quantity",
    "href": "Modeling/09-dimensions.html#mathematics-of-quantity",
    "title": "4  Dimensions and units",
    "section": "4.1 Mathematics of quantity",
    "text": "4.1 Mathematics of quantity\n\n\n\n[Fun-10a] Know the definition of a fundamental dimension and the notation for the most common ones (definition page 241-242)\n\n\n\n\n[Fun-10b] Understand how derived dimensions are formed from fundamental dimensions (definition page 241-242)\n\n\n\n\n[Fun-10c] Know that units are ways of measuring dimensions and derived dimensions.\n\n\n\nThe first step in understanding the mathematics of quantity is to make an absolute distinction between two concepts that, in everyday life, are used interchangeably: dimension and unit.\nLength is a dimension. Meters is a unit of length. We also measure length in microns, mm, cm, inches, feet, yards, kilometers, and miles, to say nothing of furlongs, fathoms, astronomical units (AU), and parsecs.\nTime is a dimension. Seconds is a unit of time. We also measure time in micro-seconds, milli-seconds, minutes, hours, days, weeks, months, years, decades, centuries, millenia.\nMass is a dimension. Kilograms is a unit of mass.\nLength, time, and mass are called fundamental dimensions. This is not because length is more important than area or volume. It’s because you can construct area and volume by multiplying lengths together. This is evident when you consider units of area like square-inches or cubic centimeters, but obscured in the names of units like acre, liter, gallon.\nWe use the notation L, T, and M to refer to the fundamental dimensions. (Electrical current Q is also a fundamental dimension, but we won’t have much use for it in our examples. Also useful are \\(\\Theta\\) (“theta”) for temperature, S for money, and P for a count of organisms such as the population of the US or the size of a sheep herd.)\nBrackets translate between a quantity and the dimension. For instance, [1 yard] = L, [1000 kg] = M, [3 years] = T, [10 \\(\\mu\\) (microns)] = L,"
  },
  {
    "objectID": "Modeling/09-dimensions.html#compound-dimensions",
    "href": "Modeling/09-dimensions.html#compound-dimensions",
    "title": "4  Dimensions and units",
    "section": "4.2 Compound dimensions",
    "text": "4.2 Compound dimensions\nThere are other dimensions: volume, force, pressure, energy, torque, velocity, acceleration, and such. These are called compound dimensions because we represent them as combinations of the fundamental dimensions, L, T, and M. The notation for these combinations involves multiplication and division. For instance:\n\nVolume is L \\(\\times\\) L \\(\\times\\) L \\(=\\) L\\(^3\\), as in “cubic centimeters”\nVelocity is L/T, as in “miles per hour”\nForce is M L/T\\(^2\\), which is obscure unless you remember Newton’s Second Law that \\(\\text{F} = \\text{m}\\,\\text{a}\\): “force equals mass times acceleration.” In terms of dimension, mass is M, acceleration is L/T\\(^2\\). Multiply the two together and you get the dimension “force.”\n\nMultiplication and division are used to construct a compound dimension from the fundamental dimensions L, T, and M.\nAddition and subtraction are never used to form a compound dimension.\nMuch of the work in understanding dimensions involves overcoming the looseness of everyday speech. Remember the weight scale graduated in pounds and kilograms. The unit kilograms is a way of measuring M, but the unit of pounds is a way of measuring force: M L/T\\(^2\\).\nWeight is not the same as mass. This makes no sense to most people and doesn’t really matter in everyday life. It’s only when you venture off the surface of the Earth that the difference shows up. The Mars rover Perseverence has a weight of 1000 kg on Earth. It was weightless for most of its journey to Mars. After landing on Mars, Perseverence weighed just 380 kg. But the rover’s mass didn’t change at sll.\nAnother source of confusion carried over from everyday life is that sometimes we measure the same quantity using different dimensions. You can measure a volume by weighing water; a gallon of water weighs 8 pounds, a liter of water has a mass of 1 kg. Serious bakers measure flour by weight; a casual baker uses a measuring cup. We can measure water volume with length because water has a (more-or-less) constant mass density. But 8 pounds of gasoline is considerably more than a gallon. It turns out that the density of flour varies substantially depending on how it’s packed, on humidity, etc. This is why it matters whether you weigh flour for baking or measure it by volume. You can measure time by the swing of a pendulum. To measure the same time successfully with different pendula they need to have the same length, not the same mass.\nA unit is a conventional amount of a quantity of a given dimension. All lengths are the same dimensionally, but they can be measured with different conventions: inches, yards, meters, … Units for the same dimension can all be converted unambiguously one into the other. A meter is exactly the same quantity of length as 39.3701 inches, a mile is the same length as 1609.34 meters. Liters and gallons are both units of volume (L\\(^3\\)): a gallon is the same as 3.78541 liters.\nYou will hear it said that a kilogram is 2.2 pounds. That’s not strictly true. A kilogram has dimension M and a pound has dimension ML/T\\(^2\\). Quantities with different dimensions cannot be “equal” or even legitimately compared to one another. Unless you bring something else into the game that physically changes the situation, for instance gravity (dimension of acceleration due to gravity (dimension \\(\\text{L}/\\text{T}^2\\)). The weight of a kilogram on the surface of the Earth is is 2.2 pounds because gravitational acceleration is (almost) the same everywhere on the surface of the Earth.\nIt’s also potentially confusing that sometimes different dimensions are used to get at the same idea. For instance, the same car that gets 35 miles / gallon in the US (dimension \\(\\text{L}/\\text{L}^3 = 1/\\text{L}^2\\)) will use 6.7 liters per 100 kilometers (\\(\\text{L}^3 / L = \\text{L}^2\\)) in Europe. Same car. Same fuel. Different conventions using different dimensions.\nKeeping track of the various compound dimensions can be tricky. For many people, it’s easier to keep track of the physical relationships involved and use that knowledge to put together the dimensions appropriately. Often, the relationship can be described using specific calculus operations, so knowing dimensions and units helps you use calculus successfully.\nEasy compound dimensions that you likely already know:\n\n[Area] \\(= \\text{L}^2\\). Some corresponding units to remind you: “square feet”, “square miles”, “square centimeters.”\n[Volume] \\(= \\text{L}^3\\). Units to remind you: “cubic centimeters”, “cubic feet”, “cubic yards.” (What landscapers informally call a “yard,” for instance “10 yards of topsoil” should properly be called “10 cubic-yards of topsoil.”)\n[Velocity] \\(= \\text{L}/\\text{T}\\). Units: “miles per hour,” “inches per second.”\n[Momentum] \\(= \\text{M}\\text{L}/\\text{T}\\). Units: “kilogram meters per second.”\n\nAnticipating that you will return to this section for reference, we’ve also added some dimensions that can be understood through the relevant calculus operations.\n\n[Acceleration] \\(= \\text{L}/\\text{T}^2\\). Units: “meters per second squared,” In calculus, acceleration is the derivative of velocity with respect to time, or, equivalently, the 2nd derivative of position with respect to time.\n[Force] \\(= \\text{M}\\, \\text{L}/\\text{T}^2\\) In calculus: force is the derivative of momentum with respect to time.\n[Energy] or [Work] \\(= \\text{M}\\, \\text{L}^2/\\text{T}^2\\) In calculus, energy is the integral of force with respect to length.\n[Power] \\(= \\text{M}\\, \\text{L}^2/\\text{T}^3\\) In the language of calculus, power is the derivative of energy with respect to time.\n\n\nDensity sounds like a specific concept, but there are many different kinds of densities. These have in common that they are a ratio of a physical amount to a geometric extent:\n\na physical amount: which might be mass, charge, people, etc.\na geometric extent: which might be length, area, or volume.\n\nSome examples:\n\n“paper weight” is the mass per area, typically grams-per-square-meter\n“charge density” is the amount of electrical charge, usually per area or volume\n“lineal density of red blood cells” is the number of cells in a capillary divided by the length of the capillary. (Capillaries are narrow. Red blood cells go through one after the other.)\n“population density” is people per area of ground.\n\n\n\nThe theory of dimensions and units was developed for the physical sciences. Consequently the fundamental dimensions are those of physics: length, mass, time, electrical current, luminous intensity.\nSince proper use of units is important even outside the physical sciences, it’s helpful to recognize the dimension of several other kinds of quantity.\n\n“people” / “passengers” / “customers” / “patients” / “cases” / “passenger deaths”: these are different different ways to refer to people. We’ll consider such quantities to have dimension P, for population.\n“money”: Units are dollars (in many varieties: US, Canadian, Australian, New Zealand), euros, yuan (synonym: renminbi), yen, pounds (many varieties: UK, Egypt, Syria, Lebanon, Sudan and South Sudan), pesos (many varieties), dinar, franc (Swiss, CFA), rand, riyal, rupee, won, and many others. Conversion rates depend on situation and national policy, but we will consider money a dimension, denoted by S (from the name of the first coinage, the Mesopotanian Shekel).\n\nExamples:\n\nPassenger-miles is a standard unit of transport.\nPassenger-miles-per-dollar is an appropriate unit of the economic efficiency of transport.\nPassenger-deaths per million passenger-mile is one way to describe the risk of transport."
  },
  {
    "objectID": "Modeling/09-dimensions.html#arithmetic-with-dimensions",
    "href": "Modeling/09-dimensions.html#arithmetic-with-dimensions",
    "title": "4  Dimensions and units",
    "section": "4.3 Arithmetic with dimensions",
    "text": "4.3 Arithmetic with dimensions\nRecall the rules for arithmetic dimensioned quantities. We restate them briefly with the square-bracket notation for “the dimension of.” For instance, “the dimension of \\(b\\)” is written \\([b]\\). We also write \\([1]\\) to stand for the dimension of a pure number, that is, a quantity without dimension.\n\n\n\n\n\n\n\n\n\nOperation\nResult\nOnly if satisfies\nMetaphor\n\n\n\n\nMultiplication\n\\([a \\times b] = [a] \\times [b]\\)\nanything goes\npromiscuous\n\n\nDivision\n\\([a \\div b] = [a] \\div [b]\\)\nanything goes\npromiscuous\n\n\nAddition\n\\([a + b] = [a]\\)\n\\([a] = [b]\\)\nmonogomous\n\n\nSubtraction\n\\([a - b] = [a]\\)\n\\([a] = [b]\\)\nmonogomous\n\n\nTrigonometric\n\\([\\sin(a)] = [1]\\)\n\\([a] = [1]\\)\ncelibate\n\n\nExponential\n\\([e^a] = [1]\\)\n\\([a] = [1]\\) (of course, \\([e] = [1]\\))\ncelibate\n\n\nPower-law\n\\([b ^ a] = \\underbrace{[b]\\times[b]\\times ...\\times [b]}_{a\\ \\ \\text{times}}\\)\n\\([a] = [1]\\) with \\(a\\) an integer\nexponent celibate\n\n\nSquare root\n\\([\\sqrt{b}] = [c]\\)\n\\([b] = [c\\times c]\\)\nidiosyncratic\n\n\nCube root\n\\([\\sqrt[3]{b}] = [c]\\)\n\\([b] = [c \\times c \\times c]\\)\nidiosyncratic\n\n\nHump\n\\([\\text{hump}(a)] = [1]\\)\n\\([a] = [1]\\)\ncelibate\n\n\nSigmoidal\n\\([\\text{sigmoid}(a)] = [1]\\)\n\\([a] = [1]\\)\ncelibate"
  },
  {
    "objectID": "Modeling/09-dimensions.html#pendulum-dimensions",
    "href": "Modeling/09-dimensions.html#pendulum-dimensions",
    "title": "4  Dimensions and units",
    "section": "4.4 Example: Dimensional analysis",
    "text": "4.4 Example: Dimensional analysis\nWe want to relate the period (in T) of a pendulum to it’s length and mass. Acceleration due to gravity also plays a role; that has dimension \\(\\text{L}\\cdot \\text{T}^{-2}\\). For simplicity, we’ll assume that only the bob at the end of the pendulum cable or rod has mass.\nThe analysis strategy is to combine the four quantities we think play a role into one total quantity that is dimensionless. Since it is dimensionless, it can be constant regardless of the mass, length, period, gravity of each individual situation.\n\\[\\text{[Period]}^a \\cdot \\text{[Mass]}^b \\cdot \\text{[Length]}^c \\cdot \\text{[Gravity]}^d = T^a \\cdot M^b \\cdot L^c \\cdot L^d \\cdot T^{-2d} = [1]\\] To be dimensionless:\n\n\\(c = -d\\), cancel out the L\n\\(a = 2d\\), cancel out the T\n\\(b=0\\), there’s no other mass term, and we need to cancel out the M\n\nAll of the exponents can be put in terms of \\(d\\). That doesn’t tell us what \\(d\\) should be, but whatever value for \\(d\\) we decide to choose, we get a ratio that’s equivalent to:\n\\[ \\frac{[\\text{Gravity}]\\cdot [\\text{Period}]^2}{[\\text{Length}]} = [1]\\]\nThis is a relationship between dimensions of quantities. To render it into a formula involving the quantities themselves we need to take into account the units.\n\\[ \\frac{\\text{Gravity}\\cdot \\text{Period}^2}{\\text{Length}} = B\\]\nWe can experimentally determine the numerical value of the dimensionless constant \\(B\\) by measuring the period and length of a pendulum and (on Earth) recognizing that gravitational acceleration on Earth’s surface is 9.8 meters-per-second-squared. Such experiment and mathematical models using differential equations give \\(B = (2\\pi)^2\\)."
  },
  {
    "objectID": "Modeling/09-dimensions.html#conversion-flavors-of-1",
    "href": "Modeling/09-dimensions.html#conversion-flavors-of-1",
    "title": "4  Dimensions and units",
    "section": "4.5 Conversion: Flavors of 1",
    "text": "4.5 Conversion: Flavors of 1\nNumbers are dimensionless but not necessarily unitless. Failure to accept this distinction is one of the prime reasons people have trouble figuring out how to convert from one unit to another.\nThe number one is a favorite of elementary school students because its multiplication and division tables are completely simple. Anything times one, or anything divided by one, is simply that thing. Addition and subtraction are pretty simple, too, a matter of counting up or down.\nWhen it comes to quantities, there’s not just one one but many. And often they look nothing like the numeral 1. Some examples of 1 as a quantity:\n\n\\(\\frac{180}{\\pi} \\frac{\\text{degrees}}{\\text{radians}}\\)\n\\(0.621371 \\frac{\\text{mile}}{\\text{kilometer}}\\)\n\\(3.78541 \\frac{\\text{liter}}{\\text{gallon}}\\)\n\\(\\frac{9}{5} \\frac{^\\circ F}{^\\circ C}\\)\n\\(\\frac{1}{12} \\frac{\\text{dozen}}{\\text{item}}\\)\n\nI like to call these and others different flavors of one.\nIn every one of the above examples, the dimension of the numerator matches the dimension of the denominator. The same is true when comparing feet and meters ([feet / meter] is L/L = [1]), or comparing cups and pints ([cups / pint] is \\(\\text{L}^3/\\text{L}^3 = [1]\\)) or comparing miles per hour and feet per second ([miles/hour / ft per sec] = L/T / L/T = [1]). Each of these quantities has units but it has no dimension.\nIt’s helpful to think about conversion between units as a matter of multiplying by the appropriate flavor of 1. Such conversion will not change the dimension of the quantity but will render it in new units.\n\nExample: Convert 100 feet-per-second into miles-per-hour. First, write the quantity to be converted as a fraction and alongside it, write the desired units after the conversion. In this case that will be \\[100 \\frac{\\text{feet}}{\\text{second}} \\ \\ \\ \\text{into} \\ \\ \\ \\frac{\\text{miles}}{\\text{hour}}\\]\nFirst, we’ll change feet into miles. This can be accomplished by multiplying by the flavor of one that has units miles-per-foot. Second, we’ll change seconds into hours. Again, a flavor of 1 is involved.\nWhat number will give a flavor of one? One mile is 5280 feet, so \\[\\frac{1}{5280} \\frac{\\text{miles}}{\\text{foot}}\\] is a flavor of one.\nNext, we need a flavor of one that will turn \\(\\frac{1}{\\text{second}}\\) into \\(\\frac{\\text{1}}{\\text{hour}}\\). We can make use of a minute being 60 seconds, and an hour being 60 minutes. \\[\\underbrace{\\frac{60\\  \\text{s}}{\\text{minute}}}_\\text{flavor of 1}\\  \\underbrace{\\frac{60\\ \\text{minutes}}{\\text{hour}}}_\\text{flavor of 1} = \\underbrace{3600\\frac{\\text{s}}{ \\text{hour}}}_\\text{flavor of 1}\\]\nMultiplying our carefully selected flavors of one by the initial quantity, we get \\[\n\\underbrace{\\frac{1}{5280} \\frac{\\text{mile}}{\\text{foot}}}_\\text{flavor of 1} \\times \\underbrace{3600 \\frac{\\text{s}}{\\text{hour}}}_\\text{flavor of 1} \\times \\underbrace{100 \\frac{\\text{feet}}{\\text{s}}}_\\text{original quantity} = 100 \\frac{3600}{5280} \\frac{\\text{miles}}{\\text{hour}} = 68.18 \\frac{\\text{miles}}{\\text{hour}}\\]"
  },
  {
    "objectID": "Modeling/09-dimensions.html#dimensions-and-linear-combinations",
    "href": "Modeling/09-dimensions.html#dimensions-and-linear-combinations",
    "title": "4  Dimensions and units",
    "section": "4.6 Dimensions and linear combinations",
    "text": "4.6 Dimensions and linear combinations\nLow-order polynomials are a useful way of constructing model functions. For instance, suppose we want a model of the yield of corn in a field per inch of rain over the growing season, will call it corn(rain). The output will have units of bushels (of corn). The input will have units of inches (of rain). A second-order polynomial will be appropriate for reasons to be discussed in ?sec-optim-and-shape.\n\\[\\text{corn(rain)} \\equiv a_0 + a_1\\, \\text{rain} + \\frac{1}{2} a_2\\, \\text{rain}^2\\] Of course, the addition in the linear combination will only make sense if all three terms \\(a_0\\), \\(a_1\\,\\text{rain}\\), and \\(\\frac{1}{2}\\, a_2\\, \\text{rain}^2/2\\) have the same dimension. But clearly \\([\\text{rain}] \\neq [\\text{rain}^2]\\). In order for things to work out, the coefficients must themselves have dimension. We know the output of the function will have dimension \\([\\text{volume}] = \\text{L}^3\\). Thus, \\([a_0] = \\text{L}^3\\).\n\\([a_1]\\) must be different, because it has to combine with the \\([\\text{rain}] = \\text{L}\\) and produce \\(\\text{L}^3\\). Thus, \\([a_1] = \\text{L}^2\\).\nFinally, \\([a_2] = \\text{L}\\). Multiplying that by \\([\\text{rain}]^2\\) will give the required \\(\\text{L}^3\\)\n\n\nIn everyday communication as well as in most domains such as construction, geography, navigation, and astronomy we measure angles in degrees. 90 degrees is a right angle. But in mathematics, the unit of angle is radians where a right angle is 1.5708 radians. (1.5708 is the decimal version of \\(\\pi/2\\).) The conversion function, which we’ll call raddeg(), is \\[\\text{raddeg}(r) \\equiv \\frac{180}{\\pi} r\\] The function that converts degrees to radians, which we’ll call degrad() is very similar: \\[\\text{degrad}(d) \\equiv \\frac{\\pi}{180} d\\] (Incidentally, \\(\\frac{180}{\\pi} = 57.296\\) while \\(\\frac{\\pi}{180} = 0.017453\\).)\nIn traditional notation, the trigonometric functions such as \\(\\sin()\\) and \\(\\tan()\\) can be written with an argument either in degrees or radians. For instance, \\(\\sin(90^\\circ) = \\sin\\left(\\frac{\\pi}{2}\\right)\\). Similarly, for the inverse functions like \\(\\arccos()\\) the units of the output are not specified. This works because there is always a human to intervene between the written expression and the eventual computation.\nIn R, as in many other computer languages like Python or spreadsheet packages, there is no valid expression like sin(90 deg). In these languages, 90 deg is not a valid expression (although it might be good if it were valid!). In these and many other languages, angles are always given in radians. Such consistency is admirable, but people are not always so consistent. It is a common source of computer bugs that angles in degrees are handed off to functions like \\(\\sin()\\) and that the output of \\(\\arccos()\\) is (wrongly) interpreted as degrees rather than radians.\nFunction composition to the rescue!\nConsider this function given in the Wikipedia article on the position of the sun as seen from Earth.1 \\[\\delta_\\odot(n) \\equiv - 23.44^\\circ \\cdot \\cos \\left [ \\frac{360^\\circ}{365\\, \\text{days}} \\cdot \\left ( n + 10 \\right ) \\right ]\\] Where \\(n\\) is zero at the midnight marking New Years and increases by 1 per day. (The \\(n+10\\) has units of days and translates New Years back 10 days, to the day of the winter solstice.) \\(\\delta_\\odot()\\) gives the declination of the sun: the latitude pieced by an imagined line connecting the centers of the earth and the sun.\nThe Wikipedia formula is well written in that it uses some familiar numbers to help the reader see where the formula comes from. 365 is recognizably the length of the year in days. \\(360^\\circ\\) is the angle traversed when making a full cycle around a circle. \\(23.44^\\circ\\) is less familiar, but the student of geography might recognize it as the latitude of the Tropic of Cancer, the latitude farthest north where the sun is directly overhead at noon (on the day of the summer solstice).\nBut there’s a world of trouble for programmer who implements the formula as ::: {.cell layout-align=“center” fig.showtext=‘false’}\ndec_sun <- makeFun(-23.44 * cos((360/365)*(n+10)) ~ n)\n\nFor instance, the equinoxes are around March 21 (n=81) and Sept 21 (n=264). On an equinox, the delination of the sun is zero degrees. But let’s plug \\(n=81\\) and \\(n=264\\) into the formula and see what we get. ::: {.cell layout-align=“center” fig.showtext=‘false’}\ndec_sun(81)\n## [1] 5.070321\ndec_sun(264)\n## [1] -23.38324\n::: The equinoxes aren’t even equal! And they are not close to zero. Does this mean astronomy is wrong?\nThe Wikipedia formula should have been programmed this way, using 2 \\(\\pi\\) radians instead of 360 degrees in the argument to the cosine function: ::: {.cell layout-align=“center” fig.showtext=‘false’}\ndec_sun_right <- makeFun(-23.44 * cos(( 2*pi / 365)*(n+10)) ~ n)\ndec_sun_right(81)\n## [1] -0.1008749\ndec_sun_right(264)\n## [1] -0.1008749\n:::\nThe deviation of one-tenth of a degree reflects rounding off the time of the equinox to the nearest day. :::"
  },
  {
    "objectID": "Modeling/09-dimensions.html#exercises",
    "href": "Modeling/09-dimensions.html#exercises",
    "title": "4  Dimensions and units",
    "section": "4.7 Exercises",
    "text": "4.7 Exercises\n\n\nExercise 16.1: mHACgC unassigned\n\nYou are designing a pendulum for a planned joint NASA/ESA mission to Mars. From the orbital period and radius of Mars, its mass is known. From the mass and the observed diameter of the planet, gravitational acceleration at the surface is calculated as 3.721 m/s\\(^2\\). According to Section @ref(pendulum-dimensions), the period is \\(\\text{Period} = 2 \\pi \\sqrt{\\frac{\\text{Length}}{\\text{Gravity}}}\\).\nThe length of your pendulum is 3 feet.\n\n\nQuestion A What will be the period of your pendulum when it eventually gets to Mars? (Hint: Don’t make the mistake of the engineers working on the Mars Polar Lander and forget to resolve the different units of length presented in the problem.)\n    1.3 seconds︎✘        1.9 seconds︎✘        3.1 seconds\\(\\heartsuit\\ \\)       9.1 seconds︎✘ \n\n\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question B What is the period of your pendulum on Earth?\n    1.3 seconds︎✘        1.9 seconds\\(\\heartsuit\\ \\)       3.1 seconds︎✘        9.1 seconds︎✘  ::: :::\n\n\n\nExercise 16.2: UGDKY unassigned\n\nFor each mathematical operation, identify the operation as valid or invalid according to the rules of dimensional arithmetic.\n\n\nQuestion A In this formula \\[\\frac{8 \\text{m} - 2.5 \\text{km}}{2 \\text{min} - 32 \\text{s}}\\] choose which rule (if any) is violated.\n\nAddition or Subtraction rule︎✘ Both the numerator and denominator are valid subtractions, with dimension L and T respectively.\n\nMultiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them!\n\nExponential︎✘ There’s no exponent here.\n\nIt’s valid. No rules are violated.Excellent! \n\n\n\n\n\nQuestion B In this formula \\[\\frac{3 \\text{g} \\times 2 \\text{m}}{3 \\text{km}^2}\\] choose which rule (if any) is violated.\n\nAddition or Subtraction rule︎✘ No addition or subtraction here.\n\nMultiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them!\n\nExponential︎✘ There’s no exponent here.\n\nIt’s valid. No rules are violated.Good. \n\n\n\n\n\nQuestion C For this formula \\[10^{\\frac{4 \\text{hr}}{3 \\text{g}}}\\] choose which rule (if any) is violated.\n\nAddition or Subtraction rule︎✘ No addition in this formula.\n\nMultiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them!\n\nExponentialCorrect. The exponent is 4 ft / 3 g, which has dimension L / M. Exponents must always have dimension [1].\n\nIt’s valid. No rules are violated.︎✘ \n\n\n\n\n\nQuestion D In this formula \\[6^{\\frac{2 \\text{hr}}{3 \\text{min}}}\\]choose which rule (if any) is violated.\n\nAddition or Subtraction rule︎✘ No addition or subtraction in this formula.\n\nMultiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them!\n\nExponential︎✘ The exponent is 4 hr/3 min, which has dimension T/T = [1]. So the rule is satisfied.\n\nIt’s valid. No rules are violated.Nice! \n\n\n\n\n\nQuestion E In this formula \\[5 \\text{g} \\times 3 \\text{kg} - 7 \\text{lbs}\\] choose which rule (if any) is violated.\n\nAddition or Subtraction ruleRight! You can’t subtract M from M\\(^2\\). (Strictly speaking, lbs has dimension of force, \\(M L^2 / T^2\\), but you can’t subtract force from M\\(^2\\) either.\n\nMultiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them!\n\nExponential︎✘ There’s no exponent here.\n\nIt’s valid. No rules are violated.︎✘ \n\n\n\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question F In this formula \\[\\sqrt[3]{8 m^3 + 27 \\text{ft}^2}\\] choose which rule (if any) is violated.\n\nAddition or Subtraction ruleNice! You can’t add L\\(^3\\) to L\\(^2\\).\n\nMultiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them!\n\nExponential︎✘ Maybe you’re thinking that the cube-root rule is violated, but since the quantity in the cube root is invalid, the root doesn’t do anything additionally wrong.\n\nIt’s valid. No rules are violated.︎✘  ::: :::\n\n\nrr insert_calcZ_exercise(16.3, \"DVGKY\", \"Exercises/dim-params.Rmd\")\nrr insert_calcZ_exercise(16.4, \"KGYKY\", \"Exercises/crow-mean-dress.Rmd\")\nrr insert_calcZ_exercise(16.5, \"JELCI\", \"Exercises/Boyd-1.Rmd\")\nrr insert_calcZ_exercise(16.6, \"aNEcW1\", \"Exercises/snake-leave-candy.Rmd\")\nrr insert_calcZ_exercise(\"16.7\", \"VA9Dxi\", \"Exercises/frog-grow-pantry.Rmd\")"
  }
]