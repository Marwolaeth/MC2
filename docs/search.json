[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MOSAIC Calculus",
    "section": "",
    "text": "This is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a span that has the class aside which places it in the margin without a footnote number."
  },
  {
    "objectID": "intro.html#callouts",
    "href": "intro.html#callouts",
    "title": "1  Introduction",
    "section": "1.1 Callouts",
    "text": "1.1 Callouts\nSee https://quarto.org/docs/authoring/callouts.html\n\n\n\n\n\n\nWatch out!\n\n\n\nThis is an example of a callout.\n\n\nHere, I’m trying to reference Figure 1.1\n\nplot(1:10)\n\n\n\n\nFigure 1.1: The caption for my figure\n\n\n\n\nWhat happens with a code block set for 2-column output?\n\n\n\n3 + 2\n\n[1] 5\n\nsqrt(16)\n\n[1] 4\n\n\n\ncos(3)\n\n[1] -0.9899925\n\ndate()\n\n[1] \"Wed Apr  6 17:00:48 2022\"\n\n\n\n\nThis document demonstrates the use of a number of these page layout features to produce an attractive and usable document inspired by the Tufte handout style and the use of Tufte’s styles in RMarkdown documents (xie2018?). The Tufte handout style is a style that Edward Tufte uses in his books and handouts. Tufte’s style is known for its extensive use of sidenotes, tight integration of graphics with text, and well-set typography. Quarto1 supports most of the layout techniques that are used in the Tufte handout style for both HTML and LaTeX/PDF output.\n---\ntitle: \"An Example Using the Tufte Style\"\nauthor: \"John Smith\"\nformat:\n  html: default\n  pdf: default\n  \n# places footnotes and cited sources in the margin\n# other layout options (for example placing a \n# figure in the margin)  will be set on per element\n# in examples below\nreference-location: margin\n---\nThese layout features are designed with two important goals in mind:\n\nTo produce both PDF and HTML output with similar styles from the same Quarto document;\nTo provide simple syntax to write elements of the Tufte style such as side notes and margin figures. If you’d like a figure placed in the margin, just set the option fig-column: margin for your code chunk, and we will take care of the details for you2.\n\nIf you have any feature requests or find bugs in this capabilities, please do not hesitate to file them to https://github.com/quarto-dev/quarto-cli/issues."
  },
  {
    "objectID": "intro.html#margin-figures",
    "href": "intro.html#margin-figures",
    "title": "1  Introduction",
    "section": "2.1 Margin Figures",
    "text": "2.1 Margin Figures\nImages and graphics play an integral role in Tufte’s work. To place figures in the margin you can use the Quarto chunk option column: margin. For example:\n\nlibrary(ggplot2)\nmtcars2 <- mtcars\nmtcars2$am <- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() + geom_smooth() +\n  theme(legend.position = 'bottom')\n\n\n\n\n\nFigure 2.1: MPG vs horsepower, colored by transmission.\n\n\n\nNote the use of the fig-cap chunk option to provide a figure caption. You can adjust the proportions of figures using the fig-width and fig-height chunk options. These are specified in inches, and will be automatically scaled down to fit within the handout margin."
  },
  {
    "objectID": "intro.html#arbitrary-margin-content",
    "href": "intro.html#arbitrary-margin-content",
    "title": "1  Introduction",
    "section": "2.2 Arbitrary Margin Content",
    "text": "2.2 Arbitrary Margin Content\nYou can include anything in the margin by places the class .column-margin on the element. See an example on the right about the first fundamental theorem of calculus.\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]"
  },
  {
    "objectID": "intro.html#full-width-figures",
    "href": "intro.html#full-width-figures",
    "title": "1  Introduction",
    "section": "2.3 Full Width Figures",
    "text": "2.3 Full Width Figures\nYou can arrange for figures to span across the entire page by using the chunk option fig-column: page-right.\n\nggplot(diamonds, aes(carat, price)) + geom_smooth() +\n  facet_grid(~ cut)\n\n\n\n\nFigure 2.2: A full width figure.\n\n\n\n\nOther chunk options related to figures can still be used, such as fig-width, fig-cap, and so on. For full width figures, usually fig-width is large and fig-height is small. In the above example, the plot size is \\(11 \\times 3\\)."
  },
  {
    "objectID": "intro.html#arbitrary-full-width-content",
    "href": "intro.html#arbitrary-full-width-content",
    "title": "1  Introduction",
    "section": "2.4 Arbitrary Full Width Content",
    "text": "2.4 Arbitrary Full Width Content\nAny content can span to the full width of the page, simply place the element in a div and add the class column-page-right. For example, the following code will display its contents as full width.\n::: {.fullwidth}\nAny _full width_ content here.\n:::\nBelow is an example:\n\nR is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see https://www.gnu.org/licenses/."
  },
  {
    "objectID": "intro.html#main-column-figures",
    "href": "intro.html#main-column-figures",
    "title": "1  Introduction",
    "section": "2.5 Main Column Figures",
    "text": "2.5 Main Column Figures\nBesides margin and full width figures, you can of course also include figures constrained to the main column. This is the default type of figures in the LaTeX/HTML output.\n\nggplot(diamonds, aes(cut, price)) + geom_boxplot()\n\n\n\n\nFigure 2.3: A figure in the main column."
  },
  {
    "objectID": "intro.html#margin-captions",
    "href": "intro.html#margin-captions",
    "title": "1  Introduction",
    "section": "2.6 Margin Captions",
    "text": "2.6 Margin Captions\nWhen you include a figure constrained to the main column, you can choose to place the figure’s caption in the margin by using the cap-location chunk option. For example:\n\nggplot(diamonds, aes(cut, price)) + geom_boxplot()\n\n\n\n\nFigure 2.4: A figure with a longer caption. The figure appears in the main column, but the caption is placed in the margin. Caption can even contain elements like a citation such as (xie2018?)."
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html",
    "href": "Preliminaries/01-modeling-change.html",
    "title": "2  Modeling change",
    "section": "",
    "text": "\\(\\newcommand{\\line}{\\text{line}} \\newcommand{\\hump}{\\text{hump}} \\newcommand{\\sigmoid}{\\text{sigmoid}} \\newcommand{\\recip}{\\text{recip}} \\newcommand{\\diff}[1]{{\\cal D}_#1} \\newcommand{\\pnorm}{\\text{pnorm}} \\newcommand{\\dnorm}{\\text{dnorm}} \\let\\origvec\\vec \\let\\origmathit\\mathit \\let\\orighat\\hat \\let\\origbar\\bar \\newcommand{\\vec}[1]{\\overset{{\\rule[-1pt]{0mm}{1mm}}\\rightharpoonup}{\\mathbf{#1}}} \\newcommand{\\bar}[1]{\\overset{{\\rule[-1pt]{12pt}{.5mm}}}{\\mathbf{#1}}} \\newcommand{\\mathit}[1]{\\underset{\\leftharpoondown}{\\overset{{\\rightharpoonup}}{\\large\\mathbf #1}}} \\newcommand{\\hat}[1]{\\widehat{\\ \\mathbf#1\\ }} \\newcommand{\\len}[1]{{\\|{\\mathbf #1}\\|}} \\newcommand{\\tvec}[1]{\\overset{\\uparrow}{\\mathbf #1}} \\newcommand{\\tmat}[1]{\\overset{\\leftrightarrows}{\\mathbf #1}} \\newcommand{\\perpendicularto}[2]{#1\\!\\perp\\!#2} \\newcommand{\\modeledby}[2]{#1\\!\\sim\\!#2} \\newcommand{\\CC}[1]{\\color{#648fff}{#1}} \\newcommand{\\CE}[1]{\\color{#785ef0}{#1}} \\newcommand{\\CA}[1]{\\color{#dc267f}{#1}} \\newcommand{\\CB}[1]{\\color{#fe6100}{#1}} \\newcommand{\\CD}[1]{\\color{#ffb000}{#1}}\\)\nCalculus is about change, and change is about relationships. Consider the complex and intricate network of relationships that determine climate: a changing climate implies that there is a relationship between, say, global average temperature and time. Scientists know temperature changes with levels of CO2 and methane which themselves change due to their production or elimination by atmospheric and geological processes. A change in one component of climate (e.g., ocean acidification or pH level) provokes change in others.\nIn order to describe and use the relationships we find in the natural or designed world, we build mathematical representations of them. We call these mathematical models. On its own, the word “model” signifies a representation of something in a format serves a specific purpose. A blueprint describing the design of a building is an everyday example of a model. The blueprint represents the building but in a way that is utterly different from the building itself. Blueprints are much easier to construct or modify than buildings, they can be carried and shared easily. Two of the purposes of a blueprint is to aid in the design of buildings and to communicate that design to the people securing the necessary materials and putting them together into the building itself.\nAtmospheric scientists build models of climate whose purpose is to explore scenarios for the future emission of greenhouse gasses. The model serves as a stand-in for the Earth, enabling predictions in a few hours of decades of future change in the climate. This is essential for the development of policies to stabilize the climate.\nDesigning a building or modeling the climate requires expertise and skill in a number of areas. Nonetheless, constructing a model is relatively easy compared to the alternative. Models also make it relatively easy to extract the information that’s needed for the purpose at hand. For instance, a blueprint gives a comprehensive overview of a building in a way that’s hard to duplicate just by walking around an actual building.\nA mathematical model is a model made out of mathematical and computational stuff. Example: a bank’s account books are a model made mostly out of numbers. But in technical areas—science and engineering are obvious examples, but there are many other fields, too—numbers don’t get you very far. By learning calculus, you gain access to important mathematical and computational concepts and tools for building models and extracting information from them.\nA major use for mathematics is building models, representation for a purpose, constructed out of mathematical things some of which we describe in the next section.\nModels are easy to manipulate compared to reality, easy to implement (think “draw a blueprint” versus “construct a building”), and easy to extract information from. We can build multiple models and compare and contrast them to gain insight to the real-world situation behind the models.\nThis book presents calculus in terms of two simple concepts central to the study of change: quantities and functions. Those words have everyday meanings which are, happily, close to the specific mathematical concepts that we will be using over and over again. Close … but not identical. So, pay careful attention to the brief descriptions that follow."
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html#quantity-vs-number",
    "href": "Preliminaries/01-modeling-change.html#quantity-vs-number",
    "title": "2  Modeling change",
    "section": "2.1 Quantity vs number",
    "text": "2.1 Quantity vs number\nA mathematical quantity is an amount. How we measure amounts depends on the kind of stuff we are measuring. The real-world stuff might be mass or time or length. It equally well can be velocity or volume or momentum or corn yield per acre. We live in a world of such stuff, some of which is tangible (e.g., corn, mass, force) and some of which is harder to get your hands on and your minds around (acceleration, crop yield, fuel economy). An important use of calculus is helping us conceptualize the abstract kinds of stuff as mathematical compositions of simpler stuff. For example, crop yield incorporates mass with length and time. Later, you’ll see us using the more scientific-sounding term dimension instead of “stuff.” In fact, Chapter @ref(dimensions) is entirely dedicated to the topic of dimensions, but for now it’s sufficient for you to understand that numbers alone are not quantities.\nMost people are inclined to think “quantity” is the same as “number”; they conflate the two. This is understandable but misguided. By itself a number is meaningless. What meaning does the number 5 have without more context? Quantity, on the other hand, combines a number with the appropriate context to describe some amount of stuff.\nThe first thing you need to know about any quantity is the kind of stuff it describes. A “mile” is a kind of stuff: length. A meter is the same kind of stuff: length. A liter is a different kind of stuff: volume. A gallon and an acre-foot are the same kind of stuff: volume. But an inch (length) is not the same kind of stuff as an hour (time).\n“Stuff,” as we mean it here, is what we measure. As you know, we measure with units. Which units are appropriate depends on the kind of stuff. Meters, miles, microns are all appropriate units of length, even though the actual lengths of these units differ markedly. (A mile is roughly 1.6 million millimeters.)\nOnly after you know the dimension and units does the number have meaning. Thus, a number is only part of specifying a quantity.\nHere’s the salient difference between number and quantity when it comes to calculus: All sorts of arithmetic and other mathematical operations can be performed to combine numbers: addition, multiplication, square roots, etc. When performing mathematics on quantities, only multiplication and division are universally allowed. For addition and subtraction, square roots, and such, the operation makes sense only if the dimensions are suitable.\nThe mathematics of units and dimension are to the technical world what common sense is in our everyday world. For instance (and this may not make sense at this point), if people tell me they are taking the square root of 10 liters, I know immediately that either they are just mistaken or that they haven’t told me essential elements of the situation. It’s just as if someone said, “I swam across the tennis court.” You know that person either used the wrong verb—walk or run would work—or that it wasn’t a tennis court, or that something important was unstated, perhaps, “During the flood, I swam across the tennis court.”"
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html#functions",
    "href": "Preliminaries/01-modeling-change.html#functions",
    "title": "2  Modeling change",
    "section": "2.2 Functions",
    "text": "2.2 Functions\nFunctions, in their mathematical and computing sense, are central to calculus. At the start of the chapter, it says, “Calculus is about change, and change is about relationships.” The idea of a mathematical function gives a definite perspective on this. The relationship represented by a function is between the function’s input and the function’s output. The input might be day of the year (1-365, often called the “Julian Date”), and the output cumulative rainfall up to that day. Every day it rains, the cumulative rainfall increases. Another relationship another function: the input might be the altitude on your hike up Pikes Peak and the output the air temperature. Typically, as you gain altitude the temperature goes down. With still another function, the input might be the number of hours after noon, the output the brightness of sunlight. As the sun goes down, the light grows dimmer, but only to a point.\nA function is a mathematical concept for taking one or more inputs and returning an output. In calculus, we’ll deal mainly with functions that take one or more quantities as inputs and return another quantity as output. But sometimes we’ll work with functions that take functions as input and return a quantity as output. And there will even be functions that take a function as an input and return a function as output.\nYou’ve almost certainly seen functions expressed in the mathematical form \\(f(x)\\). The function is \\(f()\\), but what is \\(x\\)? In high-school you likely learned to call \\(x\\) a “variable.” This is standard in mathematics education but it is also the source of considerable confusion. To avoid that confusion, we are going to be more precise about what \\(x\\) means. Try to put the word “variable” out of mind for the present, until we get to discussing the nature of data.\nWe will make extensive use of the term input. So far as \\(f(x)\\) is concerned, we will say that \\(x\\) is the name of an input. \\(f(x)\\) has only one input but soon we will work with functions that have multiple inputs.\nThe name \\(x\\) refers to something: the set of legitimate inputs to \\(f()\\). For example, a function like \\(\\sin()\\) only accepts pure numbers as its input; quantities such as “3 meters” are not legitimate inputs because they have units and dimension. The word domain is a more concise way of saying “the set of legitimate inputs,” as in “the domain of \\(\\sin()\\) is the set of real numbers.” (Real numbers is just a mathematical way of saying the values represented by the number line.)\nAnother important concept is applying a function to an input to produce an output. For example, when we write \\(\\sin(7.3)\\) we give the numerical value \\(7.3\\) to the sine function. The sine function then does its calculation and returns the value 0.8504366. We generally prefer to write \\(\\sin(7.3)\\) rather than 0.8504366 for reasons of communication. When a person sees \\(\\sin(7.3)\\) he or she is reminded of the motivation the modeler had in mind for specifying that particular value.\nOther ways that we’ll signal that we are applying a function to an input is by writing something like \\(\\sin(x=7.3)\\) or, later in the book, \\(\\left.\\sin(x)\\Large\\strut\\right|_{x=7.3}\\).\nJust as a “domain” is the set of legitimate inputs to a function, the function’s range is the set of values that the function can produce as output. For instance, the range of \\(\\sin()\\) is the numbers between \\(-1\\) and \\(1\\) which we’ll usually write in this format: \\(-1 \\leq x \\leq 1\\).\n\nIn high-school, you may have seen an expression like \\(m x + b\\). If so, you learned to call it “a line” or perhaps even “a function.” The proper term for it is a formula. Formulas are one way of describing how to do a calculation.\nYou may also have seen an expression like \\(y = m x + b\\). This is, of course, an equation, but equations are massively overused in mathematics education. An equation like this is typically used to signify that “\\(y\\) is a function of \\(x\\),” but we are going to be diligent in making explicit when we are defining a function. We will write \\[f(x) \\equiv m x + b\\] to mean “we define a function named \\(f()\\) that takes an input named \\(x\\).” The formula on the right side of \\(\\equiv\\) tells how \\(f()\\) calculates the value of the output for any given input.\nWhat’s wrong with writing an equation like \\(y = m x + b\\) to define a function? The nature of equations is that they can be re-arranged. For example \\[y = m x + b \\ \\ \\text{might be re-arranged as}\\ \\ \\ m = \\frac{y-b}{x}\\ .\\] Two different equations expressing the same relationship. But as definitions of functions the two equivalent equations mean might mean two different things: \\(y()\\) takes \\(x\\) as an input or, quite differently, \\(m()\\) takes both \\(x\\) and \\(y\\) as inputs. Much better, for all concerned, to define a function \\[\\text{line}(x) = m x + b\\] which has a name (\\(\\text{line}()\\)) for the function and a name \\(x\\) for the input. It also suggests that \\(m\\) and \\(b\\) are not inputs. You may already know that quantities like \\(m\\) and \\(b\\), if not explicitly given as inputs, are called parameters.\nAnother problem with \\(y = mx + b\\) is that in almost all computer languages it means something completely different than than the definition of a function. Since you will be working with computers extensively in your career, we want to have a mathematical notation that is compatible with computer notation.\nYou will need to get used to this idea of defining a function and naming the inputs explicitly, but it will make your study of calculus much more useful.\n\nThe engineers and mathematicians who invented computer languages realized that they had to be explicit in identifying the input, the output, and the function itself; computers demand unambiguous instructions.1 Sorting this out was a difficult process even for those mathematically talented and skilled pioneers of notation. So, you can be forgiven for the occasional confusion you have when dealing with notation that pre-dates computing.\nIn this book we’ll be explicit and consistent in the ways we denote functions so that you can always figure out what are the inputs and how they are being translated into the output. A good start in learning to read the function notation is to see the equivalent of \\(y=m x + b\\) in that notation: \\[g(x) \\equiv m x + b\\]\n\nThe various mathematical functions that we will be studying in this book are in the service of practical problems. But there are so many such problems, often involving specialized knowledge of a domain or science, engineering, economics, and so on, that a abstract mathematical presentation can seem detached from reality.\nThe video linked here, How to shoot, breaks down a simple-sounding situation into its component parts. The function itself is literally a black box. The inputs are provided by a human gunner training a telescope on a target and setting control dials. The ultimate output is the deflection of the guns in a remote turret. The main function is composed of several others, such as a function that outputs target range given the target size based on knowledge of the size of the target and how large it appears in the telescopic sight.\n\n\nDividing the gunnery task into a set of inputs and a computed output allows for a division of labor. The gunner can provide the skills properly trained humans are good at, such as tracking a target visually. The computer provides the capabilities—mathematical calculation—to which electronics are well suited. Combining the inputs with the calculation provides an effective solution to a practical problem."
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html#spaces-and-change",
    "href": "Preliminaries/01-modeling-change.html#spaces-and-change",
    "title": "2  Modeling change",
    "section": "2.3 Spaces and change",
    "text": "2.3 Spaces and change\nThe specialty of calculus is describing relationships between continuous sets. Functions such as \\(\\sin()\\) or \\(\\line()\\), which are typical of the functions we study in calculus, take numbers as input. A child learning about numbers starts with the “counting numbers”: \\(1, 2, 3, \\ldots\\). In primary school, the set of numbers is extended to include zero and the negative numbers: \\(-1,-2,-3, \\ldots\\), giving a set called the integers.\nTo almost everyone, its self-evident that the integers have an order and that the difference between successive integers is 1.\nAfter this kids learn about “rational numbers,” that is, numbers that are written as a ratio: \\(\\frac{1}{2}, \\frac{1}{3}, \\frac{2}{3}, \\ldots, \\frac{22}{7}\\), and so on. Rational numbers fit in the spaces between the integers.\nIf you didn’t stumble on the word “spaces” in the previous sentence, you are well on your way to understanding what is meant by “continuous.” For instance, between any two rational numbers there is another rational number. Think of the rational numbers as stepping stones that provide a path from any number to any other number.\n     \nMight a better analogy be a walkway instead of isolated stepping stones? A walkway is a structure on which you can move any amount, no matter how small, without risk of going off the structure. In contrast, a too-small move along a path of stepping stones will put you in the water.\nA continuous set is like a walkway; however little you move from an element of the set you will still be on the set. The continuous set of numbers is often called the number line, although a more formal name is the real numbers. (“Real” is a somewhat unfortunate choice of words, but we’re stuck with it.)\nThe underlying metaphor here is space. Between any two points in space there is another point in space. We will have occasion to work with several different spaces, for instance:\n\nthe number line: all the real numbers\nthe positive numbers: the real numbers greater than zero\nthe non-negative numbers: this is the tiniest little extension of the positive numbers adding zero to the set.\na closed interval, such as the numbers between 5 and 10, which we will write like this: \\(5 \\leq x \\leq 10\\), where \\(x\\) is a name we’re giving to the set.\nthe Cartesian plane: all pairs of real numbers such as \\((5.62, -0.13)\\). Other metaphors for this: the points on a piece of paper or a computer screen.\nthree-dimensional coordinate spaces, generally written as a set of three real numbers such as \\((-2.14, 6.87, 4.03)\\) but really just the everyday three-dimension world that we live in.\nhigher-dimensional spaces, but we won’t go there until the last parts of the book.\n\nYour spatial intuition of lines, planes, etc. will suffice for our needs. Mathematicians as a class value precise definitions; we won’t need those. Widely accepted mathematical definitions of continuous sets date from the 1800s, 150 years after calculus was introduced. For instance, it’s been known for more than 2000 years that there are numbers—the irrational numbers—that cannot be exactly expressed as a ratio of integers. We know now that there is an irrational number between any two rational numbers; the rational numbers are indeed analogous to stepping stones. But the distinction between rational and irrational numbers will not be one we need in this book. Instead, we need merely the notation of continuous space. And, by the way, the numbers stored and used in the normal way on computers are rational."
  },
  {
    "objectID": "Preliminaries/01-modeling-change.html#exercises",
    "href": "Preliminaries/01-modeling-change.html#exercises",
    "title": "2  Modeling change",
    "section": "2.4 Exercises",
    "text": "2.4 Exercises\n\n\n\nExercise XX.XX: YU5NCD unassigned\n\nFor each of the following, say whether the quantity is a pure number or has units. If it has units, say what kind of physical quantity is being represented.\n\n17.3\n\\(\\pi\\)\n9 feet\n8 \\(\\mu\\)m\n12.2 gm\n37\\(^\\circ\\) C\n43 sec\n\n\n\n\n\nExercise XX.XX: zbkNpV unassigned\n\nHere are some function definitions in the format we will use in this book. For each, say what is the name of the function being defined, what are the names of the inputs to the function, and what are the names, if any, of the parameters used in the definition.\n\n\\(h(x) \\equiv 3 x + 2\\)\n\\(\\text{line}(x) \\equiv m x + b\\)\n\\(\\text{wave}(t) \\equiv A \\sin(2 \\pi t/ P)\\)\n\\(\\text{plane}(x, y) \\equiv a + bx + cy\\)\n\\(f_1(z) = z^n\\)\n\n\n\n\nExercise 1.1: VDKUI unassigned\n\nFor each of the following function definitions, what is the input name?\n\n\nQuestion A Input name in \\(g(t) \\equiv 2 t^2 + 8\\)?\n    t\\(\\heartsuit\\ \\)       u︎✘        v︎✘        w︎✘        x︎✘        y︎✘        z︎✘ \n\n\n\n\nQuestion B Input name in \\(\\line(z) \\equiv a z + b\\)?\n    t︎✘        u︎✘        v︎✘        w︎✘        x︎✘        y︎✘        z\\(\\heartsuit\\ \\)\n\n\n\n\nQuestion C Input name in \\(h(t) \\equiv 2 t^2 + 8 w\\)?\n    t\\(\\heartsuit\\ \\)       u︎✘        v︎✘        w︎✘        x︎✘        y︎✘        z︎✘ \n\n\n\n\nQuestion D Input name in \\(f(u) \\equiv a u + b + u^2\\)?\n    t︎✘        u\\(\\heartsuit\\ \\)       v︎✘        w︎✘        x︎✘        y︎✘        z︎✘ \n\n\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question E Input name in \\(g(w) \\equiv x + 4\\)?\n\nt︎✘ \n\nu︎✘ \n\nv︎✘ \n\nwRight! \n\nx︎✘ Tricked you! It’s the name in the parentheses on the left side of \\(\\equiv\\) that matters. Evidently, the output of \\(g(w)\\) doesn’t depend on \\(w\\). That’s not much of a relationship, but it is a common one.\n\ny︎✘ \n\nz︎✘  ::: :::\n\n\n\n\n\nExercise XX.XX: 37DC14 unassigned\n\n\nDemonstrate that between any two integers \\(a\\) and \\(b\\) there is a rational number. (Hint: Do some arithmetic with \\(a\\) and \\(b\\) to construct such a rational number.)\nDemonstrate that between any two rational numbers \\(a/b\\) and \\(c/d\\) there is another rational number. (Hint: Construct such a rational number by arithmetic.)"
  },
  {
    "objectID": "Preliminaries/02-notation.html",
    "href": "Preliminaries/02-notation.html",
    "title": "3  Notation & computing",
    "section": "",
    "text": "\\(\\newcommand{\\line}{\\text{line}} \\newcommand{\\hump}{\\text{hump}} \\newcommand{\\sigmoid}{\\text{sigmoid}} \\newcommand{\\recip}{\\text{recip}} \\newcommand{\\diff}[1]{{\\cal D}_#1} \\newcommand{\\pnorm}{\\text{pnorm}} \\newcommand{\\dnorm}{\\text{dnorm}} \\let\\origvec\\vec \\let\\origmathit\\mathit \\let\\orighat\\hat \\let\\origbar\\bar \\newcommand{\\vec}[1]{\\overset{{\\rule[-1pt]{0mm}{1mm}}\\rightharpoonup}{\\mathbf{#1}}} \\newcommand{\\bar}[1]{\\overset{{\\rule[-1pt]{12pt}{.5mm}}}{\\mathbf{#1}}} \\newcommand{\\mathit}[1]{\\underset{\\leftharpoondown}{\\overset{{\\rightharpoonup}}{\\large\\mathbf #1}}} \\newcommand{\\hat}[1]{\\widehat{\\ \\mathbf#1\\ }} \\newcommand{\\len}[1]{{\\|{\\mathbf #1}\\|}} \\newcommand{\\tvec}[1]{\\overset{\\uparrow}{\\mathbf #1}} \\newcommand{\\tmat}[1]{\\overset{\\leftrightarrows}{\\mathbf #1}} \\newcommand{\\perpendicularto}[2]{#1\\!\\perp\\!#2} \\newcommand{\\modeledby}[2]{#1\\!\\sim\\!#2} \\newcommand{\\CC}[1]{\\color{#648fff}{#1}} \\newcommand{\\CE}[1]{\\color{#785ef0}{#1}} \\newcommand{\\CA}[1]{\\color{#dc267f}{#1}} \\newcommand{\\CB}[1]{\\color{#fe6100}{#1}} \\newcommand{\\CD}[1]{\\color{#ffb000}{#1}}\\)\nIn addition to the specialized words we will use to express concepts and uses of calculus, we will also make extensive use of mathematical and computer-language notation. This chapter introduces you to the notation we’ll be using.\nOne goal of good notation is to make clear which of these object types it is referring to. Another goal is to build on what you already know about how mathematics is written. For historical reasons these two goals are sometimes in conflict.\nYet another goal for notation has to with the central role of computing in the contemporary technical environment. Ideally, the mathematical notation we use should extend directly to computer-language notation. But in practice there is an incompatibility stemming from two sources:\nWe’ll attempt to use mathematical notation in a way that limits the conflict between tradition and computer notation. This conflict is particularly acute when it comes to the idea of an “equation,” so widely used in high-school mathematics but not a component of mainstream computer languages."
  },
  {
    "objectID": "Preliminaries/02-notation.html#functions-inputs-and-quantities",
    "href": "Preliminaries/02-notation.html#functions-inputs-and-quantities",
    "title": "3  Notation & computing",
    "section": "3.1 Functions, inputs, and quantities",
    "text": "3.1 Functions, inputs, and quantities\nOur style of notation will be to give functions and their inputs explicit names. The basic principle is that a function name is a sequence of letters followed by an empty pair of parentheses, for instance \\(\\sin()\\) an \\(\\ln()\\).\nTraditional mathematical notation writes many functions both without a name and without the parentheses. Examples that you have likely seen are \\(x^2\\), \\(\\sqrt{\\strut x}\\), and \\(e^x\\). If we were to absolutely impose the name/parentheses principle we would refer to these functions as, say, square() and sqrt() and exp(). Notice that the \\(x\\) is not part of the name.\nSometimes will will use names like square() just to emphasize the point that we are talking about a function. But for the most part we will stick to the traditional form because it is ubiquitous and recognizable by most readers.\nThe name/parentheses notation, like exp() or sin() allows us to avoid having to write \\(x\\) as the indicator of where the input to the function goes. That’s helpful because, after all, the actual input might be something completely different from \\(x\\).\nStill, there are times in which we do need to state the name of the input to functions. One of these is when defining a function. To define a function, we will use an expression like \\[g(y) \\equiv y \\cos(y)\\ .\\] On the left of the \\(\\equiv\\) goes the name of the function, with the name of the input(s) in parentheses. On the right of \\(\\equiv\\) goes a formula for computing the output from the input. This formula is written in terms of the input name given on the left side of the definition.\nIn situations where there is just one input to a function, as in \\(g()\\) above, we could use any name for the input. For instance, all of these are exactly equivalent to the definition for \\(g()\\) given above:\n\\[g(x) \\equiv x \\cos(x)\\\\\ng(z) \\equiv z \\cos(z))\\\\\ng(zebra) \\equiv zebra\\ \\cos(zebra)\\]\nWe’ll tend to avoid hard-to-read input names like \\(zebra\\). Instead, we’ll mostly use :\n\n\\(\\large x\\) or \\(\\large y\\) or \\(\\large z\\).\n\\(\\large t\\). This name is typically used when the input is meant to be time. So if we were creating a function to represent the relationship between time (of day) and outdoor brightness, we might use this notation: \\(\\text{brightness}(t)\\)\n\nOther input names we will use often in this book include \\(u\\), \\(v\\), \\(w\\), following the 17th-century convention introduced by Newton that input names come from the end of the alphabet. But we won’t shy away from more descriptive names, like \\(T\\) for “temperature” or \\(V\\) for volume, or even \\(\\text{altitude}\\) (which describes itself).\nWhen a function has more than one input, the input names serve to indicate where each input goes in the formula defining the calculation. For instance: \\[h(x, y) \\equiv x^2 e^y\\ .\\] \\(h()\\) is a completely different function than, say, \\(f(x, y) \\equiv y^2 e^x\\).\nYou may have noticed that we’ve used the names \\(f()\\), \\(g()\\), and \\(h()\\) a lot. Consider these names to be the equivalent of pronouns in English like “this”, “that”, “it”, and so on. Function names like \\(f()\\) or \\(F()\\) will be used when we need to refer to a function for a moment: a sentence, a paragraph, a section.\nWe will also have many occasions where we need to give a name to a quantity. Of course, a quantity is different from a function; functions are relationships between quantities.\nFor example, we will use names for quantities that are parameters in a function, like: \\[g(x) \\equiv a x^2 + b x + c\\ .\\] Here, \\(x\\) is the name given to the input to \\(g()\\), while \\(a\\), \\(b\\), and \\(c\\) are names for other quantities involved in the formula.\nAgain following Newton’s convention, names for quantities will come from the beginning of the alphabet. For instance, here is a definition of a function called a “cubic polynomial”: \\[h(x)\\equiv a + b x + c x^2 + d x^3\\ .\\] But there will be occasions where we need to compare two or more functions and run out of appropriate names from the start of the alphabet. A way to keep things organized is to use subscripts on the letters, for instancecomparing \\[g(x) \\equiv a_0 + a_1 x^2 + a_2 x^2 + a_3 x^3 + a_4 x^4\\] to \\[f(x) \\equiv b_0 + b_1 x^2 + b_2 x^2\\ .\\]\nOther ways professionals expand the set of letters from the start of the alphabet:\n\nUse capital letters: \\(A\\), \\(B\\), \\(C\\), and so on\nUse Greek letters: \\(\\alpha\\), \\(\\beta\\), \\(\\gamma\\), \\(\\delta\\), …"
  },
  {
    "objectID": "Preliminaries/02-notation.html#function-output",
    "href": "Preliminaries/02-notation.html#function-output",
    "title": "3  Notation & computing",
    "section": "3.2 Function output",
    "text": "3.2 Function output\nWe will often apply a function to  specific input quantities in order to produce an output from the function. An equivalent phrase is evaluate a function on an input. For instance, to apply the function \\(g()\\) to the input quantity 3, any of the following mathematical expressions might be used: \\[g(3)\\ \\ \\ \\text{or}\\ \\ \\ \\ g(x=3) \\ \\ \\ \\text{or}\\ \\ \\ \\ g(x)\\left.\\Large\\strut\\right|_{x=3}\\ .\\] Remember that \\(g(3)\\) or its equivalents are not themselves functions. They are the quantity that results from applying a the function to an input quantity."
  },
  {
    "objectID": "Preliminaries/02-notation.html#inputs-arguments-and-variables",
    "href": "Preliminaries/02-notation.html#inputs-arguments-and-variables",
    "title": "3  Notation & computing",
    "section": "3.3 Inputs, arguments, and variables",
    "text": "3.3 Inputs, arguments, and variables\nIn everyday speech, an “argument” is a discussion between people with differing views. But in mathematics and computing, argument means something else entirely: it is a synonym for “input to a function.”\nIn this text, we’ll mostly use “input” to refer to what goes into a mathematical function, although using “argument” would be fine. As regards computer functions … In Section @ref(makefun) you’ll see how to instruct the computer to create a mathematical function like \\(g()\\) or \\(f()\\) from the previous section. The names and format of such instructions—e.g. make a mathematical function from a formula, draw a graph of a function, plot data—are given in the same function notation we use in math. For example, makeFun() constructs a function from a formula, slice_plot() graphs a function, gf_point() makes one style of data graphic. These R entities saying “do this” are also called “functions.”\nWhen referring to such R “do this” functions, we’ll refer to the stuff that goes in between the parentheses as “arguments.” The word “input” would also be fine. The point of using “input” for math functions and “argument” for R “do this” functions is merely to help you identify when we are talking about mathematics and when we are talking about computing.\nA word we will not make much use of is “variable.” You are probably used to statements like, “\\(x\\) and \\(y\\) are the variables,” and it will take you a while to stop using them reflexively. The reason we will use “input” or “argument” instead of “variable” is that variable means too many different things in different contexts. For instance, in the algebra-course instruction, “Solve \\(3x - 2 = x^2\\),” the \\(x\\) is really a quantity, unknown at first but soon to be resolved by your algebraic skills. The \\(x\\) in the solving problem would often be called a “variable,” but it’s not at all an “input” or an “argument.”\nThere are two contexts in which we will use “variable,” neither of which has to do with inputs to functions. In talking about data, we will use “variable” in the statistical sense, meaning “a type of quantity” like height or pH. And in the final part of the text, involving system whose configuration changes in time, we’ll use “variable” in the sense of “a quantity that varies over time.”"
  },
  {
    "objectID": "Preliminaries/02-notation.html#computing-commands-and-evaluation",
    "href": "Preliminaries/02-notation.html#computing-commands-and-evaluation",
    "title": "3  Notation & computing",
    "section": "3.4 Computing: commands and evaluation",
    "text": "3.4 Computing: commands and evaluation\nMathematical notation is effective for describing functions and operations, but computing notation provides a way to go beyond the description to actually carry out the operations. Computer notation will be an equal partner to mathematical notation in MOSAIC Calculus.\nWith computers, writing an expression in computer notation goes hand-in-hand with evaluating the notation. We’ll start with the simplest mode of evaluation, where you are writing the expression in the console for the language. Figure @ref(fig:R-console) shows and example the console tab provided by the RStudio application.\n\n\n\n\n\nFigure 3.1: An RStudio console tab for writing expressions and evaluating them. The > is the prompt after which you write your expression, here shown in \\(\\color{blue}{\\text{blue}}\\). Pressing the “return” key causes the language interpreter to evaluate the command.\n\n\n\n\nIn Figure 3.1 we have come in to the story in the middle of the action. To start, there was just a prompt character.\n\\(\\color{blue}{\\mathtt >}\\)\nThe person at the keyboard then typed a simple expression: 2 + 3\n\\(\\color{blue}{\\mathtt >\\  2 + 3}\\)\nHaving completed the expression, the keyboarder presses “return.” The RStudio application sends the expression to the software that “interprets” it according to the rules of the R language. Since 2 + 3 is a complete, valid R expression, the R-language software carries out the action specified—adding 2 and 3—and returns the result to RStudio, which displays it just below the expression itself. \\(\\color{blue}{\\mathtt >\\  2 + 3}\\\\\\mathtt{[1]\\ 5}\\)\nNote that the value of the expression is simply the number 5. The R language is set up to format numbers with an index, which is helpful when the value of the expressions is a large set of numbers. In the case here, with just a single number in the result of evaluating the expression, the index is simply stating the obvious.\nHaving printed the result of evaluating the 2 + 3 expression, RStudio shows another prompt, signally that it’s ready for you to enter your next expression. In Figure 3.1) we’re seeing the console after the person at the keyboard has responded to the prompt by writing another expression, pressed return, had RStudio print the value of that expression, and displayed a new prompt.\nThe two expressions shown in the console in Figure 3.1 both evaluate to single numbers. We say, “the command returns a value.” The command is a valid R expression followed by the instruction (“Return”) to evaluate the command. The value of the expression is the result of evaluating the command.\nAnother common form of R expression is called assignment. An assignment means “giving a name to a value.” It’s done with a more complicated expression, like this:\n\nb <- 22/7\n\nThe result of evaluating this command is to store in the computer memory, under the name b, the value of 22/7. Because the value is being stored, R is designed not to display the value as happened with the first two commands in the console. If you want to see the value printed out, give the name as a command:\n\nb\n## [1] 3.142857\n\n\nThis book displays the command being evaluated in a gray box, without a prompt. The value returned by the command is displayed underneath the command, prefaced by \\(\\color{red}{\\mathtt{\\#\\#}}\\). In the book formatting, the four commands we have just described would be displayed in this way:\n\n2 + 3\n## [1] 5\nsqrt(16)\n## [1] 4\nb <- 22/7\nb\n## [1] 3.142857\n\n\n\n\nWhen reading this book, take care to distinguish between the display of a command and the display of the value returned by that command. The first is something you type, the second is printed by the computer."
  },
  {
    "objectID": "Preliminaries/02-notation.html#makefun",
    "href": "Preliminaries/02-notation.html#makefun",
    "title": "3  Notation & computing",
    "section": "3.5 Functions in R/mosaic",
    "text": "3.5 Functions in R/mosaic\nOne of the fundamental mathematical operations in this book is defining functions. You’ve already seen the way we use mathematical notation to define a function, for instance, \\[h(t) \\equiv 1.5\\, t^2 - 2\\ .\\] The R/mosaic equivalent to the definition of \\(h()\\) is: ::: {.cell layout-align=“center” fig.showtext=‘false’}\n\nh <- makeFun(1.5*t^2 - 2 ~ t)\n::: Once you have defined a function, you can evaluate it on an input. The R notation for evaluating functions is exactly the same as with mathematical notation, for instance,\n\nh(4)\n## [1] 22\n\nor\n\nh(t=4)\n## [1] 22\n\nThere are obvious differences, however, between the mathematical and computing notation used to define a function. All the same information is being provided, but the format is different. That information is:\n\nthe name of the function: \\(h()\\) or h. When writing the name of a computer-defined function, we’ll put the reminder parentheses after the name, as in h().\nthe name of the input to the function: \\(x\\) or x\nthe calculation that the function performs, written in terms of the input name. \\(1.5 t^2 -2\\) or 1.5 * t^2 - 2.\n\nLaying out the two notation forms side by side let’s us label the elements they share:\n\n\n\n\n\n\n\n\n\nFor the human reading the mathematical notation, you know that the statement defines a function because you have been told so. Likewise, the computer needs to be told what to do with the provided information. That’s the point of makeFun(). There are other R/mosaic commands that could take the same information and do something else with it, for example create a graph of the function or (for those who have had some calculus) create the derivative or the anti-derivative of the function.\n\nIn R, things like makeFun() are called “functions” because, like mathematical functions, they turn inputs into outputs. In the case of makeFun(), the input is a form called a tilde expression, owing to the character tilde (~) in the middle. On the right-hand side of the tilde goes the name of the input. On the left-hand side is the R expression for the formula to be used, written as always in terms of the input name. The whole tilde expression is taken as the one argument to makeFun(). Although it may seem odd to have punctuation in the middle of an argument, remember that something similar happens when we write \\(h(t=3)\\)."
  },
  {
    "objectID": "Preliminaries/02-notation.html#names-and-assignment",
    "href": "Preliminaries/02-notation.html#names-and-assignment",
    "title": "3  Notation & computing",
    "section": "3.6 Names and assignment",
    "text": "3.6 Names and assignment\nThe command\n\nh <- makeFun(1.5*t^2 - 2 ~ t)\n\ngives the name h to the function created by makeFun(). Good choice of names makes your commands much easier for the human reader.\nThe R language puts some restrictions on the names that are allowed. Keep these in mind as you create R names in your future work:\n\nA name is the only2 thing allowed on the left side of the assignment symbol <-.\nA name must begin with a letter of the alphabet, e.g. able, Baker, and so on.\nNumerals can be used after the initial letter, as in final4 or g20. You can also use the period . and underscore _ as in third_place. No other characters can be used in names: no minus sign, no @ sign, no / or +, no quotation marks, and so on.\n\nFor instance, while third_place is a perfectly legitimate name in R, the following are not: 3rd_place, third-place. But it’s OK to have names like place_3rd or place3, etc., which start with a letter.\nR also distinguishes between letter case. For example, Henry is a different name than henry, even though they look the same to a human reader."
  },
  {
    "objectID": "Preliminaries/02-notation.html#formulas-in-r",
    "href": "Preliminaries/02-notation.html#formulas-in-r",
    "title": "3  Notation & computing",
    "section": "3.7 Formulas in R",
    "text": "3.7 Formulas in R\nThe constraint of the keyboard means that computer formulas are written in a slightly different way than the traditional mathematical notation. This is most evident when writing multiplication and exponentiation. Multiplication must always be indicated with the * symbol, for instance \\(3 \\pi\\) is written 3*pi. For exponentiation, instead of using superscripts like \\(2^3\\) you use the “caret” character, as in 2^3. The best way to learn to implement mathematical formulas in a computer language is to read examples and practice writing them.\nHere are some examples:\n\n\n\nTraditional notation\nR notation\n\n\n\n\n\\(3 + 2\\)\n3 + 2\n\n\n\\(3 \\div 2\\)\n3 / 2\n\n\n\\(6 \\times 4\\)\n6 * 4\n\n\n\\(\\sqrt{\\strut4}\\)\nsqrt(4)\n\n\n\\(\\ln 5\\)\nlog(5)\n\n\n\\(2 \\pi\\)\n2 * pi\n\n\n\\(\\frac{1}{2} 17\\)\n(1 / 2) * 17\n\n\n\\(17 - 5 \\div 2\\)\n17 - 5 / 2\n\n\n\\(\\frac{17 - 5}{\\strut 2}\\)\n(17 - 5) / 2\n\n\n\\(3^2\\)\n3^2\n\n\n\\(e^{-2}\\)\nexp(-2)\n\n\n\nEach of these examples has been written using numbers as inputs to the mathematical operations. The syntax will be exactly the same when using an input name such as x or y or altitude, for instance (x - y) / 2. In order for that command using x and y to work, some meaning must have been previously attached to the symbols. We’ll come back to this important topic on another day."
  },
  {
    "objectID": "Preliminaries/02-notation.html#exercises",
    "href": "Preliminaries/02-notation.html#exercises",
    "title": "3  Notation & computing",
    "section": "3.8 Exercises",
    "text": "3.8 Exercises\n\n\nExercise 2.1: TKWEW unassigned\n\nUse the MOSAIC Calculus naming conventions to answer these questions.\n\n\nQuestion A What is \\(h()\\)?\n\nThe name of a functionExcellent! Right. Typically we use \\(f()\\), \\(g()\\), \\(h()\\) or something similarly generic to stand for a function that we’re going to be working with for a little while. Think of these as pronouns. Just as we can say, meaningfully, “She gave it to him,” we can say \\(h(x) \\equiv f(x) + g(2*x)\\)\n\nThe name of an input.︎✘ Sorry, these will usually be letters like \\(x\\), \\(y\\), \\(t\\).\n\nA specific numerical value︎✘ Sorry, but we’ll use constructions with a subscript like \\(x_0\\) or \\(y_\\star\\) and the like for these.\n\n\n\n\n\nQuestion B How come we write \\(f()\\) for the name of a function rather than just \\(f\\) or \\(f(x)\\)?\n\nNo good reason︎✘ We certainly intend with the empty parentheses to remind the reader that a name refers to a function. If you spot a place where we violate this intention, point it out to us.\n\nIt’s a reminder that we’re talking about a function with the name “\\(f\\)”.Nice! \n\nThe parentheses are part of the name.︎✘ Not at all. Names in R never contain parentheses. So f, fbar, fred are all valid names in an R command, but f() is not. We use the parentheses when writing to a human audience as a reminder that the name is referring to a function. The computer doesn’t need any such reminders\n\n\n\n\n\nQuestion C What sort of thing is denoted by \\(x_0\\) or \\(y_\\star\\) or \\(y_{max}\\)?\n\nA particular numerical valueRight! Right. For instance, it might be the particular value for the input to a function which produces an output of zero. Or it might be a particular location in the domain of a function.\n\nThe name of an input︎✘ Sorry. We won’t typically use subscripts when referring to an input name.\n\n\n\n\n\nQuestion D Which of these symbols might stand for the entire domain of a function?\n\n\\(y\\)Correct. Right. Another term to use for a symbol standing for a domain is “name of an input”.\n\n\\(f()\\)︎✘ No, this is how we write the name of the function called “\\(f\\)”\n\n\\(y_0\\)︎✘ No. \\(y_0\\) might be used to stand for a single point in the domain.\n\n\n\n\n\nQuestion E Suppose you come across \\(v(w) \\equiv w + 3\\) in this book. What do \\(v\\) and \\(w\\) stand for?\n\n\\(v()\\) is the name of a function and \\(w\\) is the name of the input to that function.Right! Right. Whenever we write something like “name(another_name) \\(\\equiv\\)”, we’re saying explicitly that “name” refers to a function and “another_name” refers to an input.\n\nIt’s meaningless.︎✘ We’ll try not to write meaningless mathematical expressions. If we do by mistake, let us know.\n\nIt’s the same thing as \\(v = w + 3\\).︎✘ \\(v = w+3\\) is an equation. But \\(v(w) \\equiv w+3\\) is the format for defining a function named \\(v()\\).\n\n\n\n\n\nQuestion F Are \\(g(x) \\equiv x^2\\) and \\(h(w) \\equiv w^2\\) the same function?\n\nYes, although that function is being given two different names.Right! The only thing that’s significant about the name of an input is that it be used consistently in the function algorithm.\n\nOf course not!︎✘ Sorry. I suppose you might ask, “What do you mean by the same function?” Remember that a function is a relationship between inputs and the output. \\(g(x) \\equiv x^2\\) and \\(h(w) \\equiv w^2\\) describe exactly the same relationship: the output will be the square of the input.\n\n\n\n\n\n\nExercise 2.2: LDNE unassigned\n\nAccording to the notation style we use in CalcZ, which of these things is a function? Which a number?\n\n\nQuestion A What kind of a thing is \\(\\sqrt{z}\\)?\n\nA functionCorrect. \n\nA number︎✘ \\(z\\) is one of the standard names we will use for an input to a function. If we had given the function a name, for instance \\(g(z) \\equiv \\sqrt{z}\\), we would be able to tell from the \\((z)\\) that \\(g()\\) is a function. But whenever we use a standard input name, the expression is a function.\n\n\n\n\n\nQuestion B What kind of a thing is \\(\\sqrt{y^\\star}\\)?\n\nA numberGood. \n\nA function︎✘ According to our convention, the name \\(y^\\star\\) refers to a particular value as opposed to the name of a function input.\n\n\n\n\n\nQuestion C What kind of a thing is \\(e^{k t}\\)?\n\nA functionNice! \n\nA number︎✘ The letter \\(t\\) is one of our standard letters for input names. \\(k\\) is a letter, but since it is not from the end of the alphabet, you have a hint that it is intended to be a parameter, that is a symbol representing a specific numerical quantity.\n\n\n\n\n\nQuestion D What kind of a thing is \\(k\\) in the definition \\(g(k) \\equiv e^k\\)?\n\nA number︎✘ \n\nThe name of an input to a function.Right! \n\nA function︎✘ Notwithstanding our convention that \\(k\\) is not on its own a name used for inputs, when we use the full function-definition style, anything in the parentheses following the function name is explicitly stated as an input name.\n\n\n\n\n\n\nExercise 2.3: kZG5Fj unassigned\n\nThe following traditional-style notation is intended to define a function that is 2 times the pattern-book sinusoid. But something is wrong.\n\\[g(t) \\equiv 2 \\sin(x)\\]\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question A What’s wrong with the definition?\n\n\\(g()\\) isn’t an appropriate name︎✘ You can name functions what you like.\n\nThe formula should be written \\(2 \\times \\sin(x)\\)︎✘ You are welcome to write things that way if you want to emphasize the multiplication, but you don’t have to. On the other hand, in R it would be absolutely required to write the multiplication operator: 2 * sin(x).\n\n\\(t\\) is not a good choice for the input name.︎✘ It’s a fine choice, especially when the input is time.\n\nThe input name in the formula doesn’t match the input name on the left side of \\(\\equiv\\).Right! That’s it. Once you choose an input name (here, \\(t\\)), make sure to write the formula in terms of that name. ::: :::\n\n\n\n\nExercise 2.4: aeOnO5 unassigned\n\nConsider this expression in math notation:\n\n\\[\\frac{e^{k t}}{k}\\]\n\n\n\nQuestion A Which of the following R expressions implements the math-notation expression?\n\nk exp(kt)︎✘ You must always express multiplication explicitly, using * between the quantities to be multiplied.\n\ne^k*t / k︎✘ Use exp(x) for \\(e^x\\).\n\nexp(k t) / k︎✘ k t should be written k*t\n\nexp(k*t) / kCorrect. \n\n1/k e^kt︎✘ 1) Use * for multiplication. 2) Use exp(x) for \\(e^x\\).\n\n\n\n\n\n\nExercise 2.5: ooJK5d unassigned\n\nSuppose you want to define a straight-line function named \\(f()\\) such that \\(f(x)\\equiv m x + b\\). Each of the following R statements is incorrect for this purpose. Say why.\n\n\nQuestion A f <- m*x + b\n\nNeed to use makeFun() to define a function.Nice! \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nShould be y <- m*x + b.︎✘ \n\n\n\n\n\nQuestion B f <- makeFun(m*x + b)\n\nThe first argument to makeFun() should be a tilde expression.Good. \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nmakeFun() requires two inputs.︎✘ No, but it does require a tilde expression input.\n\n\n\n\n\nQuestion C f <- makeFun(x ~ m*x + b)\n\nThe tilde expression should have the input name on the right-hand side of the ~.Excellent! \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nThe first argument is not a tilde expression.︎✘ Actually, it is a tilde expression, just not the right sort of tilde expression.\n\n\n\n\n\nQuestion D f <- makeFun(mx + b ~ x)\n\nThe tilde expression is missing the multiplication operator * between m and xRight! \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nThe name f is mis-spelled.︎✘ \n\n\n\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question E f <- makeFun(b*x + m ~ x)\n\nThe roles of m and b have been reversed.Good. \n\nm is not defined.︎✘ \n\nb is not defined.︎✘ \n\nx is not defined.︎✘  ::: :::\n\n\n\n\n\nExercise 2.6: BXCA4 unassigned\n\nOpen a SANDBOX. (Just click on that link, although you may eventually be given other ways to open a sandbox.)\n\nWhen you see a breakout box like this, it means that we’re providing some computer code that you can paste into a sandbox and run. For this exercise, that code is\n\nx <- 2\nsin(x)*sqrt(x)\n\nPaste those two lines into the sandbox and press “Run code.” Verify that you get this as a result:\n[1] 1.285941\n\nEach line that you pasted in the sandbox is a command. The first command gives a value to \\(x\\). The second command uses that value for \\(x\\) to calculate a function output. The function is \\(g(x)\\equiv \\sin(x) \\times \\sqrt{\\strut x}\\).\n\nWhy not simplify the above code to the single line sin(2)*sqrt(2)? This would produce the same output but would introduce an ambiguity to the human reader. We want to make it clear to the reader (and the computer) that whatever \\(x\\) might be, it should be used as the input to both the \\(\\sin()\\) and the \\(\\sqrt{\\strut\\ \\ \\ }\\) functions.\n\nIn the following questions, numbers have been rounded to two or three significant digits. Select the answer closest to the computer output.\n\n\nQuestion A Change \\(x\\) to 1. What’s the output of \\(\\sin(x) \\ \\sqrt{\\strut x}\\)\n    -1.51︎✘        0.244︎✘        0.84\\(\\heartsuit\\ \\)       0.99︎✘        2.14︎✘        NaN︎✘ \n\n\n\n\nQuestion B Change \\(x\\) to 3. What’s the output of \\(\\sin(x) \\  \\sqrt{\\strut x}\\)\n    -1.51︎✘        0.244\\(\\heartsuit\\ \\)       0.84︎✘        0.99︎✘        2.14︎✘        NaN︎✘ \n\n\n\n\nQuestion C Change \\(x\\) to \\(-5\\). What’s the output of \\(\\sin(x) \\  \\sqrt{\\strut x}\\)\n\n-1.51︎✘ \n\n0.244︎✘ \n\n0.84︎✘ \n\n0.99︎✘ \n\n2.14︎✘ \n\nNaNRight! This stands for Not-a-Number, which is what you get when you calculate the square root of a negative input.\n\n\n\nIn the sandbox, change the function to be \\(\\sqrt{\\strut\\pnorm(x)}\\).\n::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display} Question D For \\(x=2\\), what’s the output of \\(\\sqrt{\\strut\\pnorm(x)}\\)?\n    -1.51︎✘        0.244︎✘        0.84︎✘        0.99\\(\\heartsuit\\ \\)       2.14︎✘        NaN︎✘  ::: :::\n\n\n\nExercise 2.7: 0V510o R formula notation\n\nUsing the R console, translate each of the following mathematical expressions into R in order to calculate the numerical value of the expression.\n\n\\((16 - 3)/2\\) \n\\(\\sqrt{\\frac{19}{3}}\\) \n\\(\\cos(\\frac{2 \\pi}{3})\\) \n\\(\\pi^3 + 2\\) \n\\(\\pi^{3+2}\\) \n\n\n\n\nExercise 2.8: Ce79t3 makeFun()\n\nEach of these attempts to define a mathematical function using R leads to an error message. Modify the statement so that it works properly.\n\nf(x) <- makeFun(2*x + 3 ~ x)\nh <- makeFun(x ~ 2*x + 3)\nf <- makeFun(2x + 3)\ng(x) <- makeFun(4 sin(x))\nh2 <- 2*x + 3 ~ x\ng2 <- makeFun(2*x + 3 ~ y)\np(x,y) <- makeFun(2 x + 3 y~ x & y)\n\n\n\n\n\nExercise 2.9: BaEJkS unassigned\n\n\nMake this an exercise on “when things go wrong.”\n\nWhen your R command is not a complete sentence, the SANDBOX will display an error like this:\nError in parse(text = x, keep.source = TRUE) : :5:0: unexpected end of input \nThe “unexpected end of input” is the computer’s way of saying, “You haven’t finished your sentence so I don’t know what to do.”\nEach of these R expressions is incomplete. Your job, which you should do in a sandbox, is to turn each into a complete expression. Sometimes you’ll have to be creative, since when a sentence is incomplete you, like the computer, don’t really know what it means to say! But each of these erroneous expressions can be fixed by adding or changing text.\nOpen a sandbox and copy each of the items below, one at a time, into a sandbox. Press “Run code” for that item and verify that you get an error message.\nFor the first item, the sandbox will look like this:\n\n\n\n\n\nRunning an invalid command will produce an error message.\n\n\n\n\nThen, fix the command so you get a numerical result rather than the error message.\nWorking through all of these will help you develop an eye and finger-memory for R commands.\n\nsin 3\n((16 - 4) + (14 + 2) / sqrt(7)\npnorm(3; mean=2, sd=4)\nlog[7]\n14(3 + 7)\ne^2\n3 + 4 x + 2 x^2"
  },
  {
    "objectID": "Preliminaries/02-notation.html#drill-questions",
    "href": "Preliminaries/02-notation.html#drill-questions",
    "title": "3  Notation & computing",
    "section": "3.9 Drill questions",
    "text": "3.9 Drill questions\n\n\nQuestion i Which of these is the symbol for “is defined as”?\n\n\\(=\\)︎✘ An equals sign says that the two sides happen to be equal, not that the left side is defined as the right side.\n\n\\(\\equiv\\)Correct. Three parallel bars signify a definition.\n\n\\(\\sim\\)︎✘ \n\n\\(\\approx\\)︎✘ \n\n\n\n\n\nQuestion ii What is the name of the function defined by \\[f(y) \\equiv \\sin(y) + e^y \\ ?\\]\n\n\\(f\\)Correct. Note that we will usually write function names with trailing parentheses, like \\(f()\\), in order to remind you that \\(f\\) refers to a function rather than an input or parameter or whatever.\n\n\\(\\sin\\)︎✘ \n\n\\(f(y)\\)︎✘ This isn’t a function name. This is how we write the output from applying function \\(f()\\) to the input denoted by the name \\(y\\).\n\n\n\n\n\nQuestion iii How do we refer to the output generated by applying \\(g(x) \\equiv x+3\\) to the input 3?\n\n\\(g(x)\\)︎✘ \n\n\\(g(3)\\)Correct.  \n\n\\(y = 6\\)︎✘ It’s a habit from high-school math to use the name \\(y\\) for outputs. Breaking that habit will help you learn and use calculus.\n\n\n\n\n\nQuestion iv Is xx a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion v Is x_x a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion vi Is -x a legitimate name in R?\n\nTrue︎✘ \n\nFalseGood. The minus sign are other such symbols are not allowed characters in an R name.\n\n\n\n\n\nQuestion vii Is 3x a legitimate name in R?\n    True︎✘        False\\(\\heartsuit\\ \\)Names should start with a letter\n\n\n\n\nQuestion viii Is x3 a legitimate name in R?\n    True\\(\\heartsuit\\ \\)Numbers are OK in names, so long as the first character is a letter       False︎✘ \n\n\n\n\nQuestion ix Is sqrt a legitimate name in R?\n    True\\(\\heartsuit\\ \\)In fact, it is the name of an oft-used function in R.       False︎✘ \n\n\n\n\nQuestion x Is x + y a legitimate name in R?\n\nTrue︎✘ \n\nFalseExcellent! x + y is an R expression that uses names, but the expression is not itself a name.\n\n\n\n\n\nQuestion xi Is 3 * x a legitimate name in R?\n    True︎✘        False\\(\\heartsuit\\ \\)* and  are not acceptable characters in a name.\n\n\n\n\nQuestion xii Is xprime a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion xiii Is x prime a legitimate name in R?\n    True︎✘        False\\(\\heartsuit\\ \\)Names cannot have blank spaces internally.\n\n\n\n\nQuestion xiv Is dx a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion xv Is xx a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion xvi Is dx_f a legitimate name in R?\n    True\\(\\heartsuit\\ \\)        False︎✘ \n\n\n\n\nQuestion xvii What’s wrong with this assignment statement? x < 4\n    Nothing︎✘        It’s missing part of the <- token.\\(\\heartsuit\\ \\)         x is an improper name.︎✘ \n\n\n\n\nQuestion xviii What’s wrong with this assignment statement? 3*x <- 4\n\nNothing︎✘ The item to the left of <- needs to be a valid name. 3*x is not.\n\nIt should use addition instead of multiplication.︎✘ \n\nThe item to the left of <- needs to be a nameGood. 3 * x is an instruction to multiply 3 times x. It is not a name.\n\nThere’s no x on the right-hand side of the assignment arrow.︎✘ \n\n\n\n\n\nQuestion xix What’s wrong with this assignment statement? x -> 3+4\n\nNothing︎✘ \n\nYou can’t use addition in an assignment statement.︎✘ You can, but it has to be on the right side of the assignment, where you construct the value to be assigned to the name on the left side.\n\nThe assignment has to point toward the name, not the valueExcellent!  \n\n\n\n\n\nQuestion xx We can write something like \\(f(x) \\equiv x^2\\)  in mathematical notation. Is it legit in R to write f(x) <- x^2 ?\n\nYes, it’s fine.︎✘ \n\nf(x) is not a valid name in R.Excellent!  \n\nAlmost. You need to use () instead of <- .︎✘ There’s no symbol () on the keyboard or recognized in the R language.\n\n\n\n\n\nQuestion xxi Using our notation conventions from the textbook, which one of the following kinds of things is \\(y_0 ?\\)\n\nA constantExcellent!  \n\nA function name︎✘ \n\nAn input name︎✘ A subscript (like \\(_0\\) here) or non-numeric superscript (like \\(^\\star\\)) on what would otherwise be an input name will be instead a constant.\n\n\n\n\n\nQuestion xxii Using our notation conventions from the textbook, which one of the following kinds of things is \\(t^\\star?\\)\n\nA constantExcellent!  \n\nA function name︎✘ \n\nAn input name︎✘ A subscript (like \\(_0\\) here) or non-numeric superscript (like \\(^\\star\\)) on what would otherwise be an input name will be instead a constant.\n\n\n\n\n\nQuestion xxiii Using our notation conventions from the textbook, which one of the following kinds of things is \\(B ?\\)\n\nA constantGood.  \n\nA function name︎✘ \n\nAn input name︎✘ The letters from the start of the alphabet, a-d, or A-D will refer to a constant. \n\n\n\n\n\nQuestion xxiv Using our notation conventions from the textbook, which one of the following kinds of things is \\(F() ?\\)\n\nA constant︎✘ \n\nA function nameRight! Our standard pronouns for functions are \\(f(), g(), h()\\) and \\(F(), G(), H()\\)\n\nAn input name︎✘ \n\n\n\n\n\nQuestion xxv Using our notation conventions from the textbook, which one of the following kinds of things is \\(u ?\\)\n\nA constant︎✘ \n\nA function name︎✘ \n\nAn input nameCorrect. Letters from the end of the alphabet, \\(u, v, w, x, y, z\\), generally refer to an input to a function. But, remember, something like \\(x_0\\) will always be a constant.\n\n\n\n\n\nQuestion xxvi Can function names be multiple letters, e.g. g3() or altitude()?\n\nYesRight! And they often do. Almost all R functions have multi-letter names, like exp(), sin(), dnorm(), and such. When you are building a model, it’s helpful to use mnemonic function names rather than the usual pronouns like \\(f(), g()\\), an \\(h()\\). We use the short pronouns throughout the book whenever we are discussing general mathematical properties rather than specific models.\n\nNo︎✘ \n\n\n\n\n\nQuestion xxvii In the book, will input names have subscripts, like \\(x_0\\) or \\(u_2 ?\\)\n\nYes︎✘ \n\nNoRight! In the textbook, we try to reserve names like \\(x_0\\) or \\(u_2\\) for constants. But mathematics usage generally doesn’t always adopt this helpful convention.\n\n\n\n\n\nQuestion xxviii In the book, what is meant by the word “variable”?\n\nIt’s the same as input.︎✘ Use input rather than variable! Even if you’re used to calling quantities like \\(x\\) and \\(y\\) variables, it’s a confusing practice since it can mean so many different things. In calculus, in this course, we’ll try to be strict about using the words input and output\n\nIt’s the same as output.︎✘ \n\nA column in a data table.Correct. This is the use in statistics and data science. In calculus, we’ll try to avoid confusing by using input and output instead."
  },
  {
    "objectID": "Preliminaries/03-graphs-and-graphics.html",
    "href": "Preliminaries/03-graphs-and-graphics.html",
    "title": "4  Graphs and graphics",
    "section": "",
    "text": "\\(\\newcommand{\\line}{\\text{line}} \\newcommand{\\hump}{\\text{hump}} \\newcommand{\\sigmoid}{\\text{sigmoid}} \\newcommand{\\recip}{\\text{recip}} \\newcommand{\\diff}[1]{{\\cal D}_#1} \\newcommand{\\pnorm}{\\text{pnorm}} \\newcommand{\\dnorm}{\\text{dnorm}} \\let\\origvec\\vec \\let\\origmathit\\mathit \\let\\orighat\\hat \\let\\origbar\\bar \\newcommand{\\vec}[1]{\\overset{{\\rule[-1pt]{0mm}{1mm}}\\rightharpoonup}{\\mathbf{#1}}} \\newcommand{\\bar}[1]{\\overset{{\\rule[-1pt]{12pt}{.5mm}}}{\\mathbf{#1}}} \\newcommand{\\mathit}[1]{\\underset{\\leftharpoondown}{\\overset{{\\rightharpoonup}}{\\large\\mathbf #1}}} \\newcommand{\\hat}[1]{\\widehat{\\ \\mathbf#1\\ }} \\newcommand{\\len}[1]{{\\|{\\mathbf #1}\\|}} \\newcommand{\\tvec}[1]{\\overset{\\uparrow}{\\mathbf #1}} \\newcommand{\\tmat}[1]{\\overset{\\leftrightarrows}{\\mathbf #1}} \\newcommand{\\perpendicularto}[2]{#1\\!\\perp\\!#2} \\newcommand{\\modeledby}[2]{#1\\!\\sim\\!#2} \\newcommand{\\CC}[1]{\\color{#648fff}{#1}} \\newcommand{\\CE}[1]{\\color{#785ef0}{#1}} \\newcommand{\\CA}[1]{\\color{#dc267f}{#1}} \\newcommand{\\CB}[1]{\\color{#fe6100}{#1}} \\newcommand{\\CD}[1]{\\color{#ffb000}{#1}}\\)\nBefore we go much further in exploring the creation and uses of functions, let’s remember the general idea of mathematical modeling: the construction of mathematical representations of systems. The word “system” is familiar in everyday speech and is used to describe all manner of things: means of communication, ecology, politics, the workings of the market, etc. A “system” involves a group of related components that operates as a whole. For instance, the digestive system consists of body organs and reflexes that, collectively, transform food into the elementary substances needed for metabolism. In the economic theory of the market, components are prices, demand, and supply. These three components are not independent. Demand is related to price as is supply, both are what economists sometimes call “curves” but which we would call functions.\nKey steps in making a mathematical representation—a model—of a system involve identifying the system components and describing quantitatively the relationships among them. In brief, mathematical modeling is about describing the relationships between things.\nI’m going to make a reference to Figure 4.1\nThe smooth curve in Figure @ref(fig:FHN-curve) describes the relationship between current and voltage quantitatively. For example, if you know that the current is 0, you can use the curve to figure out what the voltage will be around -90 mV or -50 mV or -10 mV. But when current is 0, the voltage will not be, say, -75 or -150.\nGraphs such as Figures @ref(fig:CO2-phases) and @ref(fig:FHN-curve) are good ways of showing relationships. We can even do calculations simply using such graphs. Place your finger on a point of the S-shaped graph and you can read from the axes an allowed pair of voltage and current values. Place your finger on a point on the vertical axis. Moving it to the curve will reveal what current is associated with that voltage.\nFunctions are, like graphs, a ways of representing relationships. For all their advantages as a means of communication, graphs have their limits. With a graph it’s feasible only to show the relationship between two quantities or among three quantities. Functions, can involve more quantities. For instance, the triangle-area function \\[A(a,b,c) \\equiv \\frac{1}{4}\\sqrt{\\strut 4a^2b^2-(a^2+b^2-c^2)^2}\\] gives the relationship between four quantities: the area and the lengths of the triangle’s three sides.\nOn the other hand, functions cannot represent all types of relationships. For instance, the curve in Figure 4.2 shows a relationship between current and voltage in nerve cells. But there is no mathematical function voltage(current) that does justice to the relationship. The reason is that mathematical functions can have one and only one output for any given input. There are three reasonable values for membrane voltage that are experimentally consistent with a zero current, not just one.\nCare needs to be taken in using functions to represent relationships. For the nerve-cell current-voltage relationship, for instance, we can construct a function current(voltage) to represent the relationship. That’s because for any given value of voltage there is just one corresponding current. But there is no voltage(current) function, even though knowing the current tells you a lot about the voltage."
  },
  {
    "objectID": "Preliminaries/03-graphs-and-graphics.html#function-graphs",
    "href": "Preliminaries/03-graphs-and-graphics.html#function-graphs",
    "title": "4  Graphs and graphics",
    "section": "4.1 Function graphs",
    "text": "4.1 Function graphs\nGiven a function, it’s easy to draw the corresponding relationship as a graphic. This section describes how to do that for functions that have one or two inputs. The opposite—given a relationship, represent it using functions—is not always so easy and will require modeling techniques that we’ll develop in Block 1.\nContemporary practice is to draw graphs of functions using a computer. R/mosaic provides several functions that do this, you need only learn how to use them.\nThere are two essential arguments shared by all of the R/mosaic functions drawing a graph:\n\nThe function that is to be graphed. This is to be written as a tilde expression in exactly the same manner as described in Chapter ?notation-and-computing.\nThe domain interval. The domain of many functions reaches to infinity, but our computer screens are not so big! Making a graph requires choosing a finite interval for each of the input variables.\n\nThe tilde expression for a function with one input will have only one name on the right-hand side of the ~. The domain interval specification must use the same name:\n\n\n\nTilde expression\nDomain interval specification\n\n\n\n\nx^2 ~ x\ninterval(x = -3:3)\n\n\ny * exp(y) ~ y\ninterval(y = 0:10)\n\n\nlog(y) / exp(y) ~ y\ninterval(y = -5:5)\n\n\nsin(z) / z ~ z\ninterval(y = -3*pi:3*pi)\n\n\n\nTo draw a graph, use slice_plot() with the tilde expression as the first argument and the domain interval specification as the second argument. For instance,\n\nslice_plot(y * exp(y) ~ y, domain(y=0:10))\n\n\n\n\nFigure 4.3: Graph of the function \\(f(y) \\equiv y e^y\\). The domain of \\(f()\\) is the space of all real numbers. The graph, however, shows only a finite interval \\(0 \\leq y \\leq 10\\) of that domain.\n\n\n\n\nFunctions with two inputs can be displayed with contour_plot(). Naturally, the tilde expression defining the function will have two names on the right-hand side of ~. Similarly, the domain specification will have two arguments, one for each of the names in the tilde expression.\n\ncontour_plot(exp(-z)*sin(y) ~ y & z, domain(y=-6:6, z=0:2))\n\n\n\n\nFigure 4.4: Contour plot of a function with two inputs \\(g(y,z) \\equiv e^{-z}\\sin(y)\\)\n\n\n\n\nContour plots will be a preferred format for displaying functions with two inputs. The main reason to prefer contour plots is the ease with which locations of points in the input space can be identified and the ability to read output values without much difficulty.\nThere’s another way to think about graphing functions with two inputs. There are in such a situation three quantities involved in the relationship. Two of these are the inputs, the third is the output. A three-dimensional space consists of all the possible triples of point; the relationship between the inputs and the output is marked by ruling out almost all of the potential triples and marking those points in the space that are consistent with the function.\nThis is similar to the situation seen in Figure 4.2 which shows a two-dimensional space of all possible (voltage, current) pairs for nerve cells. The experimental data identified many possible pairs—marked by the dots in Figure @ref(fig:FHN-curve)—that we consistent with the relationships of the nerve-cell system.\nThe same is true of Figure 4.3, showing a graph of a function with a single input. The two-dimensional space shown in the figure contains (input, output) pairs, only a small fraction of which are consistent with the relationship described by the function. The points in that small fraction could be marked by individual dots, but instead of dots we draw the continuous curve connecting the dots. Every point on the curve is consistent with the relationship between input and output represented by the function.\nReturning to functions with two inputs, the space of all possibilities (y, z, output) is three-dimensional, but very few of those possibilities are consistent with the function to be graphed. You can imagine our putting dots at all of those consistent-with-the-function points, or our drawing lots and lots of continuous curves through those dots, but really the cloud of dots forms a surface; a continuous cloud of points floating over the (y, z) input space.\n?rfig-first-surface displays this surface. Since the image is drawn on a two-dimensional screen, we have to use painters’ techniques of perspective and shading. In the interactive version of the plot, you can move the viewpoint for the image which gives many people a more solid understanding of the surface being shown.\n\nsurface_plot(exp(-z)*sin(y) ~ y & z, interval(y=-6:6, z=0:2))\n\n\n\nDisplaying \\(g(y,z) \\equiv e^{-z}\\sin(y)\\) as a surface plot annotated with contour lines.\n\n\n\n\n\nNote that the surface plot is made with the R/mosaic surface_plot(), which takes arguments in exactly the same way as contour_plot()."
  },
  {
    "objectID": "Preliminaries/03-graphs-and-graphics.html#interpreting-contour-plots",
    "href": "Preliminaries/03-graphs-and-graphics.html#interpreting-contour-plots",
    "title": "4  Graphs and graphics",
    "section": "4.2 Interpreting contour plots",
    "text": "4.2 Interpreting contour plots\nIt may take some practice to learn to read contour plots fluently but it is a skill that’s worthwhile to have. Note that the graphics frame is the Cartesian space of the two inputs. The output is presented as contour lines. Each contour line has a label giving the numerical value of the function output. Each of the input value pairs on a given contour line corresponds to an output at the level labeling that contour line. To find the output for an input pair that is not on a contour line, you interpolate between the contours on either side of that point.\nFor example, the input pair (0, 0)—which is at the bottom of the frame, midway from left to right—falls between the contours labeled “20” and “22.” This means that the output corresponding to input (0, 0) is somewhere between 20 and 22. The point is much closer to the contour labeled “20”, so it’s reasonable to see the output value as 20.5. This is, of course, an approximation, but that’s the nature of reading numbers off of graphs.\nOften, the specific numerical value at a point is not of primary interest. Instead, we may be interested in how steep the function is at a point, which is indicated by the spacing between contours. When contours are closely spaced, the hillside is steep. Where contours are far apart, the hillside is not steep, perhaps even flat.\nAnother common task for interpreting contour plots is to locate the input pair that’s at a local high point or low point: the top of a hill or the bottom of a hollow. Such points are called local argmax or local argmin respectively. The output of the function at a local argmax is called the local maximum; similarly for a local argmin, where the output is called a local minimum. (The word “argmax” is a contraction of “argument of the maximum.” We will tend to use the word “input” instead of “argument”, but it means exactly the same thing to say “the inputs to a function” as to says “the arguments of a function.”)\n\nUsing the contour graph of the function,\n\nFind an input coordinate where the function is steepest.\nFind input coordinates for the high and low points in the function .\n\n\n\n\n\n\n\n\n\n\nA function is steepest where contour lines are spaced closely together, that is, where the function output changes a lot with a small change in input. This is true near inputs \\((x=0, y=1)\\). But notice that steepness involves a direction. Near \\((x=0,y=1)\\), changing the \\(x\\) value does not lead to a big change in output, but a small change in the value of \\(y\\) leads to a big change in output. In other words, the function is steep in the y-direction but not in the x-direction.\nThe highest output value explicitly marked in the graph is 8. We can imagine from the shapes of the contours surrounding the 8 contour that the function reaches a peak somewhere in the middle of the region enclosed by the 8 contour, near the input coordinate \\((x=0, y=-1.5)\\).\nSimilarly, the lowest output value marked is -10. In the middle of the area enclosed by the -10 contour is a local low point. That there are two such regions, one centered near input coordinate \\((x=-0.5, y=3.3)\\), the other at \\((x=1.5, y=3.1)\\).\n\n\nWhy do you call the graphs of functions of one variables slice plots rather than simply graphs?\nSaying “graph” for a display of \\(f(x)\\) versus \\(x\\) is correct and reasonable. But in MOSAIC Calculus we have another point to make.\nAlmost always, when mathematically modeling a real-world situation or phenomenon, we do not try to capture every nuance of every relationship that might exist in the real world. We leave some things out. Such simplifications make modeling problems easier to deal with and encourage us to identify the most important features of the most important relationships.\nIn this spirit, it’s useful always to assume that our models are leaving something out and that a more complete model involves a function with more inputs than the present candidate. The present candidate model should be considered as a slice of a more complete model. Our slice leaves out one or more of the variables in a more complete model.\nTo illustrate this, suppose that we have a “more complete model” in the form of a function of two inputs, as shown in the contour plot below.\n\n\n\n\n\n\n\n\n\nAs you become practiced reading contour plots, you might prefer to read this one as a hilltop (shaded yellow) side-by-side with a hollow or bowl (shaded purple), with green, almost level flanks at the left and right edges of the frame.\nThe most common forms of slice involve constructing a simpler function that has one input but not the other. For example, our simpler function might ignore input #2. There are different ways of collapsing the function of two inputs into a function of one input. An especially useful way in calculus is to take the two-input function and set one of the inputs to a constant value.\nFor instance, suppose we set input #2 to the constant value 1.5. This means that we can consider any value of input #1, but input #2 has been replaced by 1.5. In Figure @ref(fig:Fig-1c2), we’ve marked in red the points in the contour plot that give the output of the simplified function.\n\n\n\n\n\nLeft: A slice through the domain of a contour plot. Right: The value of the function along that slice, presented as a mathematical graph, as generated by slice_plot().\n\n\n\n\n\n\n\nLeft: A slice through the domain of a contour plot. Right: The value of the function along that slice, presented as a mathematical graph, as generated by slice_plot().\n\n\n\n\nEach point along the red line corresponds to a specific value of input #1. From the contours, we can read the output corresponding to each of those values of input #1. This relationship, output versus input #1 can be drawn as a mathematical graph (to the right of the contour plot). Study that graph until you can see how the rising and falling parts of the graph correspond to the contours being crossed by the red line.\nSlices can be taken in any direction or even along a curved path! The blue line below the slice constructed by letting input #2 vary and holding input #1 at the constant value 0."
  },
  {
    "objectID": "Preliminaries/03-graphs-and-graphics.html#exercises",
    "href": "Preliminaries/03-graphs-and-graphics.html#exercises",
    "title": "4  Graphs and graphics",
    "section": "4.3 Exercises",
    "text": "4.3 Exercises\n\n\nExercise XX.XX: sR6PVw reading slice plots\n\n\n\n\n\n\n\n\n\n\n\nFill in the table with the values of the function shown in the graph.\n\n\n\n\n\\(x\\)\n\\(f(x)\\)\n\n\n\n\n-3\n\n\n\n-2\n\n\n\n-1\n\n\n\n0\n\n\n\n1\n\n\n\n2\n\n\n\n3\n\n\n\n\n\nFill in the table with the \\(x\\) values corresponding to the function values.\n\n\n\n\n\\(x\\)\n\\(f(x)\\)\n\n\n\n\n0\n\n\n\n5\n\n\n\n12.5\n\n\n\n20\n\n\n\n\n    </details>\n\n\nExercise XX.XX: bYHEy6 read surface plots\n\n\n\n\nThe interactive figure displays a function, but we haven’t shown you any formula for the function, just the graph. ::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display}\n\n\n::: :::\nAs you place the cursor on a point on the surface, a box will display the \\((x,y,z)\\) coordinates are displayed.\n\nFind three points on the surface where \\(f(x, y)=15\\). (It doesn’t have to be exactly 15, just close.)\nFind a point where \\(f(x=2, y) = 12\\).\nExplain why you can find multiple input points that generate an output of 15, but only one point where \\(f(x=2, y)=12)\\).\n\n\nEXERCISE: USE a plot like surface_plot(exp(-z)*sin(y) ~ y & z, interval(y=-6:6, z=0:2), type=\"contour\") so that students can read off the (x,y,z) value. Ask for the value of the function at several input points. Ask them to trace the output value as the cursor moves along a contour line.\nEXERCISE: Here are some additional tasks which you should learn to perform at a glance when reading a contour plot:\n\nStart at a given input pair and determine two directions:\n\nthe direction to move which is most steeply uphill,\nthe direction to move which will keep the function output the same.\n\nTranslate a small region of a contour plot into the word for a corresponding geographical feature with that topology: hills, valleys, crests, coves, hollows, and so on.\n\nEXERCISE: Match up the slice plots with the paths indicated on the contour plot.\nEXERCISE: Ask them to find the actual lowest point in the graph ::: {.cell layout-align=“center” fig.showtext=‘false’} ::: {.cell-output-display}  ::: :::\n\n\nExercise XX.XX: bCD1KG read contour plots\n\nThe text introduced the area of a triangle as a function of the lengths of the three sides.\n\\[A(a,b,c) \\equiv \\frac{1}{4}\\sqrt{\\strut 4a^2b^2-(a^2+b^2-c^2)^2}\\ .\\] ::: {.cell layout-align=“center” fig.showtext=‘false’}\narea <- makeFun(sqrt(4*a^2*b^2 - (a^2+b^2-c^2)^2)/4 ~ a & b & c)\n:::\nThere are three inputs to area(), but a contour or surface plot can represent at most two of them. One possibility is to set one of the inputs to a specific value and represent each of the two remaining inputs as one coordinate axis. For instance, the following plot shows area(a, b, c=4): the area of triangles one side of which has length 4.\n\ncontour_plot(area(a,b,4)  ~ a & b, \n             domain(a=0:6, b=0:6), npts=200)\n\n\n\n\n\n\n\n\n(Aside: The npts=200 argument instructs the computer to draw a high-resolution graph.)\n\nAccording to the above graph, what is the area of an equilateral triangle each of whose sides has length 4?\nGive the abc side lengths for 4 different triangles, each of which has area 5.\nHow many different triangles are there with \\(c=4\\) and area 3? \nThe interval of the \\((a, b)\\) space shown in the plot is the square region \\(0 \\leq a \\leq 6\\) and \\(0 \\leq b \\leq 6\\). Yet there are empty places not marked with any output value. Why? (Hint: What’s the smallest possible area for a triangle?)\n\nThe input space for the area function is three dimensional. In the previous plot we took a planar slice of that space with \\(c=4\\). The graph below shows a different type of slice, the one that includes only right triangles, that is triangles where \\(c=a^2 + b^2\\).\n\n\n\n\n\n\n\n\n\n\nWrite down the R/mosaic command that will draw this graphic showing the area of right triangles."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "5  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  }
]